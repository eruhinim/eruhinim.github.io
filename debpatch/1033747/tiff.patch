commit c4a4bd0ae8130d61f5359a9ea7dca37f2c5fe071
Author: Soren Stoutner <soren@stoutner.com>
Date:   Thu Nov 16 10:51:46 2023 -0700

    Use system libtiff

diff --git a/debian/changelog b/debian/changelog
index 36d3e1e..ad6b066 100644
--- a/debian/changelog
+++ b/debian/changelog
@@ -1,3 +1,14 @@
+chromium (119.0.6045.123-2) UNRELEASED; urgency=medium
+
+  [ Soren Stoutner ]
+  * Add d/patches/system/tiff.patch.
+  * d/control:  Add build-depend on libtiff-dev.
+  * d/copyright:
+    - Add myself to copyright.
+    - Exclude third_party/pdfium/third_party/libtiff.
+
+ -- Andres Salomon <dilinger@debian.org>  Tue, 07 Nov 2023 23:49:11 -0500
+
 chromium (119.0.6045.123-1) unstable; urgency=high
 
   * New upstream security release.
diff --git a/debian/control b/debian/control
index ac4b004..874bee9 100644
--- a/debian/control
+++ b/debian/control
@@ -53,6 +53,7 @@ Build-Depends:
  libxt-dev,
  libgbm-dev,
  libpng-dev,
+ libtiff-dev,
  libxss-dev,
  libelf-dev,
  libpci-dev,
diff --git a/debian/copyright b/debian/copyright
index d90a9d4..ac1e7fc 100644
--- a/debian/copyright
+++ b/debian/copyright
@@ -89,6 +89,7 @@ Files-Excluded:
  build/config/freetype/freetype.gni
  third_party/android*
  third_party/lzma_sdk/bin
+ third_party/pdfium/third_party/libtiff
  third_party/test_fonts/test_fonts*
  third_party/test_fonts/README*
  third_party/pyelftools
@@ -184,6 +185,7 @@ Copyright:
  2009-2010 Fabien Tassin <fta@ubuntu.com>
  2010-2014 Giuseppe Iuculano <iuculano@debian.org>
  2012-2019 Michael Gilbert <mgilbert@debian.org>
+ 2023 Soren Stoutner <soren@stoutner.com>
 License: BSD-3-clause
 
 Files: debian/patches/ungoogled/*
diff --git a/debian/patches/series b/debian/patches/series
index 09529c3..7457dcf 100644
--- a/debian/patches/series
+++ b/debian/patches/series
@@ -33,6 +33,7 @@ disable/clang-version-check.patch
 
 system/icu-shim.patch
 system/jpeg.patch
+system/tiff.patch
 system/zlib.patch
 system/event.patch
 system/openjpeg.patch
diff --git a/debian/patches/system/tiff.patch b/debian/patches/system/tiff.patch
new file mode 100644
index 0000000..d12af33
--- /dev/null
+++ b/debian/patches/system/tiff.patch
@@ -0,0 +1,91 @@
+Description: use system tiff library
+Author: Soren Stoutner <soren@stoutner.com>
+Forwarded: https://bugs.chromium.org/p/chromium/issues/detail?id=1501495
+Last-Update: 2023-11-15
+
+--- a/third_party/pdfium/pdfium.gni
++++ b/third_party/pdfium/pdfium.gni
+@@ -77,7 +77,7 @@
+   use_system_libpng = false
+ 
+   # Don't build against bundled libtiff.
+-  use_system_libtiff = false
++  use_system_libtiff = true
+ 
+   # Don't build against bundled zlib.
+   use_system_zlib = false
+--- a/third_party/pdfium/core/fxcodec/tiff/tiff_decoder.cpp
++++ b/third_party/pdfium/core/fxcodec/tiff/tiff_decoder.cpp
+@@ -23,7 +23,11 @@
+ #include "third_party/base/numerics/safe_conversions.h"
+ 
+ extern "C" {
+-#include "third_party/libtiff/tiffiop.h"
++#if defined(USE_SYSTEM_LIBTIFF)
++#include <tiffio.h>
++#else
++#include "third_party/libtiff/tiffio.h"
++#endif
+ }  // extern C
+ 
+ namespace {
+@@ -106,9 +110,6 @@
+   return memcmp(ptr1, ptr2, static_cast<size_t>(size));
+ }
+ 
+-TIFFErrorHandler _TIFFwarningHandler = nullptr;
+-TIFFErrorHandler _TIFFerrorHandler = nullptr;
+-
+ namespace {
+ 
+ tsize_t tiff_read(thandle_t context, tdata_t buf, tsize_t length) {
+@@ -185,16 +186,6 @@
+ 
+ void tiff_unmap(thandle_t context, tdata_t, toff_t) {}
+ 
+-TIFF* tiff_open(void* context, const char* mode) {
+-  TIFF* tif = TIFFClientOpen("Tiff Image", mode, (thandle_t)context, tiff_read,
+-                             tiff_write, tiff_seek, tiff_close, tiff_get_size,
+-                             tiff_map, tiff_unmap);
+-  if (tif) {
+-    tif->tif_fd = (int)(intptr_t)context;
+-  }
+-  return tif;
+-}
+-
+ void TiffBGRA2RGBA(uint8_t* pBuf, int32_t pixel, int32_t spp) {
+   for (int32_t n = 0; n < pixel; n++) {
+     uint8_t tmp = pBuf[0];
+@@ -209,7 +200,9 @@
+ bool CTiffContext::InitDecoder(
+     const RetainPtr<IFX_SeekableReadStream>& file_ptr) {
+   m_io_in = file_ptr;
+-  m_tif_ctx.reset(tiff_open(this, "r"));
++  m_tif_ctx.reset(TIFFClientOpen(
++      /*name=*/"Tiff Image", /*mode=*/"r", /*clientdata=*/this, tiff_read,
++      tiff_write, tiff_seek, tiff_close, tiff_get_size, tiff_map, tiff_unmap));
+   return !!m_tif_ctx;
+ }
+ 
+@@ -426,8 +419,9 @@
+   if (pDIBitmap->GetBPP() == 32) {
+     uint16_t rotation = ORIENTATION_TOPLEFT;
+     TIFFGetField(m_tif_ctx.get(), TIFFTAG_ORIENTATION, &rotation);
+-    if (TIFFReadRGBAImageOriented(m_tif_ctx.get(), img_width, img_height,
+-                                  (uint32_t*)pDIBitmap->GetBuffer().data(),
++    uint32_t* data = const_cast<uint32_t*>(
++        reinterpret_cast<const uint32_t*>(pDIBitmap->GetBuffer().data()));
++    if (TIFFReadRGBAImageOriented(m_tif_ctx.get(), img_width, img_height, data,
+                                   rotation, 1)) {
+       for (uint32_t row = 0; row < img_height; row++) {
+         uint8_t* row_buf = pDIBitmap->GetWritableScanline(row).data();
+--- a/third_party/pdfium/third_party/BUILD.gn
++++ b/third_party/pdfium/third_party/BUILD.gn
+@@ -457,6 +457,7 @@
+   if (use_system_libtiff) {
+     config("system_tiff_config") {
+       libs = [ "tiff" ]
++      defines = [ "USE_SYSTEM_LIBTIFF" ]
+     }
+   } else {
+     source_set("fx_tiff") {
