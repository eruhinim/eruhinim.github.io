diff --git a/policy/ch-controlfields.rst b/policy/ch-controlfields.rst
index 509a96e..e6451d5 100644
--- a/policy/ch-controlfields.rst
+++ b/policy/ch-controlfields.rst
@@ -1028,6 +1028,18 @@ control file.
 We consider the meaning of each possible value of this field
 separately.
 
+``Multi-Arch: no``
+++++++++++++++++++
+
+This value is the default. When satisfying a dependency on a package
+(implicitly) marked ``Multi-Arch: no``, the depender and the dependee
+must have the same architecture. For the purpose of this matching,
+``Architecture: all`` packages are treated as if they had the
+architecture value of ``dpkg``.
+
+The value ``no`` cannot currently be used in binary packages due to
+limitations of the archive processing.
+
 ``Multi-Arch: foreign``
 +++++++++++++++++++++++
 
@@ -1037,12 +1049,15 @@ architecture.
 In order to determine whether this holds, you should consider
 
 the files installed by the package
-    ``Architecture: all`` packages always provide
-    architecture-independent interfaces.  Shared and static libraries
-    provide architecture-dependent ABIs.  Binary executables may
-    provide architecture-independent interfaces: could software
-    interacting with the executable determine the architecture for
-    which it was built without reading the executable file?
+    ``Architecture: all`` packages tend to provide
+    architecture-independent interfaces, but they can expose
+    architecture by calling into other packages (e.g. ``dpkg
+    --print-architecture``, ``uname`` or parsing ``/proc/cpuinfo``).
+    Shared and static libraries provide architecture-dependent ABIs.
+    Binary executables may provide architecture-independent interfaces:
+    could software interacting with the executable determine the
+    architecture for which it was built without reading the executable
+    file?
 
 maintainer scripts and triggers
     These may generate architecture-dependent interfaces, such as by
@@ -1050,11 +1065,13 @@ maintainer scripts and triggers
 
 the dependencies of a package
     A package may expose architecture-dependent interfaces of other
-    packages by depending on them, or by implicitly depending on
-    ``Essential: yes`` functionality.  Good examples are empty binary
-    packages that exist simply to cause other packages to be installed
-    (these are used when renaming a binary package, and are known as
-    transitional packages).
+    packages by depending on them. By using other packages (even
+    essential ones), their architecture awareness may be exposed. Shared
+    libraries are generally considered implementation detail and thus do
+    not contribute to the interfaces of a package.
+
+If in doubt, the intended interfaces should be described in a file
+``debian/README.multiarch``.
 
 .. _s5.7:
 
