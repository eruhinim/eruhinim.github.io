Index: asciidoc/02_package.txt
===================================================================
--- asciidoc/02_package.txt	(Revision 10206)
+++ asciidoc/02_package.txt	(Arbeitskopie)
@@ -885,7 +885,7 @@
 ...
 --------------------
 
-NOTE: Here, you can find my rationale to use the "suite", and "codeneme" in <<_debian_archive_basics>>.  The "distribution" is used when referring to both "suite" and "codeneme".  All archive "area" names offered by the archive are listed under "Component".
+NOTE: Here, you can find my rationale to use the "suite", and "codename" in <<_debian_archive_basics>>.  The "distribution" is used when referring to both "suite" and "codename".  All archive "area" names offered by the archive are listed under "Components".
 
 The integrity of the top level "`Release`" file is verified by cryptographic infrastructure called the http://wiki.debian.org/SecureApt[secure apt].
 
@@ -897,7 +897,7 @@
 
 The integrity of all the "`Packages`" and "`Sources`" files are verified by using MD5sum values in its top level "`Release`" file.  The integrity of all package files are verified by using MD5sum values in the "`Packages`" and "`Sources`" files.  See `debsums`(1) and <<_verification_of_installed_package_files>>.
 
-Since the cryptographic signature verification is very CPU intensive process than the MD5sum value calculation, use of MD5sum value for each package while using cryptographic signature for the top level "`Release`" file provides http://www.infodrom.org/\~joey/Writing/Linux-Journal/secure-apt/[the good security with the performance] (see <<_data_security_infrastructure>>).
+Since the cryptographic signature verification is a much more CPU intensive process than the MD5sum value calculation, use of MD5sum value for each package while using cryptographic signature for the top level "`Release`" file provides http://www.infodrom.org/\~joey/Writing/Linux-Journal/secure-apt/[the good security with the performance] (see <<_data_security_infrastructure>>).
 
 ==== Archive level "Release" files
 
@@ -938,7 +938,7 @@
 - "`/var/lib/apt/lists/ftp.us.debian.org_debian_dists_<distribution>_<area>_source_Sources`"
 - "`/var/cache/apt/apt-file/ftp.us.debian.org_debian_dists_<distribution>_Contents-<architecture>.gz`" (for `apt-file`)
 
-First 4 types of files are shared by all the pertinent APT commands and updated from command line by "`apt-get update`" and "`aptitude update`".  The "`Packages`" meta data are updated if there is the "`deb`" line in "`/etc/apt/sources.list`". The "`Sources`" meta data are updated if there is the "`deb-src`" line in "`/etc/apt/sources.list`".
+First 4 types of files are shared by all the pertinent APT commands and updated from command line by "`apt-get update`" or "`aptitude update`".  The "`Packages`" meta data are updated if there is the "`deb`" line in "`/etc/apt/sources.list`". The "`Sources`" meta data are updated if there is the "`deb-src`" line in "`/etc/apt/sources.list`".
 
 The "`Packages`" and "`Sources`" meta data contain "`Filename:`" stanza pointing to the file location of the binary and source packages.  Currently, these packages are located under the "`pool/`" directory tree for the improved transition over the releases.  
 
@@ -957,6 +957,10 @@
 ==== Local copies of the fetched packages
 
 All the remotely fetched packages via APT mechanism are stored in the "`/var/cache/apt/archives`" until they are cleaned.
+### HW: The deb files in /var/cache/apt/archives are not deleted, when a package is
+### HW: uninstalled or purged. There I would propose the following, to make it clearer:
+### HW: '... are stored in "`/var/cache/apt/archives`", until they are deleted from
+### HW: that directory.
 
 ==== Debian package file names
 
@@ -968,7 +972,7 @@
 package type                                      name structure
 ----------------------------------------------------------------------------------------------------------------------------
 The binary package (a.k.a `deb`)                  `<package-name>_<epoch>:<upstream-version>-<debian.version>-<architecture>.deb`
-The binary package (a.k.a `udeb`)                 `<package-name>_<epoch>:<upstream-version>-<debian.version>-<architecture>.udeb`
+The binary package for debian-installer (a.k.a `udeb`)                 `<package-name>_<epoch>:<upstream-version>-<debian.version>-<architecture>.udeb`
 The source package (upstream source)              `<package-name>_<epoch>:<upstream-version>-<debian.version>.orig.tar.gz`
 The `1.0` source package (Debian changes)         `<package-name>_<epoch>:<upstream-version>-<debian.version>.diff.gz`
 The `3.0 (quilt)` source package (Debian changes) `<package-name>_<epoch>:<upstream-version>-<debian.version>.debian.tar.gz`
@@ -1013,15 +1017,15 @@
 `/var/lib/dpkg/info/<package_name>.conffiles` list of configuration files. (user modifiable)
 `/var/lib/dpkg/info/<package_name>.list`      list of files and directories installed by the package
 `/var/lib/dpkg/info/<package_name>.md5sums`   list of MD5 hash values for files installed by the package
-`/var/lib/dpkg/info/<package_name>.preinst`   package script run before the package installation
-`/var/lib/dpkg/info/<package_name>.postinst`  package script run after the package installation
-`/var/lib/dpkg/info/<package_name>.prerm`     package script run before the package removal
-`/var/lib/dpkg/info/<package_name>.postrm`    package script run after the package removal
+`/var/lib/dpkg/info/<package_name>.preinst`   package script to be run before the package installation
+`/var/lib/dpkg/info/<package_name>.postinst`  package script to be run after the package installation
+`/var/lib/dpkg/info/<package_name>.prerm`     package script to be run before the package removal
+`/var/lib/dpkg/info/<package_name>.postrm`    package script to be run after the package removal
 `/var/lib/dpkg/info/<package_name>.config`    package script for `debconf` system
 `/var/lib/dpkg/alternatives/<package_name>`   the alternative information used by the `update-alternatives` command
 `/var/lib/dpkg/available`                     the availability information for all the package
-`/var/lib/dpkg/diversions`                    the diversions information used by `dpkg`(1) and set by`dpkg-divert`(8)
-`/var/lib/dpkg/statoverride`                  the stat override information used by `dpkg`(1) and set by`dpkg-statoverride`(8)
+`/var/lib/dpkg/diversions`                    the diversions information used by `dpkg`(1) and set by `dpkg-divert`(8)
+`/var/lib/dpkg/statoverride`                  the stat override information used by `dpkg`(1) and set by `dpkg-statoverride`(8)
 `/var/lib/dpkg/status`                        the status information for all the packages
 `/var/lib/dpkg/status-old`                    the first-generation backup of the "`var/lib/dpkg/status`" file
 `/var/backups/dpkg.status\*`                  the second-generation backup and older ones of the "`var/lib/dpkg/status`" file
@@ -1033,7 +1037,7 @@
 
 TIP: In http://www.debian.org/devel/debian-installer/[the debian-installer] environment, the `udpkg` command is used to open `udeb` packages.  The `udpkg` command is a stripped down version of the `dpkg` command.
 
-==== The update-alternative command
+==== The update-alternatives command
 
 The Debian system has mechanism to install somewhat overlapping programs peacefully using `update-alternatives`(8).  For example, you can make the `vi` command select to run `vim` while installing both `vim` and `nvi` packages.
 
@@ -1073,7 +1077,7 @@
 
 ==== Incompatibility with old user configuration
 
-If a desktop GUI program experienced instability after significant upstream version upgrade, you should suspect interferences with old local configuration files created by it. If it is stable under newly created user account, this hypothesis is confirmed.  (This is a bug of packaging and usually avoided by the packager.)
+If a desktop GUI program experienced instability after significant upstream version upgrade, you should suspect interferences with old local configuration files created by it. If it is stable under a newly created user account, this hypothesis is confirmed.  (This is a bug of packaging and usually avoided by the packager.)
 
 To recover stability, you should move corresponding local configuration files and restart the GUI program.  You may need to read old configuration file contents to recover configuration information later.  (Do not erase them too quickly.)
 
@@ -1081,7 +1085,7 @@
 
 Archive level package management systems, such as `aptitude`(8) or `apt-get`(1), do not even try to install packages with overlapped files using package dependencies (see <<_package_dependencies>>).
 
-Errors by the package maintainer or deployment of inconsistently mixed source of archives (see <<_packages_from_mixed_source_of_archives>>) by the system administrator may create situation with incorrectly defined package dependencies. When you install a package with overlapped files using `aptitude`(8) or `apt-get`(1) under such situation, `dpkg`(1) which unpacks package ensures to return error to the calling program without overwriting existing files.
+Errors by the package maintainer or deployment of inconsistently mixed source of archives (see <<_packages_from_mixed_source_of_archives>>) by the system administrator may create a situation with incorrectly defined package dependencies. When you install a package with overlapped files using `aptitude`(8) or `apt-get`(1) under such a situation, `dpkg`(1) which unpacks the package ensures to return an error to the calling program without overwriting existing files.
 
 CAUTION: The use of third party packages introduces significant system risks via maintainer scripts which are run with root privilege and can do anything to your system.  The `dpkg`(1) command only protects against overwriting by the unpacking.
 
@@ -1125,7 +1129,7 @@
 # dpkg -i /path/to/foo_<old_version>_<arch>.deb
 --------------------
 
-TIP: If system breakage is minor, you may alternatively downgrade the whole system as <<_emergency_downgrading>> using the higher level APT system.
+TIP: If system breakage is minor, you may alternatively downgrade the whole system as in <<_emergency_downgrading>> using the higher level APT system.
 
 If your system is unbootable from hard disk, you should seek other ways to boot it.
 
@@ -1143,7 +1147,7 @@
 
 If attempting to install a package this way fails due to some dependency violations and you really need to do this as the last resort, you can override dependency using `dpkg`@@@sq@@@s "`--ignore-depends`", "`--force-depends`" and other options.    If you do this, you need to make serious effort to restore proper dependency later. See `dpkg`(8) for details.
 
-NOTE: When your system is seriously broken, you should make a full backup of system to a safe place (see <<_backup_and_recovery>>) and should perform a clean installation.  This is less time consuming and produces better results in the end.
+NOTE: If your system is seriously broken, you should make a full backup of system to a safe place (see <<_backup_and_recovery>>) and should perform a clean installation.  This is less time consuming and produces better results in the end.
 
 ==== Recovering package selection data
 
@@ -1181,7 +1185,9 @@
 When you encounter more than 2 similar packages and wonder which one to install without "trial and error" efforts, you should use some **common sense**.  I consider following points are good indications of preferred packages.
 
 - Essential: yes > no
-- Component: main > contrib > non-free
+### HW: the common notation for 'main', 'contrib', 'non-free' etc according 
+### HW: to the Debian policy is 'area'.
+- Area: main > contrib > non-free
 - Priority: required > important > standard > optional > extra
 - Tasks: packages listed in tasks such as "Desktop environment"
 - Packages selected by the dependency package (e.g., `python2.4` by `python`)
@@ -1210,12 +1216,12 @@
 
 CAUTION: When using mixed source of archives, you must ensure compatibility of packages by yourself since the Debian does not guarantee it. If package incompatibility exists, you may break system. You must be able to judge these technical requirements. The use of mixed source of random archives is completely optional operation and its use is not something I encourage you to use.
 
-General rules for installing packages from different archives are followings.
+General rules for installing packages from different archives are the following.
 
 - Non-binary packages ("`Architecture: all`") are **safer** to install.
  * documentation packages: no special requirements
  * interpreter program packages: compatible interpreter must be available
-- Binary packages (non "`Architecture: all`") usually face many road blocks and **unsafe** to install.
+- Binary packages (non "`Architecture: all`") usually face many road blocks and are **unsafe** to install.
  * library version compatibility (including "`libc`")
  * related utility program version compatibility
  * Kernel http://en.wikipedia.org/wiki/Application_binary_interface[ABI] compatibility
@@ -1238,7 +1244,7 @@
 
 CAUTION: When using apt-pinning, you must ensure compatibility of packages by yourself since the Debian does not guarantee it.  The apt-pinning is completely optional operation and its use is not something I encourage you to use.
 
-CAUTION: Archive level Release files (see <<_archive_level_release_files>>) are used for the rule of `apt_preferences`(5).  Thus apt-pinning works only with "suite" name for http://ftp.us.debian.org/debian/dists/[normal Debian archives] and http://security.debian.org/dists/[security Debian archives]. (This is different from http://www.ubuntu.com/[Ubuntu] archives).  For example, you can do "`Pin: release a=unstable`" but can not do "`Pin: release a=sid`" in the "`/etc/apt/preferences`" file.
+CAUTION: Archive level Release files (see <<_archive_level_release_files>>) are used for the rule of `apt_preferences`(5).  Thus apt-pinning works only with "suite" name for http://ftp.us.debian.org/debian/dists/[normal Debian archives] and http://security.debian.org/dists/[security Debian archives]. (This is different from http://www.ubuntu.com/[Ubuntu] archives.)  For example, you can do "`Pin: release a=unstable`" but can not do "`Pin: release a=sid`" in the "`/etc/apt/preferences`" file.
 
 CAUTION: When you use non-Debian archive as a part of apt-pinning, you should check what they are intended for and also check their credibility.  For example, Ubuntu and Debian are not meant to be mixed.
 
@@ -1246,7 +1252,7 @@
 
 Here is a simplified explanation of **apt-pinning** technique.  
 
-APT system choses highest Pin-Priority **upgrading** package from available package sources defined in the "`/etc/apt/sources.list`" file as the **candidate version** package.  If the Pin-Priority of the package is larger than 1000, this version restriction for **upgrading** is dropped to enable downgrading (see <<_emergency_downgrading>>). 
+The APT system choses the highest Pin-Priority **upgrading** package from available package sources defined in the "`/etc/apt/sources.list`" file as the **candidate version** package.  If the Pin-Priority of the package is larger than 1000, this version restriction for **upgrading** is dropped to enable downgrading (see <<_emergency_downgrading>>). 
 
 Pin-Priority value of each package is defined by "Pin-Priority" entries in the "`/etc/apt/preferences`" file or uses its default value.
 
@@ -1335,7 +1341,7 @@
 Pin-Priority: 100
 --------------------
 
-When you wish to install a package named "`<package-name>`" with its dependencies from `unstable` archive under this configuration, you issue the following command which switches target release with "`-t`" option (Pin-Priority of `unstable` becomes 990.).
+When you wish to install a package named "`<package-name>`" with its dependencies from `unstable` archive under this configuration, you issue the following command which switches target release with "`-t`" option (Pin-Priority of `unstable` becomes 990).
 
 --------------------
 $ sudo apt-get install -t unstable <package-name>
@@ -1347,7 +1353,7 @@
 
 TIP: I usually edit the "`/etc/apt/sources.list`" file to comment out "`unstable`" archive entry right after above operation.  This avoids slow update process of having too many entries in the "`/etc/apt/sources.list`" file although this prevents upgrading packages which were installed from `unstable` archive using current `unstable` archive.
 
-TIP: If "`Pin-Priority: 1`" is used instead of "`Pin-Priority: 100`" for the "`/etc/apt/preferences`" file, already installed packages having Pin-Priority value of 100 are not upgraded by `unstable` archive even if "`testing`" entry in the "`/etc/apt/sources.list`" file is removed.
+TIP: If "`Pin-Priority: 1`" is used instead of "`Pin-Priority: 100`" in the "`/etc/apt/preferences`" file, already installed packages having Pin-Priority value of 100 are not upgraded by `unstable` archive even if "`testing`" entry in the "`/etc/apt/sources.list`" file is removed.
 
 If you wish to track particular packages in `unstable` automatically without initial "`-t unstable`" installation, you must create the "`/etc/apt/preferences`" file and explicitly list all those packages at the top of it as the following.
 
@@ -1427,7 +1433,7 @@
 
 ==== Emergency downgrading
 
-CAUTION: Downgrading is not officially supported by the Debian by design.  It should be done only as a part of emergency recovery process.  Despite of this situation, it is known to work well in many incidents.  For critical systems, You should backup all important data on the system after the recovery operation and re-install the new system from the scratch.
+CAUTION: Downgrading is not officially supported by the Debian by design.  It should be done only as a part of emergency recovery process.  Despite of this situation, it is known to work well in many incidents.  For critical systems, you should backup all important data on the system after the recovery operation and re-install the new system from the scratch.
 
 You may be lucky to downgrade from newer archive to older archive to recover from broken system upgrade by manipulating **candidate version** (see <<_tweaking_candidate_version>>).  This is lazy alternative to tedious actions of many "`dpkg -i <broken-package>@@@ul@@@<old-version>.deb`" commands (see <<_rescue_with_the_dpkg_command>>).
 
@@ -1451,11 +1457,13 @@
 Pin-Priority: 1010
 --------------------
 
+### HW: executing "apt-get update" is missing here IMHO after changing the sources.list.
+
 Run "`apt-get dist-upgrade`" to force downgrading of packages across the system. 
 
 Remove this special "`/etc/apt/preferences`" file after this emergency downgrading. 
 
-TIP: It is good idea to remove (not purge!) as much packages to minimize dependency problems.  You may need to manually remove and install some packages to get system downgraded.  Linux kernel, bootloader, udev, PAM, APT, and networking related packages and their configuration files require special attention.
+TIP: It is a good idea to remove (not purge!) as much packages to minimize dependency problems.  You may need to manually remove and install some packages to get system downgraded.  Linux kernel, bootloader, udev, PAM, APT, and networking related packages and their configuration files require special attention.
 
 ==== Who uploaded the package?
 
@@ -1497,6 +1505,7 @@
 $ cd foo*
 --------------------
 
+### HW: maybe the following is meant here? "Adjust packages that need to be installed, if needed."
 Adjust installed packages if needed.
 
 Execute the following.
@@ -1529,7 +1538,7 @@
 `approx`        @-@popcon1@-@ @-@psize1@-@ caching proxy server for Debian archive files (compiled http://en.wikipedia.org/wiki/Objective_Caml[OCaml] program)
 `apt-cacher`    @-@popcon1@-@ @-@psize1@-@ Caching proxy for Debian package and source files (Perl program)
 `apt-cacher-ng` @-@popcon1@-@ @-@psize1@-@ Caching proxy for distribution of software packages (compiled C++ program)
-`debtorrent`    @-@popcon1@-@ @-@psize1@-@ Bittorrent proxy for downloading Debian packages (Python program)
+`debtorrent`    @-@popcon1@-@ @-@psize1@-@ BitTorrent proxy for downloading Debian packages (Python program)
 ------------------------------------------------------------------------------------------------------------------------------------------
 
 CAUTION: When Debian reorganizes its archive structure, these specialized proxy tools tend to require code rewrites by the package maintainer and may not be functional for a while.  On the other hand, generic web (http) proxy servers are more robust and easier to cope with such changes.
@@ -1682,7 +1691,7 @@
 
 `alien`(1) enables the conversion of binary packages provided in Red Hat `rpm`, Stampede `slp`, Slackware `tgz`, and Solaris `pkg` file formats into a Debian `deb` package.  If you want to use a package from another Linux distribution than the one you have installed on your system, you can use `alien` to convert it from your preferred package format and install it.  `alien` also supports LSB packages.
 
-WARNING: `alien`(1) should not be used to replace essential system packages, such as `sysvinit`, `libc6`, `libpam-modules`, etc.  Practically, `alien`(1) should only used for **non-free** binary-only packages which are LSB compliant or statically linked.  For free softwares, you should use their source packages to make real Debian packages.
+WARNING: `alien`(1) should not be used to replace essential system packages, such as `sysvinit`, `libc6`, `libpam-modules`, etc.  Practically, `alien`(1) should only be used for **non-free** binary-only packages which are LSB compliant or statically linked.  For free softwares, you should use their source packages to make real Debian packages.
 
 ==== Extracting package without dpkg
 
@@ -1714,7 +1723,7 @@
 - Official and detailed documentations on the Debian archive:
  * http://www.debian.org/doc/debian-policy/ch-archive["Debian Policy Manual Chapter 2 - The Debian Archive"],
  * http://www.debian.org/doc/manuals/developers-reference/resources.html#archive["Debian Developer@@@sq@@@s Reference, Chapter 4 - Resources for Debian Developers 4.6 The Debian archive"], and
- * http://www.debian.org/doc/FAQ/ch-ftparchives["The Debian GNU/Linux FAQ, Chapter 5 - The Debian FTP archives"].
+ * http://www.debian.org/doc/FAQ/ch-ftparchives["The Debian GNU/Linux FAQ, Chapter 6 - The Debian FTP archives"].
 - Tutorial for building of a Debian package for Debian users:
  * http://www.debian.org/doc/manuals/maint-guide/["Debian New Maintainers' Guide"].
 
