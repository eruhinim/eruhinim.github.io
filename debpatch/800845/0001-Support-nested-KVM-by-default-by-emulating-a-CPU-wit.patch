From 245c2e8aa68b06bb83be6fad125a749690cc2a15 Mon Sep 17 00:00:00 2001
From: Christian Seiler <christian@iwakd.de>
Date: Fri, 4 Mar 2016 17:13:18 +0100
Subject: [PATCH 1/3] Support nested KVM by default by emulating a CPU with
 VMX/SVM support on x86_64.

Implemented support for nested KVM by default on x86_64, if the default
qemu command was specified and no CPU type was explicitly requested by
the user.
---
 debian/changelog             |  2 ++
 virt-subproc/adt-virt-qemu   | 28 +++++++++++++++++++++++++++-
 virt-subproc/adt-virt-qemu.1 | 20 ++++++++++++++++++++
 3 files changed, 49 insertions(+), 1 deletion(-)

diff --git a/debian/changelog b/debian/changelog
index 4d38b67..dc00b57 100644
--- a/debian/changelog
+++ b/debian/changelog
@@ -20,6 +20,8 @@ autopkgtest (3.19.4) UNRELEASED; urgency=medium
   [ Christian Seiler ]
   * adt-virt-qemu: Provide read-only version of the VM image to the test as
     /dev/baseimage, for tests that want to run nested QEMU. (Closes: #800845)
+  * Support nested KVM by default by emulating a CPU with VMX/SVM support on
+    x86_64.
 
  -- Martin Pitt <mpitt@debian.org>  Tue, 23 Feb 2016 18:21:51 +0100
 
diff --git a/virt-subproc/adt-virt-qemu b/virt-subproc/adt-virt-qemu
index 9759c09..d53c94e 100755
--- a/virt-subproc/adt-virt-qemu
+++ b/virt-subproc/adt-virt-qemu
@@ -52,10 +52,11 @@ p_qemu = None
 ssh_port = None
 ssh_port_lock = None
 normal_user = None
+qemu_cmd_default = None
 
 
 def parse_args():
-    global args
+    global args, qemu_cmd_default
 
     parser = ArgumentParser()
 
@@ -416,6 +417,22 @@ sys.exit(rc == 255 and 253 or rc)
         VirtSubproc.bomb('failed to connect to VM')
 
 
+def get_cpuflags():
+    try:
+        for line in open('/proc/cpuinfo', 'r'):
+            if line.startswith('flags\t') or line.startswith('flags '):
+                line = line.split()
+            else:
+                continue
+            if line[1] != ':':
+                continue
+            return line[2:]
+        return []
+    except (IOError, OSError):
+        # fetching CPU flags isn't critical (only used to enable nested KVM),
+        # so don't fail here
+        return []
+
 def find_free_port(start):
     '''Find an unused port in the range [start, start+50)'''
 
@@ -508,6 +525,15 @@ def hook_open():
 
     if os.path.exists('/dev/kvm'):
         argv.append('-enable-kvm')
+        # Enable nested KVM by default on x86_64
+        if os.uname()[4] == 'x86_64' and args.qemu_command == qemu_cmd_default and (not args.qemu_options or not '-cpu' in args.qemu_options.split()):
+            cpuflags = get_cpuflags()
+            if 'vmx' in cpuflags:
+                argv.append('-cpu')
+                argv.append('kvm64,+vmx,+lahf_lm')
+            elif 'svm' in cpuflags:
+                argv.append('-cpu')
+                argv.append('kvm64,+svm,+lahf_lm')
 
     # pass through option to qemu
     if args.qemu_options:
diff --git a/virt-subproc/adt-virt-qemu.1 b/virt-subproc/adt-virt-qemu.1
index 5e3ec3d..17ef25b 100644
--- a/virt-subproc/adt-virt-qemu.1
+++ b/virt-subproc/adt-virt-qemu.1
@@ -145,6 +145,26 @@ build, which can cause a build failure if you are using a development
 series template. You will need to run \fBapt-get update\fR in the template
 yourself (e. g. using \fB\-\-setup\-commands\fR).
 
+If the
+.B --qemu-command
+option has not been specified and no custom CPU type was selected in
+.BR --qemu-options ,
+.B adt-virt-qemu
+will try to enable nested KVM support by default on x86_64 platforms
+if the hardware supports this. To fully enable this, one needs to
+additionally set some module parameters on the host, by creating a file
+.I /etc/modprobe.d/nested_kvm.conf
+with the contents
+
+.EX
+options kvm_intel nested=1
+options kvm_amd   nested=1
+.EE
+
+and rebooting or reloading the KVM modules. It is still possible to use
+QEMU in tests without this, albeit without hardware acceleration. On
+Ubuntu systems these module options are typically already set.
+
 .SH BUILDING IMAGES
 
 .SS Debian
-- 
2.5.0

