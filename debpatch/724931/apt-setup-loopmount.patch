diff -ruN apt-setup.orig/finish-install.d/10apt-cdrom-setup apt-setup/finish-install.d/10apt-cdrom-setup
--- apt-setup.orig/finish-install.d/10apt-cdrom-setup	2014-02-13 12:42:00.738178000 +0100
+++ apt-setup/finish-install.d/10apt-cdrom-setup	2014-02-13 15:49:18.868155368 +0100
@@ -10,10 +10,10 @@
 if [ "$loopdev" ]; then
 	# Remove additional CD-Set mount points
 	j=1
-	while [ -d /target/media/cdrom/$j ]; do
-		logger -t finish-install "unmount /target/media/cdrom/$j"
-		umount /target/media/cdrom/$j 2>/dev/null || true
-		rmdir /target/media/cdrom/$j
+	while [ -d /target/media/cdrom$j ]; do
+		logger -t finish-install "unmount /target/media/cdrom$j"
+		umount /target/media/cdrom$j 2>/dev/null || true
+		rmdir /target/media/cdrom$j
 		j=$(($j + 1))
 	done
 
diff -ruN apt-setup.orig/generators/41cdset apt-setup/generators/41cdset
--- apt-setup.orig/generators/41cdset	2014-02-13 12:42:00.738178000 +0100
+++ apt-setup/generators/41cdset	2014-02-13 15:28:30.555167746 +0100
@@ -8,6 +8,20 @@
 	logger -t apt-setup "$@"
 }
 
+split_string() {
+	# Save the old internal field separator.
+	OIFS=$IFS
+	# Change the internal field separator.
+	IFS=$2
+	arr=$1
+	# Convert the separator to newline.
+	for x in $arr; do
+		echo "$x"
+	done
+	# Restore the old internal field separator.
+	IFS=$OIFS
+}
+
 # This code is copied from chroot-setup.sh, and is needed until after a d-i
 # release whose initrds contain a sufficiently new version of di-utils.
 if ! type chroot_cleanup_localmounts >/dev/null 2>&1; then
@@ -46,7 +60,7 @@
 # bluray CDs have cd_type 'bluray'
 cd_type=$(cat /cdrom/.disk/cd_type)
 log "The disk type is: $cd_type"
-if [ "$cd_type" != full_cd ] && [ "$cd_type" != dvd ]; then
+if [ "$cd_type" == "not_complete" ]; then
 	exit 0
 fi
 
@@ -123,23 +137,32 @@
 		if [ $run_count -eq 0 ]; then
 			log "Trying to find usable ISOs in the folder, where the boot ISO is..."
 			loopdir=$(db_getval cdrom-detect/cdrom_device)
-			ISOname=$(basename $loopdir)
-			loopdir=$(dirname $loopdir)
-			if [ "$cd_type" = "dvd" ]; then
-				# DVD
-				ISOstart=${ISOname%DVD-*}
-				ISOs=$(ls ${loopdir}/ | grep ${ISOstart}DVD-[^1].*[.]iso$)
-			elif [ "$cd_type" = "blueray" ]; then
-				# BD
-				ISOstart=${ISOname%BD-*}
-				ISOs=$(ls ${loopdir}/ | grep ${ISOstart}BD-[^1].*[.]iso$)
-			else
-				# probably CD
-				ISOstart=${ISOname%CD-*}
-				ISOs=$(ls ${loopdir}/ | grep ${ISOstart}CD-[^1].*[.]iso$)
-			fi
-			for iso in $ISOs; do
-				max_run=$(($max_run + 1))
+			ISOname=${loopdir##*/}
+			loopdir=${loopdir%/*}
+
+			ISOarray=$(split_string "$ISOname" "-")
+			allISOs=$(ls ${loopdir}/ | grep .iso)
+			ISO=""
+			for iso in $allISOs; do
+				arr=$(split_string "$iso" "-")
+				count=0
+				# Count common specifiers.
+				for elem in $arr; do
+					if [ "$elem" == "1.iso" ]; then
+						# Only look for supplementary ISOs, not ISOs like '*-CD-1.iso'.
+						count=-1
+						break
+					fi
+					for orig_elem in $ISOarray; do
+						if [ "$elem" == "$orig_elem" ]; then
+							count=$(($count + 1))
+						fi
+					done
+				done
+				if ([ $count -ge 4 ] && [ "$iso" != "$ISOname" ]); then
+					ISOs="$ISOs $iso"
+					max_run=$(($max_run + 1))
+				fi
 			done
 			log "Found $max_run ISO(s): $ISOs"
 		fi
