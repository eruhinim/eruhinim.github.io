--- /usr/bin/mklibs.orig	2007-05-08 23:29:17.000000000 +0200
+++ /usr/bin/mklibs.nm	2007-05-09 00:02:12.000000000 +0200
@@ -105,13 +105,7 @@
     output = regexpfilter(output, ".*NEEDED\s*lib(\S+)\.so.*$")
     return ' '.join(["-l%s" % x for x in output])
 
-# Scan readelf output. Example:
-# Num Buc:    Value  Size Type  Bind  Vis     Ndx Name
-#   1   1: 080497e4   168 FUNC GLOBAL DEFAULT UND strchr
-# or in some cases on alpha:
-#  2007 335: 0000000000084d00   168    FUNC GLOBAL DEFAULT [<other>: 80]   10 strchr
-symline_regexp = \
-    re.compile("\s*\d+\s+\d+: .+\s+\d+\s+\w+\s+(\w+)+\s+\w+\s+(?:\[<other>: \d+\]\s+)*(\w+)\s+([^\s]+)$")
+symline_regexp = re.compile("^(\w+|\s+)\s(\w)\s(\w+)$")
 
 # Return undefined symbols in an object as a set of tuples (name, weakness)
 def undefined_symbols(obj):
@@ -119,14 +113,15 @@
         raise "Cannot find lib" + obj
 
     result = set()
-    output = command(target + "readelf", "-s", "-D", "-W", obj)
+    #    output = command(target + "readelf", "-s", "-D", "-W", obj)
+    output = command(target + "nm", "-D", obj)
     for line in output:
         match = symline_regexp.match(line)
         if match:
-            bind, ndx, name = match.groups()
-            if bind != "LOCAL" and ndx == "UND":
+            foo, ndx, name = match.groups()
+            if (ndx == "U" or ndx == "w"):
                 debug(DEBUG_SPAM, "undefined_symbols adding", `name`)
-                result.add((name, bind == "WEAK"))
+                result.add((name, ndx == "w"))
     return result
 
 # Return a set of symbols provided by a library
@@ -136,12 +131,12 @@
 
     result = set()
     debug(DEBUG_SPAM, "provided_symbols result = ", `result`)
-    output = command(target + "readelf", "-s", "-D", "-W", obj)
+    output = command(target + "nm", "-D", obj)
     for line in output:
         match = symline_regexp.match(line)
         if match:
-            bind, ndx, name = match.groups()
-            if bind != "LOCAL" and not ndx in ("UND", "ABS"):
+            foo, ndx, name = match.groups()
+            if not ndx in ("U", "w", "A"):
                 debug(DEBUG_SPAM, "provided_symbols adding ", `name`)
                 result.add(name)
     return result
@@ -441,7 +436,7 @@
     for (symbol, is_weak) in needed_symbols:
         if not symbol_provider.has_key(symbol):
             if not is_weak:
-                raise "No library provides non-weak " + symbol
+                raise  "No library provides non-weak " + symbol
         else:
             lib = symbol_provider[symbol]
             library_symbols_used[lib].add(symbol)
