From d89a3db8ab15359ae8121a2d29f19d028ba91d32 Mon Sep 17 00:00:00 2001
From: Daniel Hartwig <mandyke@gmail.com>
Date: Mon, 23 Jan 2012 20:57:37 +0800
Subject: [PATCH] I18n deficiency in cmdline "untrusted" prompt.

* src/cmdline/cmdline_prompt.cc(prompt_trust): use
  rpmatch(3) to properly handle translated and
  untranslated responses. (LP: #16953)
---
 src/cmdline/cmdline_prompt.cc |   44 ++++++++++------------------------------
 1 files changed, 11 insertions(+), 33 deletions(-)

diff --git a/src/cmdline/cmdline_prompt.cc b/src/cmdline/cmdline_prompt.cc
index f650ba4..d0b5499 100644
--- a/src/cmdline/cmdline_prompt.cc
+++ b/src/cmdline/cmdline_prompt.cc
@@ -553,30 +553,15 @@ static bool prompt_trust(const shared_ptr<terminal_metrics> &term_metrics)
 	}
 
 
-      // ForTranslators: This string is a confirmation message, which
-      // users (especially CJK users) should be able to input without
-      // input methods.  Please include nothing but ASCII characters.
-      // The text preceding the pipe character (|) will be ignored and
-      // can be removed from your translation.
-      const string okstr    = P_("Go ahead and ignore the warning|Yes");
-      // ForTranslators: This string is a confirmation message, which
-      // users (especially CJK users) should be able to input without
-      // input methods.  Please include nothing but ASCII characters.
-      // The text preceding the pipe character (|) will be ignored and
-      // can be removed from your translation.
-      const string abortstr = P_("Abort instead of overriding the warning|No");
-
-      // These strings are used to compare in a translation-invariant
-      // way, so that "yes" and "no" are always valid inputs; if the
-      // user can't enter the translated string for some reason,
-      // he/she can always enter the fallback strings.
-      const string fallback_okstr = "Yes";
-      const string fallback_abortstr = "No";
-
       while(1)
 	{
-	  printf(_("Do you want to ignore this warning and proceed anyway?\n"));
-	  printf(_("To continue, enter \"%s\"; to abort, enter \"%s\": "), okstr.c_str(), abortstr.c_str());
+          // ForTranslators: This prompt uses rpmatch(3) to accept
+          // standardized translated responses as well as "y"
+          // (affirmative) and "n" (negative).  The hint "[y/n]" can
+          // be translated to the standard native prompt (e.g. "[j/n]"
+          // for German) but, as there is no default response, please
+          // do not use a capital to indicate one.
+	  printf(_("Do you want to ignore this warning and proceed anyway? [y/n] "));
 	  char buf[1024];
 	  cin.getline(buf, 1023);
 	  buf[1023]='\0';
@@ -584,19 +569,11 @@ static bool prompt_trust(const shared_ptr<terminal_metrics> &term_metrics)
 	  if(cin.eof())
 	    throw StdinEOFException();
 
+          int res = rpmatch(buf);
+          if(res >= 0)
+            return res > 0;
 
-	  const bool is_ok =             strncasecmp(okstr.c_str(), buf, okstr.size()) == 0;
-	  const bool is_fallback_ok =    strncasecmp(fallback_okstr.c_str(), buf, fallback_okstr.size()) == 0;
-	  const bool is_abort =          strncasecmp(abortstr.c_str(), buf, abortstr.size()) == 0;
-	  const bool is_fallback_abort = strncasecmp(fallback_abortstr.c_str(), buf, fallback_abortstr.size()) == 0;
-
-	  const bool rval = is_ok || (is_fallback_ok && !is_abort);
-
-	  if(!is_ok && !is_abort && !is_fallback_ok && !is_fallback_abort)
-	    printf(_("Unrecognized input.  Enter either \"%s\" or \"%s\".\n"), okstr.c_str(), abortstr.c_str());
-	  else
-	    return rval;
+          printf(_("Unrecognized input.  Enter either \"%s\" or \"%s\".\n"), _("Yes"), _("No"));
 	}
     }
 
-- 
1.7.5.4

