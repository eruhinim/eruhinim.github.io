diff -u apache2-2.2.8/debian/patches/00list apache2-2.2.8/debian/patches/00list
--- apache2-2.2.8/debian/patches/00list
+++ apache2-2.2.8/debian/patches/00list
@@ -24,0 +25 @@
+100_mpm_wokers_crash.dpatch
only in patch2:
unchanged:
--- apache2-2.2.8.orig/debian/patches/100_mpm_wokers_crash.dpatch
+++ apache2-2.2.8/debian/patches/100_mpm_wokers_crash.dpatch
@@ -0,0 +1,46 @@
+#! /bin/sh /usr/share/dpatch/dpatch-run
+
+@DPATCH@
+diff -Naur httpd-2.2.8.orig/server/mpm/experimental/event/fdqueue.c httpd-2.2.8/server/mpm/experimental/event/fdqueue.c
+--- httpd-2.2.8.orig/server/mpm/experimental/event/fdqueue.c	2007-07-25 09:13:49.000000000 -0400
++++ httpd-2.2.8/server/mpm/experimental/event/fdqueue.c	2008-05-20 03:18:03.000000000 -0400
+@@ -194,10 +194,16 @@
+                                                           (*new_recycle));
+         new_recycle->pool = pool_to_recycle;
+         for (;;) {
+-            new_recycle->next = queue_info->recycled_pools;
++	    /*
++	     * Save queue_info->recycled_pool in local varaible next because
++	     * new_recycle->next can be changed after apr_atomic_casptr
++	     * function call. For gory details see PR 4402.
++            */
++	    struct recycled_pool *next = queue_info->recycled_pools;
++	    new_recycle->next = next;
+             if (apr_atomic_casptr
+                 ((volatile void **) &(queue_info->recycled_pools),
+-                 new_recycle, new_recycle->next) == new_recycle->next) {
++                 new_recycle, next) == next) {
+                 break;
+             }
+         }
+diff -Naur httpd-2.2.8.orig/server/mpm/worker/fdqueue.c httpd-2.2.8/server/mpm/worker/fdqueue.c
+--- httpd-2.2.8.orig/server/mpm/worker/fdqueue.c	2007-07-25 09:13:49.000000000 -0400
++++ httpd-2.2.8/server/mpm/worker/fdqueue.c	2008-05-20 03:12:43.000000000 -0400
+@@ -94,10 +94,14 @@
+                                                          sizeof(*new_recycle));
+         new_recycle->pool = pool_to_recycle;
+         for (;;) {
+-            new_recycle->next = queue_info->recycled_pools;
++            /* Save queue_info->recycled_pool in local variable next because
++             * new_recycle->next can be changed after apr_atomic_casptr
++             * function call. For gory details see PR 44402.
++             */
++            struct recycled_pool *next = queue_info->recycled_pools;
++            new_recycle->next = next;
+             if (apr_atomic_casptr((volatile void**)&(queue_info->recycled_pools),
+-                                  new_recycle, new_recycle->next) ==
+-                new_recycle->next) {
++                                  new_recycle, next) == next) {
+                 break;
+             }
+         }
