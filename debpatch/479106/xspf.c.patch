--- xspf.0.c	2008-05-23 18:44:20.000000000 -0400
+++ xspf.c	2009-03-23 22:03:40.000000000 -0400
@@ -105,15 +105,47 @@
     cal = xmlCanonicPath(path);
     if (cal == NULL)
         return NULL;
-    
+
     memset(&temp, 0, sizeof(temp));
     temp.path = (char *)cal;
     ret = xmlSaveUri(&temp);
     xmlFree(cal);
-    
+
     return ret;
 }
 
+static void * my_malloc (int length) {
+  void * mem;
+   mem = malloc (length);
+   if (! mem) {
+      fprintf (stderr, "xspf: out of memory\n");
+      exit (1);
+   }
+   return mem;
+}
+
+static char * path_add_context (const char * path, const char * context) {
+  char * search, * new;
+  int length1, length2;
+   if (strstr (path, "://"))
+      return 0;
+   if (path [0] == '/') {
+      search = strstr (context, "://");
+      if (! search)
+         return 0;
+      length1 = search + 3 - context;
+   } else {
+      search = strrchr (context, '/');
+      if (! search)
+         return 0;
+      length1 = search + 1 - context;
+   }
+   length2 = strlen (path) + 1;
+   new = my_malloc (length1 + length2);
+   memcpy (new, context, length1);
+   memcpy (new + length1, path, length2);
+   return new;
+}
 
 static void xspf_add_file(xmlNode *track, const gchar *filename,
             gint pos, const gchar *base)
@@ -180,6 +212,11 @@
     if (location) {
         gchar *scratch = NULL;
 
+        scratch = path_add_context (location, filename);
+        if (scratch) {
+           free (location);
+           location = scratch;
+        }
         /* filename and path in tuple must be unescaped. */
         scratch = aud_uri_to_display_basename(location);
         aud_tuple_associate_string(tuple, FIELD_FILE_NAME, NULL, scratch);
