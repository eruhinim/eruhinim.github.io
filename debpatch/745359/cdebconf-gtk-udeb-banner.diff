--- a/src/modules/frontend/gtk/fe_data.h
+++ b/src/modules/frontend/gtk/fe_data.h
@@ -66,6 +66,8 @@ struct frontend_data
      */
     int logo_width;
     int logo_height;
+    bool logo_adjusted;
+    GtkWidget * logo_widget;
 
     /** Internal data of the handler of progress commands.
      *
--- a/src/modules/frontend/gtk/ui.c
+++ b/src/modules/frontend/gtk/ui.c
@@ -103,6 +103,30 @@ static gboolean handle_exposed_banner(GtkWidget * widget,
     gchar * message;
     char * text;
 
+    /* There's no way to get the window size before it's realized, so
+     * defer (possibly) adjusting the logo size until the first expose
+     * event.
+     */
+    if (TRUE != fe_data->logo_adjusted) {
+        fprintf(stderr, "Checking the need for logo adjustment.\n");
+
+        /* If logo and window widths differ, scale. */
+        GtkAllocation allocation;
+        gtk_widget_get_allocation(fe_data->window, &allocation);
+        if (fe_data->logo_width != allocation.width) {
+            fprintf(stderr, "Logo needs scaling: width from %d to %d pixels.\n", fe_data->logo_width, allocation.width);
+            GdkPixbuf * scaled_pixbuf = gdk_pixbuf_scale_simple(gtk_image_get_pixbuf(GTK_IMAGE(fe_data->logo_widget)),
+                                                                allocation.width,
+                                                                fe_data->logo_height,
+                                                                GDK_INTERP_BILINEAR);
+            gtk_image_set_from_pixbuf(GTK_IMAGE(fe_data->logo_widget), scaled_pixbuf);
+            fe_data->logo_width = allocation.width;
+        } else {
+            fprintf(stderr, "Logo needs no scaling: width stays at %d pixels.\n", allocation.width);
+        }
+        fe_data->logo_adjusted = TRUE;
+    }
+
     if (NULL != fe->info) {
         text = q_get_description(fe, fe->info);
         message = g_strdup_printf(
@@ -189,6 +213,8 @@ static void create_banner(struct frontend * fe, GtkWidget * container)
     pixbuf = gtk_image_get_pixbuf(GTK_IMAGE(logo));
     fe_data->logo_width = gdk_pixbuf_get_width(pixbuf);
     fe_data->logo_height = gdk_pixbuf_get_height(pixbuf);
+    fe_data->logo_adjusted = FALSE;
+    fe_data->logo_widget = logo;
 
     g_signal_connect_after(G_OBJECT(banner), "expose_event",
                            G_CALLBACK(handle_exposed_banner), fe);
