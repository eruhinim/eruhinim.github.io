--- dh	2008-07-09 23:16:57.000000000 +0300
+++ dh	2008-07-14 00:17:49.000000000 +0300
@@ -95,6 +95,18 @@
 
 Remove I<existing_command> from the list of commands to run.
 
+=item Debian::Debhelper::Dh_Lib::set_alias_command(command_alias, real_command, command_arg(s) ...)
+
+Turn I<command_alias> command into an alias for the I<real_command> with the specified
+I<command_args> (if any). You can use this function either to pass additional arguments
+to the I<command_alias> call (if I<command_alias> == I<real_command>) or replace a standard
+command with a custom implementation. Please note, however, that in the latter case,
+implementation of the I<real_command> has to disguise as I<command_alias> in the debhelper
+logs because B<dh> tracks I<command_alias>, not I<real_command>.
+
+To unset the I<command_alias> and turn it back to the normal command, just pass the alias
+in the I<command_alias> parameter and do not set other parameters.
+
 =back
 
 =cut
@@ -296,6 +308,7 @@
 unshift @{$dh{WITH}}, "python-support";
 
 # sequence addon interface
+my %command_aliases = ();
 sub _insert {
 	my $offset=shift;
 	my $existing=shift;
@@ -330,6 +343,23 @@
 	}
 	
 }
+sub set_alias_command {
+	my $alias=shift;
+	my $real_command=shift;
+	my @args=@_;
+
+	if ($real_command) {
+		my @cmd;
+		push @cmd, $real_command;
+		push @cmd, @args if (@args);
+		$command_aliases{$alias} = \@cmd;
+    } else {
+		# Remove the alias from the alias list which effectively makes
+		# the alias a normal command again
+		delete $command_aliases{$alias} if exists $command_aliases{$alias};
+    }
+}
+
 foreach my $addon (@{$dh{WITH}}) {
 	my $mod="Debian::Debhelper::Sequence::$addon";
 	$mod=~s/-/_/g;
@@ -456,11 +486,24 @@
 
 sub run {
 	my $command=shift;
-	my @options=@_;
+	my $alias;
+	my @options;
 	
+	# Check if alias has been defined and if so, use it
+	if (exists $command_aliases{$command}) {
+		$alias=$command;
+		my $realcmd=$command_aliases{$command};
+		$command=shift @$realcmd;
+		push @options, @$realcmd if (@$realcmd);
+		push @options, @_;
+	} else {
+		@options=@_;
+	}
 	# 3 space indent lines the command being run up under the 
 	# sequence name after "dh ".
-	print "   ".escape_shell($command, @options)."\n";
+	print "   ".escape_shell($command, @options);
+	print " (via \`$alias\' alias)" if (defined($alias) && $alias ne $command);
+	print "\n";
 
 	if (! $dh{NO_ACT}) {
 		my $ret=system($command, @options);
