diff --git a/policy.sgml b/policy.sgml
index 4d3602b..2173deb 100644
--- a/policy.sgml
+++ b/policy.sgml
@@ -6212,14 +6212,15 @@ install -m644 debian/shlibs.<var>package</var> debian/<var>package</var>/DEBIAN/
                   subdirectory <file>/run/lock</file> is a replacement for
                   <file>/var/lock</file>.  These changes have been
                   adopted by most distributions and have been proposed
-                  for inclusion in a future revision of the FHS.  Both
-                  are expected to be temporary filesystems, whose
-                  purpose is storage of ephemeral system state which
-                  should not be preserved across reboot.
-                  The <file>/sys</file> and <file>/selinux</file>
-                  directories are used as mount points to mount
-                  virtual filesystems to get access to kernel
-                  information.</footnote>
+                  for inclusion in a future revision of the FHS.
+                  Files and directories residing in <file>/run</file>
+                  should be stored on a temporary filesystem, the
+                  purpose of which is storage of ephemeral system
+                  state which should not be persistent across a
+                  reboot.  The <file>/sys</file>
+                  and <file>/selinux</file> directories are used as
+                  mount points to mount virtual filesystems to get
+                  access to kernel information.</footnote>
                 </p>
               </item>
 	      <item>
@@ -6732,15 +6733,16 @@ test -f <var>program-executed-later-in-script</var> || exit 0
 	  <p>
 	    <file>/var/run</file> and <file>/var/lock</file> should be
 	    symlinks to <file>/run</file> and <file>/run/lock</file>,
-	    respectively, which are temporary filesystems whose
-	    contents are not preserved across reboot.  This
-	    arrangement may also be satisfied through equivalent
-	    means, for example bind or nullfs mounts.  Because the
-	    presence of files or directories in any of these
-	    directories is not guaranteed, <file>init.d</file> scripts
-	    must handle this correctly. This will typically amount to
-	    creating any required subdirectories dynamically when
-	    the <file>init.d</file> script is run, rather than
+	    respectively.  This arrangement may also be satisfied
+	    through equivalent means, for example bind or nullfs
+	    mounts.  Files and directories residing
+	    in <file>/run</file> should be stored on a temporary
+	    filesystem and not be persistent across a reboot, and
+	    hence the presence of files or directories in any of these
+	    directories is not guaranteed and <file>init.d</file>
+	    scripts must handle this correctly. This will typically
+	    amount to creating any required subdirectories dynamically
+	    when the <file>init.d</file> script is run, rather than
 	    including them in the package and relying on
 	    <prgn>dpkg</prgn> to create them.
 	  </p>
