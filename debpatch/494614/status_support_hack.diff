Index: debian/changelog
===================================================================
--- debian/changelog	(revision 1586)
+++ debian/changelog	(working copy)
@@ -1,3 +1,9 @@
+devscripts (2.10.35.1) unstable; urgency=low
+
+  * Hack for bts status command
+
+ -- Don Armstrong <don@debian.org>  Sun, 10 Aug 2008 14:25:11 -0700
+
 devscripts (2.10.36) UNRELEASED; urgency=low
 
   [ Adam D. Barratt ]
Index: Devscripts/Debbugs.pm
===================================================================
--- Devscripts/Debbugs.pm	(revision 1586)
+++ Devscripts/Debbugs.pm	(working copy)
@@ -153,6 +153,8 @@
                        bugs       => 'bugs',
                        archive    => 'archive',
                        severity   => 'severity',
+		       correspondent => 'correspondent',
+		       affects       => 'affects',
                       );
      my %users;
      my %search_parameters;
Index: scripts/bts.pl
===================================================================
--- scripts/bts.pl	(revision 1586)
+++ scripts/bts.pl	(working copy)
@@ -47,6 +47,8 @@
 use Getopt::Long;
 use Encode;
 
+use Scalar::Util qw(looks_like_number);
+
 # Funny UTF-8 warning messages from HTML::Parse should be ignorable (#292671)
 $SIG{'__WARN__'} = sub { warn $_[0] unless $_[0] =~ /^Parsing of undecoded UTF-8 will give garbage when decoding entities/; };
 
@@ -949,6 +951,59 @@
     print map {qq($_\n)} @{$bugs};
 }
 
+sub bts_status {
+     my @args = @_;
+
+     my @bugs;
+     for my $bug (@args) {
+	  if (looks_like_number($bug)) {
+	       push @bugs,$bug;
+	  }
+	  elsif (m{^file:(.+)}) {
+	       my $file = $1;
+	       my $fh;
+	       if ($file eq '-') {
+		    $fh = \*STDIN;
+	       }
+	       else {
+		    $fh = IO::File->new($file,'r') or
+			 die "Unable to open $file for reading: $!";
+	       }
+	       while (<$fh>) {
+		    chomp;
+		    next if /^\s*\#/;
+		    s/\s//g;
+		    next unless looks_like_number($_);
+		    push @bugs,$_;
+	       }
+	  }
+     }
+     my $bugs = Devscripts::Debbugs::status(@bugs);
+     my $first = 1;
+     for my $bug (keys %{$bugs}) {
+	  print "\n" if not $first;
+	  $first = 0;
+	  my @keys = grep {$_ ne 'bug_num'}
+	       keys %{$bugs->{$bug}};
+	  for my $key ('bug_num',@keys) {
+	       print "$key: ";
+	       if (ref($bugs->{$bug}{$key}) eq 'ARRAY') {
+		    print join(',',@{$bugs->{$bug}{$key}});
+	       }
+	       elsif (ref($bugs->{$bug}{$key}) eq 'HASH') {
+		    print join(',',
+			       map { $_ .' => '. ($bugs->{$bug}{$key}{$_}||'') }
+			       keys %{$bugs->{$bug}{$key}}
+			      );
+	       }
+	       else {
+		    print $bugs->{$bug}{$key}||'';
+	       }
+	       print "\n";
+	  }
+     }
+}
+
 =item clone <bug> [new IDs]
 
 The clone control command allows you to duplicate a bug report. It is useful
