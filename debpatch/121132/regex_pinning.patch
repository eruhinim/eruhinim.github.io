diff -rub apt-0.7.20.2/apt-pkg/policy.cc apt-0.7.20.2/apt-pkg/policy.cc
--- apt-0.7.20.2/apt-pkg/policy.cc	2009-02-07 15:09:35.000000000 +0000
+++ apt-0.7.20.2/apt-pkg/policy.cc	2009-03-28 17:08:34.000000000 +0000
@@ -34,6 +34,7 @@
 
 #include <iostream>
 #include <sstream>
+#include <regex.h>
 									/*}}}*/
 
 using namespace std;
@@ -181,8 +182,14 @@
    Pin *P = 0;
    
    if (Name.empty() == true)
+   {
       P = &*Defaults.insert(Defaults.end(),PkgPin());
-   else
+      // Set..
+      P->Type = Type;
+      P->Priority = Priority;
+      P->Data = Data;
+   }
+   else if (Name[0] != '/')
    {
       // Get a spot to put the pin
       pkgCache::PkgIterator Pkg = Cache->FindPkg(Name);
@@ -201,12 +208,34 @@
       {
 	 P = Pins + Pkg->ID;
       }      
+      // Set..
+      P->Type = Type;
+      P->Priority = Priority;
+      P->Data = Data;
    }
+   else // Do a regex pin
+   {
+      if (Name[(Name.length()-1)] != '/')
+         return; // Regex pins must begin and end with '/'.
    
-   // Set..
+      regex_t Pattern;
+      string mypat = "^" + Name.substr(1,(Name.length()-2)) + "$";
+      if (regcomp(&Pattern, mypat.c_str(), REG_EXTENDED | REG_ICASE | REG_NOSUB) != 0)
+         return; // Regex does not compile.
+
+      for (pkgCache::PkgIterator Pkg = Cache->PkgBegin(); !Pkg.end(); ++Pkg)
+      {
+         if (regexec(&Pattern,Pkg.Name(),0,0,0) == 0)
+         {
+             P = Pins + Pkg->ID;
    P->Type = Type;
    P->Priority = Priority;
    P->Data = Data;
+         }
+      } // end package iteration loop
+
+      regfree(&Pattern);
+   }
 }
 									/*}}}*/
 // Policy::GetMatch - Get the matching version for a package pin	/*{{{*/
