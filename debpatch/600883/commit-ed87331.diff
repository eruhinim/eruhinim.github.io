commit ed87331a52e8b2b7bfef18e193bdd05a22f6764d
Author: David PrÃ©vot <david@tilapin.org>
Date:   Tue Oct 19 18:54:32 2010 -0400

    Apply manual pages conventions
    
    As advised in man(1), always use:
    	B<bold text>	type exactly as shown.
    	I<italic text>	replace with appropriate argument.
    s/debian/Debian/ if needed.

diff --git a/debhelper.pod b/debhelper.pod
index b2f130b..0ebe1c8 100644
--- a/debhelper.pod
+++ b/debhelper.pod
@@ -4,26 +4,26 @@ debhelper - the debhelper tool suite
 
 =head1 SYNOPSIS
 
-B<dh_>I<*> [B<-v>] [B<-a>] [B<-i>] [B<-s>] [B<--no-act>] [B<-ppackage>] [B<-Npackage] [-Ptmpdir>]
+B<dh_>I<*> [B<-v>] [B<-a>] [B<-i>] [B<-s>] [B<--no-act>] [B<-p>I<package>] [B<-N>I<package>] [B<-P>I<tmpdir>]
 
 =head1 DESCRIPTION
 
-Debhelper is used to help you build a debian package. The philosophy behind
+Debhelper is used to help you build a Debian package. The philosophy behind
 debhelper is to provide a collection of small, simple, and easily
-understood tools that are used in debian/rules to automate various common
+understood tools that are used in F<debian/rules> to automate various common
 aspects of building a package. This means less work for you, the packager.
-It also, to some degree means that these tools can be changed if debian
+It also, to some degree means that these tools can be changed if Debian
 policy changes, and packages that use them will require only a rebuild to
 comply with the new policy.
 
-A typical debian/rules file that uses debhelper will call several debhelper
+A typical F<debian/rules> file that uses debhelper will call several debhelper
 commands in sequence, or use L<dh(1)> to automate this process. Examples of
 rules files that use debhelper are in F</usr/share/doc/debhelper/examples/>
 
-To create a new debian package using debhelper, you can just copy one of
-the sample rules files and edit it by hand. Or you can try the dh-make
+To create a new Debian package using debhelper, you can just copy one of
+the sample rules files and edit it by hand. Or you can try the B<dh-make>
 package, which contains a L<dh_make|dh_make(1)> command that partially
-automates the process. For a more gentle introduction, the maint-guide debian
+automates the process. For a more gentle introduction, the B<maint-guide> Debian 
 package contains a tutorial about making your first package using debhelper.
 
 =head1 DEBHELPER COMMANDS
@@ -49,7 +49,7 @@ A few debhelper commands are deprecated and should not be used.
 
 =head2 Other Commands
 
-If a program's name starts with "dh_", and the program is not on the above
+If a program's name starts with B<dh_>, and the program is not on the above
 lists, then it is not part of the debhelper package, but it should still
 work like the other programs described on this page.
 
@@ -59,10 +59,10 @@ Many debhelper commands make use of files in F<debian/> to control what they
 do. Besides the common F<debian/changelog> and F<debian/control>, which are
 in all packages, not just those using debhelper, some additional files can
 be used to configure the behavior of specific debhelper commands. These
-files are typically named debian/package.foo (where "package" of course,
+files are typically named debian/I<package>.foo (where I<package> of course,
 is replaced with the package that is being acted on).
 
-For example, dh_installdocs uses files named debian/package.docs to list
+For example, B<dh_installdocs> uses files named F<debian/package.docs> to list
 the documentation files it will install. See the man pages of individual
 commands for details about the names and formats of the files they use.
 Generally, these files will list files to act on, one file per line. Some
@@ -70,22 +70,22 @@ programs in debhelper use pairs of files and destinations or slightly more
 complicated formats.
 
 Note that if a package is the first (or only) binary package listed in
-debian/control, debhelper will use debian/foo if no debian/package.foo
+F<debian/control>, debhelper will use F<debian/foo> if no F<debian/package.foo>
 file can be found.
 
 In some rare cases, you may want to have different versions of these files
-for different architectures or OSes. If files named debian/package.foo.ARCH
-or debian/package.foo.OS exist, where "ARCH" and "OS" are the same as the
-output of  "dpkg-architecture -qDEB_HOST_ARCH" /
-"dpkg-architecture -qDEB_HOST_ARCH_OS",
+for different architectures or OSes. If files named debian/I<package>.foo.I<ARCH>
+or debian/I<package>.foo.I<OS> exist, where I<ARCH> and I<OS> are the same as the
+output of "B<dpkg-architecture -qDEB_HOST_ARCH>" /
+"B<dpkg-architecture -qDEB_HOST_ARCH_OS>",
 then they will be used in preference to other, more general files.
 
 In many cases, these config files are used to specify various types of
 files. Documentation or example files to install, files to move, and so on.
 When appropriate, in cases like these, you can use standard shell wildcard
-characters ('?' and '*' and '[..]' character classes) in the files.
+characters (B<?> and B<*> and B<[>I<..>B<]> character classes) in the files.
 
-You can also put comments in these files; lines beginning with "#" are
+You can also put comments in these files; lines beginning with B<#> are
 ignored.
 
 =head1 SHARED DEBHELPER OPTIONS
@@ -112,19 +112,19 @@ build architecture.
 
 Act on all architecture independent packages.
 
-=item B<->I<ppackage>, B<--package=>I<package>
+=item B<-p>I<package>, B<--package=>I<package>
 
-Act on the package named "package". This option may be specified multiple
+Act on the package named I<package>. This option may be specified multiple
 times to make debhelper operate on a given set of packages.
 
 =item B<-s>, B<--same-arch>
 
-This used to be a smarter version of the -a flag, but the -a flag is now
+This used to be a smarter version of the B<-a> flag, but the B<-a> flag is now
 equally smart.
 
 =item B<-N>I<package>, B<--no-package=>I<package>
 
-Do not act on the specified package even if an -a, -i, or -p option lists
+Do not act on the specified package even if an B<-a>, B<-i>, or B<-p> option lists
 the package as one that should be acted on.
 
 =item B<--remaining-packages>
@@ -137,26 +137,26 @@ process the rest of packages with default settings.
 
 =item B<--ignore=>I<file>
 
-Ignore the specified file. This can be used if debian/ contains a debhelper
+Ignore the specified file. This can be used if F<debian/> contains a debhelper
 config file that a debhelper command should not act on. Note that
-debian/compat, debian/control, and debian/changelog can't be ignored, but
+F<debian/compat>, F<debian/control>, and F<debian/changelog> can't be ignored, but
 then, there should never be a reason to ignore those files.
 
-For example, if upstream ships a debian/init that you don't want
-dh_installinit to install, use --ignore=debian/init
+For example, if upstream ships a F<debian/init> that you don't want
+B<dh_installinit> to install, use B<--ignore=debian/init>
 
 =item B<-P>I<tmpdir>, B<--tmpdir=>I<tmpdir>
 
-Use "tmpdir" for package build directory. The default is debian/<package>
+Use I<tmpdir> for package build directory. The default is debian/I<package>
 
 =item B<--mainpackage=>I<package>
 
 This little-used option changes the package which debhelper considers the
-"main package", that is, the first one listed in debian/control, and the
-one for which debian/foo files can be used instead of the usual
-debian/package.foo files.
+"main package", that is, the first one listed in F<debian/control>, and the
+one for which F<debian/foo> files can be used instead of the usual
+F<debian/package.foo> files.
 
-=item B<-O=>I<option|bundle>
+=item B<-O=>I<option>|I<bundle>
 
 This is used by L<dh(1)> when passing user-specified options to all the
 commands it runs. If the command supports the specified option or option
@@ -175,7 +175,7 @@ option does.
 
 =item B<-n>
 
-Do not modify postinst/postrm/etc scripts.
+Do not modify F<postinst>, F<postrm>, etc. scripts.
 
 =item B<-X>I<item>, B<--exclude=>I<item>
 
@@ -191,7 +191,7 @@ in ALL packages acted on, not just the first.
 
 =head1 BUILD SYSTEM OPTIONS
 
-The following command line options are supported by all of the dh_auto_*
+The following command line options are supported by all of the B<dh_auto_>I<*>
 debhelper programs. These programs support a variety of build systems,
 and normally heuristically determine which to use, and how to use them.
 You can use these command line options to override the default behavior.
@@ -209,7 +209,7 @@ Assume that the original package source tree is at the specified
 I<directory> rather than the top level directory of the Debian
 source package tree.
 
-=item B<-B>[I<directory>], B<--builddirectory>=[I<directory>]
+=item B<-B>[I<directory>], B<--builddirectory=>[I<directory>]
 
 Enable out of source building and use the specified I<directory> as the build
 directory. If I<directory> parameter is omitted, a default build directory
@@ -218,7 +218,7 @@ will chosen.
 If this option is not specified, building will be done in source by default
 unless the build system requires or prefers out of source tree building.
 In such a case, the default build directory will be used even if
-L<--builddirectory> is not specified.
+B<--builddirectory> is not specified.
 
 If the build system prefers out of source tree building but still
 allows in source building, the latter can be re-enabled by passing a build
@@ -228,15 +228,15 @@ directory path that is the same as the source directory path.
 
 Enable parallel builds if underlying build system supports them.
 The number of parallel jobs is controlled by the
-DEB_BUILD_OPTIONS environment variable (L<Debian Policy, section 4.9.1>) at
+B<DEB_BUILD_OPTIONS> environment variable (L<Debian Policy, section 4.9.1>) at
 build time. It might also be subject to a build system specific limit.
 
 If this option is not specified, debhelper currently defaults to not
 allowing parallel package builds.
 
-=item B<--max-parallel>I<=maximum>
+=item B<--max-parallel=>I<maximum>
 
-This option implies L<--parallel> and allows further limiting the number of
+This option implies B<--parallel> and allows further limiting the number of
 jobs that can be used in a parallel build. If the package build is known to
 only work with certain levels of concurrency, you can set this to the maximum
 level that is known to work, or that you wish to support.
@@ -246,7 +246,7 @@ level that is known to work, or that you wish to support.
 List all build systems supported by debhelper on this system. The list
 includes both default and third party build systems (marked as such). Also
 shows which build system would be automatically selected, or which one
-is manually specified with the I<--buildsystem> option.
+is manually specified with the B<--buildsystem> option.
 
 =back
 
@@ -259,8 +259,8 @@ programs will default to acting on all binary packages when run. If your
 source package happens to generate one architecture dependent package, and
 another architecture independent package, this is not the correct behavior,
 because you need to generate the architecture dependent packages in the
-binary-arch debian/rules target, and the architecture independent packages
-in the binary-indep debian/rules target.
+binary-arch F<debian/rules> target, and the architecture independent packages
+in the binary-indep F<debian/rules> target.
 
 To facilitate this, as well as give you more control over which packages
 are acted on by debhelper programs, all debhelper programs accept the
@@ -268,14 +268,14 @@ B<-a>, B<-i>, B<-p>, and B<-s> parameters. These parameters are cumulative.
 If none are given, debhelper programs default to acting on all packages listed
 in the control file.
 
-=head2 Automatic generation of debian install scripts
+=head2 Automatic generation of Debian install scripts
 
-Some debhelper commands will automatically generate parts of debian
+Some debhelper commands will automatically generate parts of Debian
 maintainer scripts. If you want these automatically generated things
-included in your existing debian maintainer scripts, then you need to add
-"#DEBHELPER#" to your scripts, in the place the code should be added.
-"#DEBHELPER#" will be replaced by any auto-generated code when you run
-dh_installdeb. 
+included in your existing Debian maintainer scripts, then you need to add
+B<#DEBHELPER#> to your scripts, in the place the code should be added.
+B<#DEBHELPER#> will be replaced by any auto-generated code when you run
+B<dh_installdeb>.
 
 If a script does not exist at all and debhelper needs to add something to
 it, then debhelper will create the complete script.
@@ -306,25 +306,25 @@ things, so debhelper offers a way to automate it.
 
 All commands of this type, besides documenting what dependencies may be
 needed on their man pages, will automatically generate a substvar called
-${misc:Depends}. If you put that token into your debian/control file, it
+B<${misc:Depends}>. If you put that token into your F<debian/control> file, it
 will be expanded to the dependencies debhelper figures you need. 
 
-This is entirely independent of the standard ${shlibs:Depends} generated by
-L<dh_makeshlibs(1)>, and the ${perl:Depends} generated by L<dh_perl(1)>.
+This is entirely independent of the standard B<${shlibs:Depends}> generated by
+L<dh_makeshlibs(1)>, and the B<${perl:Depends}> generated by L<dh_perl(1)>.
 You can choose not to use any of these, if debhelper's guesses don't match
 reality.
 
 =head2 Package build directories
 
 By default, all debhelper programs assume that the temporary directory used
-for assembling the tree of files in a package is debian/<package>.
+for assembling the tree of files in a package is debian/I<package>.
 
 Sometimes, you might want to use some other temporary directory. This is
-supported by the -P flag. For example, "dh_installdocs -Pdebian/tmp", will
-use debian/tmp as the temporary directory. Note that if you use -P, the 
+supported by the B<-P> flag. For example, "B<dh_installdocs -Pdebian/tmp>", will
+use B<debian/tmp> as the temporary directory. Note that if you use B<-P>, the 
 debhelper programs can only be acting on a single package at a time. So if 
 you have a package that builds many binary packages, you will need to also 
-use the -p flag to specify which binary package the debhelper program will
+use the B<-p> flag to specify which binary package the debhelper program will
 act on.
 
 =head2 Debhelper compatibility levels
@@ -337,7 +337,7 @@ introduced. You tell debhelper which compatibility level it should use, and
 it modifies its behavior in various ways.
 
 Tell debhelper what compatibility level to use by writing a number to
-debian/compat. For example, to turn on v8 mode:
+F<debian/compat>. For example, to turn on v8 mode:
 
   % echo 8 > debian/compat
 
@@ -355,15 +355,15 @@ These are the available compatibility levels:
 =item v1
 
 This is the original debhelper compatibility level, and so it is the default
-one. In this mode, debhelper will use debian/tmp as the package tree
+one. In this mode, debhelper will use F<debian/tmp> as the package tree
 directory for the first binary package listed in the control file, while using
-debian/<package> for all other packages listed in the control file.
+debian/I<package> for all other packages listed in the F<control> file.
 
 This mode is deprecated.
 
 =item v2
 
-In this mode, debhelper will consistently use debian/<package>
+In this mode, debhelper will consistently use debian/I<package>
 as the package tree directory for every package that is built.
 
 This mode is deprecated.
@@ -376,16 +376,16 @@ This mode works like v2, with the following additions:
 
 =item -
 
-Debhelper config files support globbing via * and ?, when appropriate. To
+Debhelper config files support globbing via B<*> and B<?>, when appropriate. To
 turn this off and use those characters raw, just prefix with a backslash.
 
 =item -
 
-dh_makeshlibs makes the postinst and postrm scripts call ldconfig.
+B<dh_makeshlibs> makes the postinst and postrm scripts call ldconfig.
 
 =item -
 
-Every file in etc/ is automatically flagged as a conffile by dh_installdeb.
+Every file in F<etc/> is automatically flagged as a conffile by B<dh_installdeb>.
 
 =back
 
@@ -399,22 +399,22 @@ Changes from v3 are:
 
 =item -
 
-dh_makeshlibs -V will not include the debian part of the version number in
+B<dh_makeshlibs -V> will not include the Debian part of the version number in
 the generated dependency line in the shlibs file.
 
 =item -
 
-You are encouraged to put the new ${misc:Depends} into debian/control to
-supplement the ${shlibs:Depends} field.
+You are encouraged to put the new B<${misc:Depends}> into F<debian/control> to
+supplement the B<${shlibs:Depends}> field.
 
 =item -
 
-dh_fixperms will make all files in bin/ directories and in etc/init.d 
+B<dh_fixperms> will make all files in F<bin/> directories and in F<etc/init.d>
 executable.
 
 =item -
 
-dh_link will correct existing links to conform with policy.
+B<dh_link> will correct existing links to conform with policy.
 
 =back
 
@@ -432,16 +432,16 @@ Comments are ignored in debhelper config files.
 
 =item -
 
-dh_strip --dbg-package now specifies the name of a package to put debugging
+B<dh_strip --dbg-package> now specifies the name of a package to put debugging
 symbols in, not the packages to take the symbols from.
 
 =item -
 
-dh_installdocs skips installing empty files.
+B<dh_installdocs> skips installing empty files.
 
 =item -
 
-dh_install errors out if wildcards expand to nothing.
+B<dh_install> errors out if wildcards expand to nothing.
 
 =back
 
@@ -458,19 +458,19 @@ fragments in reverse order for the prerm and postrm scripts.
 
 =item -
 
-dh_installwm will install a slave manpage link for x-window-manager.1.gz,
-if it sees the man page in usr/share/man/man1 in the package build
+B<dh_installwm> will install a slave manpage link for F<x-window-manager.1.gz>,
+if it sees the man page in F<usr/share/man/man1> in the package build
 directory.
 
 =item -
 
-dh_builddeb did not previously delete everything matching
-DH_ALWAYS_EXCLUDE, if it was set to a list of things to exclude, such as
-"CVS:.svn:.git". Now it does.
+B<dh_builddeb> did not previously delete everything matching
+B<DH_ALWAYS_EXCLUDE>, if it was set to a list of things to exclude, such as
+B<CVS:.svn:.git>. Now it does.
 
 =item -
 
-dh_installman allows overwriting existing man pages in the package build
+B<dh_installman> allows overwriting existing man pages in the package build
 directory. In previous compatibility levels it silently refuses to do this.
 
 =back
@@ -483,22 +483,22 @@ Changes from v6 are:
 
 =item -
 
-dh_install, will fall back to looking for files in debian/tmp if it doesn't
+B<dh_install>, will fall back to looking for files in F<debian/tmp> if it doesn't
 find them in the current directory (or wherever you tell it look using
---sourcedir). This allows dh_install to interoperate with dh_auto_install,
-which installs to debian/tmp, without needing any special parameters.
+B<--sourcedir>). This allows B<dh_install> to interoperate with B<dh_auto_install>,
+which installs to F<debian/tmp>, without needing any special parameters.
 
 =item -
 
-dh_clean will read debian/clean and delete files listed there.
+B<dh_clean> will read F<debian/clean> and delete files listed there.
 
 =item -
 
-dh_clean will delete toplevel *-stamp files.
+B<dh_clean> will delete toplevel F<*-stamp> files.
 
 =item -
 
-dh_installchangelogs will guess at what file is the upstream changelog if
+B<dh_installchangelogs> will guess at what file is the upstream changelog if
 none is specified.
 
 =back
@@ -517,20 +517,20 @@ Commands will fail rather than warning when they are passed unknown options.
 
 =item -
 
-dh_makeshlibs will run dpkg-gensymbols on all shared libraries that it
-generates shlibs files for. So -X can be used to exclude libraries.
-Also, libraries in unusual locations that dpkg-gensymbols would not
+B<dh_makeshlibs> will run B<dpkg-gensymbols> on all shared libraries that it
+generates shlibs files for. So B<-X> can be used to exclude libraries.
+Also, libraries in unusual locations that B<dpkg-gensymbols> would not
 have processed before will be passed to it, a behavior change that 
 can cause some packages to fail to build.
 
 =item -
 
-dh requires the sequence to run be specified as the first parameter, and
-any switches come after it. Ie, use "dh $@ --foo", not "dh --foo $@"
+B<dh> requires the sequence to run be specified as the first parameter, and
+any switches come after it. Ie, use "B<dh $@ --foo>", not "B<dh --foo $@>".
 
 =item
 
-dh_auto_* prefer to use perl's Module::Build in preference to Makefile.PL.
+B<dh_auto_>I<*> prefer to use perl's B<Module::Build> in preference to F<Makefile.PL>.
 
 =back
 
@@ -539,22 +539,22 @@ dh_auto_* prefer to use perl's Module::Build in preference to Makefile.PL.
 =head2 udebs
 
 Debhelper includes support for udebs. To create a udeb with debhelper,
-add "Package-Type: udeb" to the package's stanza in debian/control, and
+add "B<Package-Type: udeb>" to the package's stanza in F<debian/control>, and
 build-depend on debhelper (>= 4.2). Debhelper will try to create udebs that
 comply with debian-installer policy, by making the generated package files
-end in ".udeb", not installing any documentation into a udeb, skipping over
-preinst, postrm, prerm, and config scripts, etc.
+end in F<.udeb>, not installing any documentation into a udeb, skipping over
+F<preinst>, F<postrm>, F<prerm>, and F<config> scripts, etc.
 
 =head2 Other notes
 
 In general, if any debhelper program needs a directory to exist under
-debian/, it will create it. I haven't bothered to document this in all the
-man pages, but for example, dh_installdeb knows to make debian/<package>/DEBIAN/
-before trying to put files there, dh_installmenu knows you need a
-debian/<package>/usr/share/menu/ before installing the menu files, etc.
+B<debian/>, it will create it. I haven't bothered to document this in all the
+man pages, but for example, B<dh_installdeb> knows to make debian/I<package>/DEBIAN/
+before trying to put files there, B<dh_installmenu> knows you need a
+debian/I<package>/usr/share/menu/ before installing the menu files, etc.
 
 Once your package uses debhelper to build, be sure to add
-debhelper to your Build-Depends line in debian/control. You should
+debhelper to your Build-Depends line in F<debian/control>. You should
 build-depend on a version of debhelper equal to (or greater than) the
 debhelper compatibility level your package uses. So if your package used
 compatibility level 7:
@@ -565,46 +565,46 @@ compatibility level 7:
 
 =over 4
 
-=item DH_VERBOSE
+=item B<DH_VERBOSE>
 
-Set to 1 to enable verbose mode. Debhelper will output every command it runs
+Set to B<1> to enable verbose mode. Debhelper will output every command it runs
 that modifies files on the build system.
 
-=item DH_COMPAT
+=item B<DH_COMPAT>
 
 Temporarily specifies what compatibility level debhelper should run at,
-overriding any value in debian/compat.
+overriding any value in F<debian/compat>.
 
-=item DH_NO_ACT
+=item B<DH_NO_ACT>
 
-Set to 1 to enable no-act mode.
+Set to B<1> to enable no-act mode.
 
-=item DH_OPTIONS
+=item B<DH_OPTIONS>
 
 Anything in this variable will be prepended to the command line arguments
 of all debhelper commands. Command-specific options will be ignored by 
 commands that do not support them. 
 
-This is useful in some situations, for example, if you need to pass -p to
-all debhelper commands that will be run. One good way to set DH_OPTIONS is
-by using "Target-specific Variable Values" in your debian/rules file. See
+This is useful in some situations, for example, if you need to pass B<-p> to
+all debhelper commands that will be run. One good way to set B<DH_OPTIONS> is
+by using "Target-specific Variable Values" in your F<debian/rules> file. See
 the make documentation for details on doing this.
 
-=item DH_ALWAYS_EXCLUDE
+=item B<DH_ALWAYS_EXCLUDE>
 
-If set, this adds the value the variable is set to to the -X options of all
-commands that support the -X option. Moreover, dh_builddeb will rm -rf
+If set, this adds the value the variable is set to to the B<-X> options of all
+commands that support the B<-X> option. Moreover, B<dh_builddeb> will B<rm -rf>
 anything that matches the value in your package build tree.
 
 This can be useful if you are doing a build from a CVS source tree, in
-which case setting DH_ALWAYS_EXCLUDE=CVS will prevent any CVS directories
+which case setting B<DH_ALWAYS_EXCLUDE=CVS> will prevent any CVS directories
 from sneaking into the package you build. Or, if a package has a source
 tarball that (unwisely) includes CVS directories, you might want to export
-DH_ALWAYS_EXCLUDE=CVS in debian/rules, to make it take effect wherever
+B<DH_ALWAYS_EXCLUDE=CVS> in F<debian/rules>, to make it take effect wherever
 your package is built.
 
 Multiple things to exclude can be separated with colons, as in
-DH_ALWAYS_EXCLUDE=CVS:.svn
+B<DH_ALWAYS_EXCLUDE=CVS:.svn>
 
 =back
 
@@ -614,7 +614,7 @@ DH_ALWAYS_EXCLUDE=CVS:.svn
 
 =item F</usr/share/doc/debhelper/examples/>
 
-A set of example debian/rules files that use debhelper.
+A set of example F<debian/rules> files that use debhelper.
 
 =item L<http://kitenet.net/~joey/code/debhelper/>
 
