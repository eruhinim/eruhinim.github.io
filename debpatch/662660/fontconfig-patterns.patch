Description: Do not even attempt to directly load font files from $datadir/fonts/ anymore.
 Query fontconfig instead to return a valid font based on the *fontconfig patterns* in pdf.utf-8.*.
Author: Fabian Greffrath <fabian+debian@greffrath.com>

--- cups-filters-1.0.4.orig/filter/texttopdf.c
+++ cups-filters-1.0.4/filter/texttopdf.c
@@ -43,29 +43,19 @@
 int     UTF8 = 1;               /* Use UTF-8 encoding? */
 #endif /* CUPS_1_4 */
 
-EMB_PARAMS *font_load(const char *datadir,const char *font);
+EMB_PARAMS *font_load(const char *font);
 
-EMB_PARAMS *font_load(const char *datadir,const char *font)
+EMB_PARAMS *font_load(const char *font)
 {
-  char		filename[1024];	/* Glyph filenames */
-  snprintf(filename, sizeof(filename), "%s/fonts/%s", datadir, font);
-
-  OTF_FILE *otf=otf_load(filename);
-
-  if (!otf) {
+    OTF_FILE *otf;
 
     FcPattern *pattern;
     FcFontSet *candidates;
     FcChar8   *fontformat, *fontname = NULL;
     int i, index, spacing;
 
-    /* Remove extension from the passed file name
-       to turn it into a minimal "pattern" in the fontconfig sense */
-    if (strrchr(filename, '.'))
-       *strrchr(filename, '.') = '\0';
-
     FcInit ();
-    pattern = FcNameParse (filename);
+    pattern = FcNameParse (font);
     FcConfigSubstitute (0, pattern, FcMatchPattern);
     FcDefaultSubstitute (pattern);
 
@@ -88,7 +78,6 @@ EMB_PARAMS *font_load(const char *datadi
     FcFontSetDestroy (candidates);
 
     otf = otf_load(fontname);
-  }
 
   if (!otf) {
     // TODO: try /usr/share/fonts/*/*/%s.ttf
@@ -561,7 +550,7 @@ WriteProlog(const char *title,		/* I - T
               }
 
             if (k==num_fonts) {  // not found
-	      fonts[num_fonts] = Fonts[NumFonts][i] = font_load(datadir,valptr);
+	      fonts[num_fonts] = Fonts[NumFonts][i] = font_load(valptr);
               if (!fonts[num_fonts]) { // font missing/corrupt, replace by first
                 fprintf(stderr,"WARNING: Ignored bad font \"%s\"\n",valptr);
                 break;
@@ -745,7 +734,7 @@ WriteProlog(const char *title,		/* I - T
               }
 
             if (k==num_fonts) {  // not found
-	      fonts[num_fonts] = Fonts[NumFonts][i] = font_load(datadir,valptr);
+	      fonts[num_fonts] = Fonts[NumFonts][i] = font_load(valptr);
               if (!fonts[num_fonts]) { // font missing/corrupt, replace by first
                 fprintf(stderr,"WARNING: Ignored bad font \"%s\"\n",valptr);
                 break;
