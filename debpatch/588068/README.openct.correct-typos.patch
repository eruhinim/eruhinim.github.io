Index: README.openct
===================================================================
--- README.openct	(revision 792)
+++ README.openct	(working copy)
@@ -18,7 +18,7 @@
 smartcard devices by openct.
 
 First of all, you should plug in your crypto token into USB or whatever
-interface it uses and initalize the reader with the following command (as root):
+interface it uses and initialise the reader with the following command (as root):
 
 	# openct-control init
 
@@ -33,8 +33,8 @@
 If you do not see any reader listed, you have a problem and should read again
 about the supported hardware on <http://www.opensc-project.org/openct/> and make
 sure you have the required support (e.g. USB) compiled into your kernel needed
-to connect to your token. If you use a precompiled kernel from Debian,
-everything is already built kernelwise and you probably only need to load the
+to connect to your token. If you use a pre-compiled kernel from Debian,
+everything is already built kernel-wise and you probably only need to load the
 module.
 
 In case you want to erase your previously used smartcard, you can do that by
@@ -46,7 +46,7 @@
 
 	# pkcs15-init --create-pkcs15
 
-Caution: You are beeing asked about the 'Security Officer PIN' and the 'User
+Caution: You are being asked about the 'Security Officer PIN' and the 'User
 unblocking PIN'. Although both of these pins are optional and can be left empty,
 you should never do this: In case the personal user pin is typed wrong for a
 given number (mostly three times), the smartcard is locked and can only be
@@ -55,7 +55,7 @@
 only be unlocked with the security officer pin, which is the most superior pin
 in this hierarchy. With an unset (empty) security officer pin or user unblocking
 pin, depending on the smartcard, an attacker can have unlimited tries to crack
-your personal user pin, or, an attacker can simply make the smarcard unusable as
+your personal user pin, or, an attacker can simply make the smartcard unusable as
 it cannot be unlocked anymore at all.
 
 To create a new identity on the smartcard, do the following:
@@ -77,7 +77,7 @@
 	# pkcs15-init --store-data data.txt --auth-id 01
 
 As of the time of writing, openct version 0.6.12 is available and does not
-support labeling different data objects. Once this gets fixed in openct
+support labelling different data objects. Once this gets fixed in openct
 upstream, you can store multiple data objects to the smartcard (create them by
 appending '--label foo' to the above command and replace foo with the label you
 want to use).
@@ -99,12 +99,12 @@
 	sda5_crypt /dev/sda5 none luks,keyscript=/lib/cryptsetup/scripts/decrypt_openct
 
 At the moment all data objects have the same label 'pkcs15-init'. Once openct
-supports labeling data objects, you can pass the respective label to openct with
+supports labelling data objects, you can pass the respective label to openct with
 the key parameter in /etc/crypttab like this:
 
 	sda5_crypt /dev/sda5 none luks,keyscript=/lib/cryptsetup/scripts/decrypt_openct,key=foo
 
-For the time beeing, 'pkcs15-init' is passed to openct when no key is specified.
+For the time being, 'pkcs15-init' is passed to openct when no key is specified.
 
 Don't forget to backup key.txt to a save place and remove the temporary files
 afterwards:
@@ -112,10 +112,10 @@
 	# shred -uz key.txt data.txt
 
 Caution: cryptsetup as of version 1.0.5-1 does not support fallback to passphrase
-if smartcard authentification fails (bee it three times wrong pin or not
+if smartcard authentication fails (bee it three times wrong pin or not
 compatible/not detected smartcard reader). That means, that for testing
 purposes, it is recommended to keep an initrd image in /boot available which
-does *not* use openct or opensc for authentification, so that you can change
+does *not* use openct or opensc for authentication, so that you can change
 your bootloader configuration on the fly if something does not work out as
 expected. Therefore, copy your current initrd (the .bak backups from
 initramfs-tools can maybe get overwritten by update-initramfs during the setup
@@ -123,7 +123,7 @@
 
 	# cp /boot/initrd.img-`uname -r` /boot/initrd.img-`uname -r`.temp
 
-If you have completed all the steps upto now, you can update your initramfs
+If you have completed all the steps up to now, you can update your initramfs
 image with:
 
 	# update-initramfs -u -k `uname -r`
