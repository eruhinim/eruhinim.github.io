Description: Move file, directory, user, and group configuration to a
 separate file. Also warn about directives that have moved and set
 default cups-files.conf.

Author: Michael Sweet <msweet@apple.com>
Origin: http://svn.cups.org/public/cups/branches/branch-1.6@10710
Origin: http://svn.cups.org/public/cups/branches/branch-1.6@10713

Author: Marc Deslauriers <marc.deslauriers@canonical.com>
Origin: https://www.cups.org/strfiles/4223/small-fixes.patch

Bug-Upstream: https://www.cups.org/strfiles/4223/small-fixes.patch
Bug-Debian: http://bugs.debian.org/692791
Bug-CVE: http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-5519

--- a/conf/Makefile
+++ b/conf/Makefile
@@ -19,7 +19,7 @@
 # Config files...
 #
 
-KEEP	=	cupsd.conf snmp.conf
+KEEP	=	cups-files.conf cupsd.conf snmp.conf
 REPLACE	=	mime.convs mime.types
 
 
--- /dev/null
+++ b/conf/cups-files.conf.in
@@ -0,0 +1,98 @@
+#
+# "$Id$"
+#
+# Sample file/directory/user/group configuration file for the CUPS scheduler.
+# See "man cups-files.conf" for a complete description of this file.
+#
+
+# List of events that are considered fatal errors for the scheduler...
+#FatalErrors @CUPS_FATAL_ERRORS@
+
+# Default user and group for filters/backends/helper programs; this cannot be
+# any user or group that resolves to ID 0 for security reasons...
+#User @CUPS_USER@
+#Group @CUPS_GROUP@
+
+# Administrator user group, used to match @SYSTEM in cupsd.conf policy rules...
+SystemGroup @CUPS_SYSTEM_GROUPS@
+@CUPS_SYSTEM_AUTHKEY@
+
+# User that is substituted for unauthenticated (remote) root accesses...
+#RemoteRoot remroot
+
+# Do we allow file: device URIs other than to /dev/null?
+#FileDevice No
+
+# Permissions for configuration and log files...
+#ConfigFilePerm @CUPS_CONFIG_FILE_PERM@
+#LogFilePerm @CUPS_LOG_FILE_PERM@
+
+# Location of the file logging all access to the scheduler; may be the name
+# "syslog". If not an absolute path, the value of ServerRoot is used as the
+# root directory.  Also see the "AccessLogLevel" directive in cupsd.conf.
+AccessLog @CUPS_LOGDIR@/access_log
+
+# Location of cache files used by the scheduler...
+#CacheDir @CUPS_CACHEDIR@
+
+# Location of data files used by the scheduler...
+#DataDir @CUPS_DATADIR@
+
+# Location of the static web content served by the scheduler...
+#DocumentRoot @CUPS_DOCROOT@
+
+# Location of the file logging all messages produced by the scheduler and any
+# helper programs; may be the name "syslog". If not an absolute path, the value
+# of ServerRoot is used as the root directory.  Also see the "LogLevel"
+# directive in cupsd.conf.
+ErrorLog @CUPS_LOGDIR@/error_log
+
+# Location of fonts used by older print filters...
+#FontPath @CUPS_FONTPATH@
+
+# Location of LPD configuration
+#LPDConfigFile @CUPS_DEFAULT_LPD_CONFIG_FILE@
+
+# Location of the file logging all pages printed by the scheduler and any
+# helper programs; may be the name "syslog". If not an absolute path, the value
+# of ServerRoot is used as the root directory.  Also see the "PageLogFormat"
+# directive in cupsd.conf.
+PageLog @CUPS_LOGDIR@/page_log
+
+# Location of the file listing all of the local printers...
+#Printcap @CUPS_DEFAULT_PRINTCAP@
+
+# Format of the Printcap file...
+#PrintcapFormat bsd
+#PrintcapFormat plist
+#PrintcapFormat solaris
+
+# Location of all spool files...
+#RequestRoot @CUPS_REQUESTS@
+
+# Location of helper programs...
+#ServerBin @CUPS_SERVERBIN@
+
+# SSL/TLS certificate for the scheduler...
+#ServerCertificate @CUPS_SERVERCERT@
+
+# SSL/TLS private key for the scheduler...
+#ServerKey @CUPS_SERVERKEY@
+
+# Location of other configuration files...
+#ServerRoot @CUPS_SERVERROOT@
+
+# Location of Samba configuration file...
+#SMBConfigFile @CUPS_DEFAULT_SMB_CONFIG_FILE@
+
+# Location of scheduler state files...
+#StateDir @CUPS_STATEDIR@
+
+# Location of scheduler/helper temporary files. This directory is emptied on
+# scheduler startup and cannot be one of the standard (public) temporary
+# directory locations for security reasons...
+#TempDir @CUPS_REQUESTS@/tmp
+
+#
+# End of "$Id$".
+#
--- a/conf/cupsd.conf.in
+++ b/conf/cupsd.conf.in
@@ -9,10 +9,6 @@
 # for troubleshooting...
 LogLevel @CUPS_LOG_LEVEL@
 
-# Administrator user group...
-SystemGroup @CUPS_SYSTEM_GROUPS@
-@CUPS_SYSTEM_AUTHKEY@
-
 # Only listen for connections from the local machine.
 Listen localhost:@DEFAULT_IPP_PORT@
 @CUPS_LISTEN_DOMAINSOCKET@
--- a/config-scripts/cups-defaults.m4
+++ b/config-scripts/cups-defaults.m4
@@ -367,6 +367,7 @@
 fi
 
 AC_DEFINE_UNQUOTED(CUPS_DEFAULT_LPD_CONFIG_FILE, "$CUPS_DEFAULT_LPD_CONFIG_FILE")
+AC_SUBST(CUPS_DEFAULT_LPD_CONFIG_FILE)
 
 dnl Default SMB config file...
 AC_ARG_WITH(smbconfigfile, [  --with-smbconfigfile    set default SMBConfigFile URI],
@@ -388,6 +389,7 @@
 fi
 
 AC_DEFINE_UNQUOTED(CUPS_DEFAULT_SMB_CONFIG_FILE, "$CUPS_DEFAULT_SMB_CONFIG_FILE")
+AC_SUBST(CUPS_DEFAULT_SMB_CONFIG_FILE)
 
 dnl Default MaxCopies value...
 AC_ARG_WITH(max-copies, [  --with-max-copies       set default max copies value, default=9999 ],
--- a/config-scripts/cups-ssl.m4
+++ b/config-scripts/cups-ssl.m4
@@ -27,6 +27,8 @@
 SSLFLAGS=""
 SSLLIBS=""
 have_ssl=0
+CUPS_SERVERCERT=""
+CUPS_SERVERKEY=""
 
 if test x$enable_ssl != xno; then
     dnl Look for CDSA...
@@ -36,6 +38,7 @@
 	    	have_ssl=1
 		AC_DEFINE(HAVE_SSL)
 		AC_DEFINE(HAVE_CDSASSL)
+		CUPS_SERVERCERT="/Library/Keychains/System.keychain"
 
 		dnl Check for the various security headers...
 		AC_CHECK_HEADER(Security/SecureTransportPriv.h,
@@ -112,6 +115,9 @@
 	fi
 
 	if test $have_ssl = 1; then
+	    CUPS_SERVERCERT="ssl/server.crt"
+	    CUPS_SERVERKEY="ssl/server.key"
+
             if $PKGCONFIG --exists gcrypt; then
 	        SSLLIBS="$SSLLIBS `$PKGCONFIG --libs gcrypt`"
 	        SSLFLAGS="$SSLFLAGS `$PKGCONFIG --cflags gcrypt`"
@@ -149,6 +155,9 @@
 		    $libcrypto)
 
 		if test "x${SSLLIBS}" != "x"; then
+		    CUPS_SERVERCERT="ssl/server.crt"
+		    CUPS_SERVERKEY="ssl/server.key"
+
 		    LIBS="$SAVELIBS $SSLLIBS"
 		    AC_CHECK_FUNC(SSL_set_tlsext_host_name,
 			AC_DEFINE(HAVE_SSL_SET_TLSEXT_HOST_NAME))
@@ -169,6 +178,8 @@
     AC_MSG_ERROR([Unable to enable SSL support.])
 fi
 
+AC_SUBST(CUPS_SERVERCERT)
+AC_SUBST(CUPS_SERVERKEY)
 AC_SUBST(IPPALIASES)
 AC_SUBST(SSLFLAGS)
 AC_SUBST(SSLLIBS)
--- a/configure.in
+++ b/configure.in
@@ -65,6 +65,7 @@
 AC_SUBST(UNINSTALL_LANGUAGES)
 
 AC_OUTPUT(Makedefs
+	  conf/cups-files.conf
 	  conf/cupsd.conf
 	  conf/mime.convs
 	  conf/pam.std
@@ -78,6 +79,7 @@
 	  man/client.conf.man
 	  man/cups-deviced.man
 	  man/cups-driverd.man
+	  man/cups-files.conf.man
 	  man/cups-lpd.man
 	  man/cupsaddsmb.man
 	  man/cupsd.conf.man
--- a/doc/Makefile
+++ b/doc/Makefile
@@ -3,7 +3,7 @@
 #
 #   Documentation makefile for CUPS.
 #
-#   Copyright 2007-2011 by Apple Inc.
+#   Copyright 2007-2012 by Apple Inc.
 #   Copyright 1997-2007 by Easy Software Products.
 #
 #   These coded instructions, statements, and computer programs are the
--- /dev/null
+++ b/doc/help/ref-cups-files-conf.html.in
@@ -0,0 +1,531 @@
+<HTML>
+<!-- SECTION: References -->
+<HEAD>
+	<TITLE>cups-files.conf</TITLE>
+	<LINK REL="STYLESHEET" TYPE="text/css" HREF="../cups-printable.css">
+</HEAD>
+<BODY>
+
+<H1 CLASS="title">cups-files.conf</H1>
+
+<P>The <VAR>/etc/cups/cups-files.conf</VAR> file contains configuration <I>directives</I> that control the files, directories. users. and groups that are used by the CUPS scheduler, <CODE>cupsd(8)</CODE>. Each directive is listed on a line by itself followed by its value. Comments are introduced using the number sign ("#") character at the beginning of a line.</P>
+
+<H2 CLASS="title"><A NAME="AccessLog">AccessLog</A></H2>
+
+<H3>Examples</H3>
+
+<PRE CLASS="command">
+AccessLog /var/log/cups/access_log
+AccessLog /var/log/cups/access_log-%s
+AccessLog syslog
+</PRE>
+
+<H3>Description</H3>
+
+<P>The <CODE>AccessLog</CODE> directive sets the name of the
+access log file. If the filename is not absolute then it is
+assumed to be relative to the <A
+HREF="#ServerRoot"><CODE>ServerRoot</CODE></A> directory. The
+access log file is stored in "common log format" and can be used
+by any web access reporting tool to generate a report on CUPS
+server activity.</P>
+
+<P>The server name can be included in the filename by using
+<CODE>%s</CODE> in the name.</P>
+
+<P>The special name "syslog" can be used to send the access
+information to the system log instead of a plain file.</P>
+
+<P>The default access log file is
+<VAR>@CUPS_LOGDIR@/access_log</VAR>.</P>
+
+
+<H2 CLASS="title"><SPAN CLASS="info">CUPS 1.1.15</SPAN><A NAME="ConfigFilePerm">ConfigFilePerm</A></H2>
+
+<H3>Examples</H3>
+
+<PRE CLASS="command">
+ConfigFilePerm 0644
+ConfigFilePerm 0640
+</PRE>
+
+<H3>Description</H3>
+
+<P>The <CODE>ConfigFilePerm</CODE> directive specifies the permissions to use when the scheduler writes configuration and cache files, typically in response to IPP or HTTP requests. The default is @CUPS_CONFIG_FILE_PERM@.</P>
+
+<BLOCKQUOTE><B>Note:</B>
+
+<P>The permissions for the <VAR>printers.conf</VAR> file are always masked to only allow access from the scheduler user (typically root). This is done because printer device URIs sometimes contain sensitive authentication information that should not be generally known on the system. There is no way to disable this security feature.</P>
+
+</BLOCKQUOTE>
+
+
+<H2 CLASS="title"><A NAME="DataDir">DataDir</A></H2>
+
+<H3>Examples</H3>
+
+<PRE CLASS="command">
+DataDir /usr/share/cups
+</PRE>
+
+<H3>Description</H3>
+
+<P>The <CODE>DataDir</CODE> directive sets the directory to use
+for data files.</P>
+
+
+<H2 CLASS="title"><SPAN CLASS="info">CUPS 1.2/OS X 10.5</SPAN><A NAME="DefaultAuthType">DefaultAuthType</A></H2>
+
+<H3>Examples</H3>
+
+<PRE CLASS="command">
+DefaultAuthType Basic
+DefaultAuthType BasicDigest
+DefaultAuthType Digest
+DefaultAuthType Negotiate
+</PRE>
+
+<H3>Description</H3>
+
+<P>The <CODE>DefaultAuthType</CODE> directive specifies the type
+of authentication to use for IPP operations that require a
+username. The default is <CODE>Basic</CODE>.</P>
+
+
+<H2 CLASS="title"><A NAME="DocumentRoot">DocumentRoot</A></H2>
+
+<H3>Examples</H3>
+
+<PRE CLASS="command">
+DocumentRoot /usr/share/doc/cups
+DocumentRoot /foo/bar/doc/cups
+</PRE>
+
+<H3>Description</H3>
+
+<P>The <CODE>DocumentRoot</CODE> directive specifies the location
+of web content for the HTTP server in CUPS. If an absolute path
+is not specified then it is assumed to be relative to the <A
+HREF="#ServerRoot"><CODE>ServerRoot</CODE></A> directory. The
+default directory is <VAR>@CUPS_DOCROOT@</VAR>.</P>
+
+<P>Documents are first looked up in a sub-directory for the
+primary language requested by the client (e.g.
+<VAR>@CUPS_DOCROOT@/fr/...</VAR>) and then directly under
+the <CODE>DocumentRoot</CODE> directory (e.g.
+<VAR>@CUPS_DOCROOT@/...</VAR>), so it is possible to
+localize the web content by providing subdirectories for each
+language needed.</P>
+
+
+<H2 CLASS="title"><A NAME="ErrorLog">ErrorLog</A></H2>
+
+<H3>Examples</H3>
+
+<PRE CLASS="command">
+ErrorLog /var/log/cups/error_log
+ErrorLog /var/log/cups/error_log-%s
+ErrorLog syslog
+</PRE>
+
+<H3>Description</H3>
+
+<P>The <CODE>ErrorLog</CODE> directive sets the name of the error
+log file. If the filename is not absolute then it is assumed to
+be relative to the <A
+HREF="#ServerRoot"><CODE>ServerRoot</CODE></A> directory. The
+default error log file is <VAR>@CUPS_LOGDIR@/error_log</VAR>.</P>
+
+<P>The server name can be included in the filename by using
+<CODE>%s</CODE> in the name.</P>
+
+<P>The special name "syslog" can be used to send the error
+information to the system log instead of a plain file.</P>
+
+
+<H2 CLASS="title"><SPAN CLASS="info">CUPS 1.4/OS X 10.6</SPAN><A NAME="FatalErrors">FatalErrors</A></H2>
+
+<H3>Examples</H3>
+
+<PRE CLASS="command">
+FatalErrors none
+FatalErrors all
+FatalErrors browse
+FatalErrors config
+FatalErrors listen
+FatalErrors log
+FatalErrors permissions
+FatalErrors all -permissions
+FatalErrors config permissions log
+</PRE>
+
+<H3>Description</H3>
+
+<P>The <CODE>FatalErrors</CODE> directive determines whether certain kinds of
+errors are fatal. The following kinds of errors are currently recognized:</P>
+
+<UL>
+
+	<LI><CODE>none</CODE> - No errors are fatal</LI>
+
+	<LI><CODE>all</CODE> - All of the errors below are fatal</LI>
+
+	<LI><CODE>browse</CODE> - Browsing initialization errors are fatal,
+	for example failed binding to the CUPS browse port or failed connections
+	to LDAP servers</LI>
+
+	<LI><CODE>config</CODE> - Configuration file syntax errors are
+	fatal</LI>
+
+	<LI><CODE>listen</CODE> - Listen or Port errors are fatal, except for
+	IPv6 failures on the loopback or "any" addresses</LI>
+
+	<LI><CODE>log</CODE> - Log file creation or write errors are fatal</LI>
+
+	<LI><CODE>permissions</CODE> - Bad startup file permissions are
+	fatal, for example shared SSL certificate and key files with world-
+	read permissions</LI>
+
+</UL>
+
+<P>Multiple errors can be listed, and the form "-kind" can be used with
+<CODE>all</CODE> to remove specific kinds of errors. The default setting is
+<CODE>@CUPS_FATAL_ERRORS@</CODE>.</P>
+
+
+<H2 CLASS="title"><SPAN CLASS="info">CUPS 1.1.18</SPAN><A NAME="FileDevice">FileDevice</A></H2>
+
+<H3>Examples</H3>
+
+<PRE CLASS="command">
+FileDevice Yes
+FileDevice No
+</PRE>
+
+<H3>Description</H3>
+
+<P>The <CODE>FileDevice</CODE> directive determines whether the
+scheduler allows new printers to be added using device URIs of
+the form <CODE>file:/filename</CODE>. File devices are most often
+used to test new printer drivers and do not support raw file
+printing.</P>
+
+<P>The default setting is <CODE>No</CODE>.</P>
+
+<BLOCKQUOTE><B>Note:</B>
+
+<P>File devices are managed by the scheduler. Since the
+scheduler normally runs as the root user, file devices
+can be used to overwrite system files and potentially
+gain unauthorized access to the system. If you must
+create printers using file devices, we recommend that
+you set the <CODE>FileDevice</CODE> directive to
+<CODE>Yes</CODE> for only as long as you need to add the
+printers to the system, and then reset the directive to
+<CODE>No</CODE>.</P>
+
+</BLOCKQUOTE>
+
+
+<H2 CLASS="title"><SPAN CLASS="info">CUPS 1.1.3</SPAN><A NAME="FontPath">FontPath</A></H2>
+
+<H3>Examples</H3>
+
+<PRE CLASS="command">
+FontPath /foo/bar/fonts
+FontPath /usr/share/cups/fonts:/foo/bar/fonts
+</PRE>
+
+<H3>Description</H3>
+
+<P>The <CODE>FontPath</CODE> directive specifies the font path to
+use when searching for fonts. The default font path is
+<CODE>/usr/share/cups/fonts</CODE>.</P>
+
+
+<H2 CLASS="title"><A NAME="Group">Group</A></H2>
+
+<H3>Examples</H3>
+
+<PRE CLASS="command">
+Group lp
+Group nobody
+</PRE>
+
+<H3>Description</H3>
+
+<P>The <CODE>Group</CODE> directive specifies the UNIX group that
+filter and CGI programs run as. The default group is
+system-specific but is usually <CODE>lp</CODE> or
+<CODE>nobody</CODE>.</P>
+
+
+<H2 CLASS="title"><SPAN CLASS="info">CUPS 1.1.15</SPAN><A NAME="LogFilePerm">LogFilePerm</A></H2>
+
+<H3>Examples</H3>
+
+<PRE CLASS="command">
+LogFilePerm 0644
+LogFilePerm 0600
+</PRE>
+
+<H3>Description</H3>
+
+<P>The <CODE>LogFilePerm</CODE> directive specifies the
+permissions to use when writing log files. The default
+is @CUPS_LOG_FILE_PERM@.</P>
+
+
+<H2 CLASS="title"><A NAME="PageLog">PageLog</A></H2>
+
+<H3>Examples</H3>
+
+<PRE CLASS="command">
+PageLog /var/log/cups/page_log
+PageLog /var/log/cups/page_log-%s
+PageLog syslog
+</PRE>
+
+<H3>Description</H3>
+
+<P>The <CODE>PageLog</CODE> directive sets the name of the page
+log file. If the filename is not absolute then it is assumed to
+be relative to the <A
+HREF="#ServerRoot"><CODE>ServerRoot</CODE></A> directory. The
+default page log file is <VAR>@CUPS_LOGDIR@/page_log</VAR>.</P>
+
+<P>The server name can be included in the filename by using
+<CODE>%s</CODE> in the name.</P>
+
+<P>The special name "syslog" can be used to send the page
+information to the system log instead of a plain file.</P>
+
+
+<H2 CLASS="title"><A NAME="Printcap">Printcap</A></H2>
+
+<H3>Examples</H3>
+
+<PRE CLASS="command">
+Printcap
+Printcap /etc/printcap
+Printcap /etc/printers.conf
+Printcap /Library/Preferences/org.cups.printers.plist
+</PRE>
+
+<H3>Description</H3>
+
+<P>The <CODE>Printcap</CODE> directive controls whether or not a
+printcap file is automatically generated and updated with a list
+of available printers. If specified with no value, then no
+printcap file will be generated. The default is to generate a
+file named <VAR>@CUPS_DEFAULT_PRINTCAP@</VAR>.</P>
+
+<P>When a filename is specified (e.g. <VAR>@CUPS_DEFAULT_PRINTCAP@</VAR>),
+the printcap file is written whenever a printer is added or
+removed. The printcap file can then be used by applications that
+are hardcoded to look at the printcap file for the available
+printers.</P>
+
+
+<H2 CLASS="title"><A NAME="PrintcapFormat">PrintcapFormat</A></H2>
+
+<H3>Examples</H3>
+
+<PRE CLASS="command">
+PrintcapFormat BSD
+PrintcapFormat Solaris
+PrintcapFormat plist
+</PRE>
+
+<H3>Description</H3>
+
+<P>The <CODE>PrintcapFormat</CODE> directive controls the output format of the
+printcap file. The default is to generate the plist format on OS X, the
+Solaris format on Solaris, and the BSD format on other operating systems.</P>
+
+
+<H2 CLASS="title"><SPAN CLASS="info">CUPS 1.1.3</SPAN><A NAME="RemoteRoot">RemoteRoot</A></H2>
+
+<H3>Examples</H3>
+
+<PRE CLASS="command">
+RemoteRoot remroot
+RemoteRoot root
+</PRE>
+
+<H3>Description</H3>
+
+<P>The <CODE>RemoteRoot</CODE> directive sets the username for
+unauthenticated root requests from remote hosts. The default
+username is <VAR>remroot</VAR>. Setting <CODE>RemoteRoot</CODE>
+to <VAR>root</VAR> effectively disables this security
+mechanism.</P>
+
+
+<H2 CLASS="title"><A NAME="RequestRoot">RequestRoot</A></H2>
+
+<H3>Examples</H3>
+
+<PRE CLASS="command">
+RequestRoot /var/spool/cups
+RequestRoot /foo/bar/spool/cups
+</PRE>
+
+<H3>Description</H3>
+
+<P>The <CODE>RequestRoot</CODE> directive sets the directory for
+incoming IPP requests and HTML forms. If an absolute path is not
+provided then it is assumed to be relative to the <A
+HREF="#ServerRoot"><CODE>ServerRoot</CODE></A> directory. The
+default request directory is <VAR>@CUPS_REQUESTS@</VAR>.</P>
+
+
+<H2 CLASS="title"><A NAME="ServerBin">ServerBin</A></H2>
+
+<H3>Examples</H3>
+
+<PRE CLASS="command">
+ServerBin /usr/lib/cups
+ServerBin /foo/bar/lib/cups
+</PRE>
+
+<H3>Description</H3>
+
+<P>The <CODE>ServerBin</CODE> directive sets the directory for
+server-run executables. If an absolute path is not provided then
+it is assumed to be relative to the <A
+HREF="#ServerRoot"><CODE>ServerRoot</CODE></A> directory. The
+default executable directory is <VAR>/usr/lib/cups</VAR>,
+<VAR>/usr/lib32/cups</VAR>, or <VAR>/usr/libexec/cups</VAR>
+depending on the operating system.</P>
+
+
+<H2 CLASS="title"><A NAME="ServerCertificate">ServerCertificate</A></H2>
+
+<H3>Examples</H3>
+
+<PRE CLASS="command">
+ServerCertificate /etc/cups/ssl/server.crt
+</PRE>
+
+<H3>Description</H3>
+
+<P>The <CODE>ServerCertificate</CODE> directive specifies the
+location of the SSL certificate file used by the server when
+negotiating encrypted connections. The certificate must not be
+encrypted (password protected) since the scheduler normally runs
+in the background and will be unable to ask for a password.</P>
+
+<P>The default certificate file is
+<VAR>/etc/cups/ssl/server.crt</VAR>.</P>
+
+
+<H2 CLASS="title"><A NAME="ServerKey">ServerKey</A></H2>
+
+<H3>Examples</H3>
+
+<PRE CLASS="command">
+ServerKey /etc/cups/ssl/server.key
+</PRE>
+
+<H3>Description</H3>
+
+<P>The <CODE>ServerKey</CODE> directive specifies the location of
+the SSL private key file used by the server when negotiating
+encrypted connections.</P>
+
+<P>The default key file is
+<VAR>/etc/cups/ssl/server.crt</VAR>.</P>
+
+
+<H2 CLASS="title"><A NAME="ServerRoot">ServerRoot</A></H2>
+
+<H3>Examples</H3>
+
+<PRE CLASS="command">
+ServerRoot /etc/cups
+ServerRoot /foo/bar/cups
+</PRE>
+
+<H3>Description</H3>
+
+<P>The <CODE>ServerRoot</CODE> directive specifies the absolute
+path to the server configuration and state files. It is also used
+to resolve relative paths in the <VAR>cupsd.conf</VAR> file. The
+default server directory is <VAR>/etc/cups</VAR>.</P>
+
+
+<H2 CLASS="title"><A NAME="SystemGroup">SystemGroup</A></H2>
+
+<H3>Examples</H3>
+
+<PRE CLASS="command">
+SystemGroup lpadmin
+SystemGroup sys
+SystemGroup system
+SystemGroup root
+SystemGroup root lpadmin
+</PRE>
+
+<H3>Description</H3>
+
+<P>The <CODE>SystemGroup</CODE> directive specifies the system
+administration group for <CODE>System</CODE> authentication.
+Multiple groups can be listed, separated with spaces. The default
+group list is <CODE>@CUPS_SYSTEM_GROUPS@</CODE>.</P>
+
+
+<H2 CLASS="title"><A NAME="TempDir">TempDir</A></H2>
+
+<H3>Examples</H3>
+
+<PRE CLASS="command">
+TempDir /var/tmp
+TempDir /foo/bar/tmp
+</PRE>
+
+<H3>Description</H3>
+
+<P>The <CODE>TempDir</CODE> directive specifies an absolute path
+for the directory to use for temporary files. The default
+directory is <VAR>@CUPS_REQUESTS@/tmp</VAR>.</P>
+
+<P>Temporary directories must be world-writable and should have
+the "sticky" permission bit enabled so that other users cannot
+delete filter temporary files. The following commands will create
+an appropriate temporary directory called
+<VAR>/foo/bar/tmp</VAR>:</P>
+
+<PRE CLASS="command">
+<KBD>mkdir /foo/bar/tmp</KBD>
+<KBD>chmod a+rwxt /foo/bar/tmp</KBD>
+</PRE>
+
+
+<H2 CLASS="title"><A NAME="User">User</A></H2>
+
+<H3>Examples</H3>
+
+<PRE CLASS="command">
+User lp
+User guest
+</PRE>
+
+<H3>Description</H3>
+
+<P>The <CODE>User</CODE> directive specifies the UNIX user that
+filter and CGI programs run as. The default user is
+<CODE>@CUPS_USER@</CODE>.</P>
+
+<BLOCKQUOTE><B>Note:</B>
+
+<P>You may not use user <CODE>root</CODE>, as that would expose
+the system to unacceptable security risks. The scheduler will
+automatically choose user <CODE>nobody</CODE> if you specify a
+user whose ID is 0.</P>
+
+</BLOCKQUOTE>
+
+
+</BODY>
+</HTML>
--- a/doc/help/ref-cupsd-conf.html.in
+++ b/doc/help/ref-cupsd-conf.html.in
@@ -191,82 +191,6 @@
 HREF="#Limit"><CODE>Limit</CODE></A> section.</P>
 
 
-<H2 CLASS="title"><SPAN CLASS="info">Deprecated</SPAN><A NAME="AuthClass">AuthClass</A></H2>
-
-<H3>Examples</H3>
-
-<PRE CLASS="command">
-&lt;Location /path&gt;
-  ...
-  AuthClass Anonymous
-  AuthClass User
-  AuthClass System
-  AuthClass Group
-&lt;/Location&gt;
-</PRE>
-
-<H3>Description</H3>
-
-<P>The <CODE>AuthClass</CODE> directive defines what level of
-authentication is required:</P>
-
-<UL>
-
-	<LI><CODE>Anonymous</CODE> - No authentication should be
-	performed (default)</LI>
-
-	<LI><CODE>User</CODE> - A valid username and password is
-	required</LI>
-
-	<LI><CODE>System</CODE> - A valid username and password
-	is required, and the username must belong to the "sys"
-	group; this can be changed using the <A
-	HREF="#SystemGroup"><CODE>SystemGroup</CODE></A>
-	directive</LI>
-
-	<LI><CODE>Group</CODE> - A valid username and password is
-	required, and the username must belong to the group named
-	by the <A
-	HREF="#AuthGroupName"><CODE>AuthGroupName</CODE></A>
-	directive</LI>
-
-</UL>
-
-<P>The <CODE>AuthClass</CODE> directive must appear inside a <A
-HREF="#Location"><CODE>Location</CODE></A> or <A
-HREF="#Limit"><CODE>Limit</CODE></A> section.</P>
-
-<P><B>This directive is deprecated and will be removed from a
-future release of CUPS.</B> Consider using the more flexible <A
-HREF="#Require"><CODE>Require</CODE></A> directive instead.</P>
-
-
-<H2 CLASS="title"><SPAN CLASS="info">Deprecated</SPAN><A NAME="AuthGroupName">AuthGroupName</A></H2>
-
-<H3>Examples</H3>
-
-<PRE CLASS="command">
-&lt;Location /path&gt;
-  ...
-  AuthGroupName mygroup
-  AuthGroupName lp
-&lt;/Location&gt;
-</PRE>
-
-<H3>Description</H3>
-
-<P>The <CODE>AuthGroupName</CODE> directive sets the group to use
-for <CODE>Group</CODE> authentication.</P>
-
-<P>The <CODE>AuthGroupName</CODE> directive must appear inside a
-<A HREF="#Location"><CODE>Location</CODE></A> or <A
-HREF="#Limit"><CODE>Limit</CODE></A> section.</P>
-
-<P><B>This directive is deprecated and will be removed from a
-future release of CUPS.</B> Consider using the more flexible <A
-HREF="#Require"><CODE>Require</CODE></A> directive instead.</P>
-
-
 <H2 CLASS="title"><A NAME="AuthType">AuthType</A></H2>
 
 <H3>Examples</H3>
@@ -2544,65 +2468,6 @@
 files as soon as each job is completed, canceled, or aborted.</P>
 
 
-<H2 CLASS="title"><A NAME="Printcap">Printcap</A></H2>
-
-<H3>Examples</H3>
-
-<PRE CLASS="command">
-Printcap
-Printcap /etc/printcap
-Printcap /etc/printers.conf
-Printcap /Library/Preferences/org.cups.printers.plist
-</PRE>
-
-<H3>Description</H3>
-
-<P>The <CODE>Printcap</CODE> directive controls whether or not a
-printcap file is automatically generated and updated with a list
-of available printers. If specified with no value, then no
-printcap file will be generated. The default is to generate a
-file named <VAR>@CUPS_DEFAUL_PRINTCAP@</VAR>.</P>
-
-<P>When a filename is specified (e.g. <VAR>@CUPS_DEFAULT_PRINTCAP@</VAR>),
-the printcap file is written whenever a printer is added or
-removed. The printcap file can then be used by applications that
-are hardcoded to look at the printcap file for the available
-printers.</P>
-
-
-<H2 CLASS="title"><A NAME="PrintcapFormat">PrintcapFormat</A></H2>
-
-<H3>Examples</H3>
-
-<PRE CLASS="command">
-PrintcapFormat BSD
-PrintcapFormat Solaris
-PrintcapFormat plist
-</PRE>
-
-<H3>Description</H3>
-
-<P>The <CODE>PrintcapFormat</CODE> directive controls the output format of the
-printcap file. The default is to generate the plist format on Mac OS X, the
-Solaris format on Solaris, and the BSD format on other operating systems.</P>
-
-
-<H2 CLASS="title"><SPAN CLASS="info">CUPS 1.1.13</SPAN><A NAME="PrintcapGUI">PrintcapGUI</A></H2>
-
-<H3>Examples</H3>
-
-<PRE CLASS="command">
-PrintGUI /usr/bin/glpoptions
-</PRE>
-
-<H3>Description</H3>
-
-<P>The <CODE>PrintcapGUI</CODE> directive sets the program to
-associate with the IRIX printer GUI interface script which is
-used by IRIX applications to display printer-specific options.
-There is no default program.</P>
-
-
 <H2 CLASS="title"><SPAN CLASS="info">CUPS 1.1.21</SPAN><A NAME="ReloadTimeout">ReloadTimeout</A></H2>
 
 <H3>Examples</H3>
@@ -2619,42 +2484,6 @@
 before doing a restart. The default is 30 seconds.</P>
 
 
-<H2 CLASS="title"><SPAN CLASS="info">CUPS 1.1.3</SPAN><A NAME="RemoteRoot">RemoteRoot</A></H2>
-
-<H3>Examples</H3>
-
-<PRE CLASS="command">
-RemoteRoot remroot
-RemoteRoot root
-</PRE>
-
-<H3>Description</H3>
-
-<P>The <CODE>RemoteRoot</CODE> directive sets the username for
-unauthenticated root requests from remote hosts. The default
-username is <VAR>remroot</VAR>. Setting <CODE>RemoteRoot</CODE>
-to <VAR>root</VAR> effectively disables this security
-mechanism.</P>
-
-
-<H2 CLASS="title"><A NAME="RequestRoot">RequestRoot</A></H2>
-
-<H3>Examples</H3>
-
-<PRE CLASS="command">
-RequestRoot /var/spool/cups
-RequestRoot /foo/bar/spool/cups
-</PRE>
-
-<H3>Description</H3>
-
-<P>The <CODE>RequestRoot</CODE> directive sets the directory for
-incoming IPP requests and HTML forms. If an absolute path is not
-provided then it is assumed to be relative to the <A
-HREF="#ServerRoot"><CODE>ServerRoot</CODE></A> directory. The
-default request directory is <VAR>@CUPS_REQUESTS@</VAR>.</P>
-
-
 <H2 CLASS="title"><SPAN CLASS="info">CUPS 1.1.7</SPAN><A NAME="Require">Require</A></H2>
 
 <H3>Examples</H3>
@@ -2806,64 +2635,6 @@
 </BLOCKQUOTE>
 
 
-<H2 CLASS="title"><A NAME="ServerBin">ServerBin</A></H2>
-
-<H3>Examples</H3>
-
-<PRE CLASS="command">
-ServerBin /usr/lib/cups
-ServerBin /foo/bar/lib/cups
-</PRE>
-
-<H3>Description</H3>
-
-<P>The <CODE>ServerBin</CODE> directive sets the directory for
-server-run executables. If an absolute path is not provided then
-it is assumed to be relative to the <A
-HREF="#ServerRoot"><CODE>ServerRoot</CODE></A> directory. The
-default executable directory is <VAR>/usr/lib/cups</VAR>,
-<VAR>/usr/lib32/cups</VAR>, or <VAR>/usr/libexec/cups</VAR>
-depending on the operating system.</P>
-
-
-<H2 CLASS="title"><A NAME="ServerCertificate">ServerCertificate</A></H2>
-
-<H3>Examples</H3>
-
-<PRE CLASS="command">
-ServerCertificate /etc/cups/ssl/server.crt
-</PRE>
-
-<H3>Description</H3>
-
-<P>The <CODE>ServerCertificate</CODE> directive specifies the
-location of the SSL certificate file used by the server when
-negotiating encrypted connections. The certificate must not be
-encrypted (password protected) since the scheduler normally runs
-in the background and will be unable to ask for a password.</P>
-
-<P>The default certificate file is
-<VAR>/etc/cups/ssl/server.crt</VAR>.</P>
-
-
-<H2 CLASS="title"><A NAME="ServerKey">ServerKey</A></H2>
-
-<H3>Examples</H3>
-
-<PRE CLASS="command">
-ServerKey /etc/cups/ssl/server.key
-</PRE>
-
-<H3>Description</H3>
-
-<P>The <CODE>ServerKey</CODE> directive specifies the location of
-the SSL private key file used by the server when negotiating
-encrypted connections.</P>
-
-<P>The default key file is
-<VAR>/etc/cups/ssl/server.crt</VAR>.</P>
-
-
 <H2 CLASS="title"><A NAME="ServerName">ServerName</A></H2>
 
 <H3>Examples</H3>
@@ -2880,23 +2651,6 @@
 hostname.</P>
 
 
-<H2 CLASS="title"><A NAME="ServerRoot">ServerRoot</A></H2>
-
-<H3>Examples</H3>
-
-<PRE CLASS="command">
-ServerRoot /etc/cups
-ServerRoot /foo/bar/cups
-</PRE>
-
-<H3>Description</H3>
-
-<P>The <CODE>ServerRoot</CODE> directive specifies the absolute
-path to the server configuration and state files. It is also used
-to resolve relative paths in the <VAR>cupsd.conf</VAR> file. The
-default server directory is <VAR>/etc/cups</VAR>.</P>
-
-
 <H2 CLASS="title"><SPAN CLASS="info">CUPS 1.1.21</SPAN><A NAME="ServerTokens">ServerTokens</A></H2>
 
 <H3>Examples</H3>
@@ -3075,53 +2829,6 @@
 HREF="#Policy"><CODE>Policy</CODE></A> section.</P>
 
 
-<H2 CLASS="title"><A NAME="SystemGroup">SystemGroup</A></H2>
-
-<H3>Examples</H3>
-
-<PRE CLASS="command">
-SystemGroup lpadmin
-SystemGroup sys
-SystemGroup system
-SystemGroup root
-SystemGroup root lpadmin
-</PRE>
-
-<H3>Description</H3>
-
-<P>The <CODE>SystemGroup</CODE> directive specifies the system
-administration group for <CODE>System</CODE> authentication.
-Multiple groups can be listed, separated with spaces. The default
-group list is <CODE>@CUPS_SYSTEM_GROUPS@</CODE>.</P>
-
-
-<H2 CLASS="title"><A NAME="TempDir">TempDir</A></H2>
-
-<H3>Examples</H3>
-
-<PRE CLASS="command">
-TempDir /var/tmp
-TempDir /foo/bar/tmp
-</PRE>
-
-<H3>Description</H3>
-
-<P>The <CODE>TempDir</CODE> directive specifies an absolute path
-for the directory to use for temporary files. The default
-directory is <VAR>@CUPS_REQUESTS@/tmp</VAR>.</P>
-
-<P>Temporary directories must be world-writable and should have
-the "sticky" permission bit enabled so that other users cannot
-delete filter temporary files. The following commands will create
-an appropriate temporary directory called
-<VAR>/foo/bar/tmp</VAR>:</P>
-
-<PRE CLASS="command">
-<KBD>mkdir /foo/bar/tmp</KBD>
-<KBD>chmod a+rwxt /foo/bar/tmp</KBD>
-</PRE>
-
-
 <H2 CLASS="title"><A NAME="Timeout">Timeout</A></H2>
 
 <H3>Examples</H3>
@@ -3138,53 +2845,6 @@
 default timeout is 300 seconds.</P>
 
 
-<H2 CLASS="title"><SPAN CLASS="info">CUPS 1.2/Mac OS X 10.5</SPAN><A NAME="UseNetworkDefault">UseNetworkDefault</A></H2>
-
-<H3>Examples</H3>
-
-<PRE CLASS="command">
-UseNetworkDefault yes
-UseNetworkDefault no
-</PRE>
-
-<H3>Description</H3>
-
-<P>The <CODE>UseNetworkDefault</CODE> directive controls whether
-the client will use a network/remote printer as a default
-printer. If enabled, the default printer of a server is used as
-the default printer on a client. When multiple servers are
-advertising a default printer, the client's default printer is
-set to the first discovered printer, or to the implicit class for
-the same printer available from multiple servers.</P>
-
-<P>The default is <CODE>@CUPS_USE_NETWORK_DEFAULT@</CODE>.</P>
-
-
-<H2 CLASS="title"><A NAME="User">User</A></H2>
-
-<H3>Examples</H3>
-
-<PRE CLASS="command">
-User lp
-User guest
-</PRE>
-
-<H3>Description</H3>
-
-<P>The <CODE>User</CODE> directive specifies the UNIX user that
-filter and CGI programs run as. The default user is
-<CODE>@CUPS_USER@</CODE>.</P>
-
-<BLOCKQUOTE><B>Note:</B>
-
-<P>You may not use user <CODE>root</CODE>, as that would expose
-the system to unacceptable security risks. The scheduler will
-automatically choose user <CODE>nobody</CODE> if you specify a
-user whose ID is 0.</P>
-
-</BLOCKQUOTE>
-
-
 <H2 CLASS="title"><SPAN CLASS="INFO">CUPS 1.5</SPAN><A NAME="WebInterface">WebInterface</A></H2>
 
 <H3>Examples</H3>
--- a/man/Makefile
+++ b/man/Makefile
@@ -39,6 +39,7 @@
 		ppdpo.$(MAN1EXT)
 MAN5	=	classes.conf.$(MAN5EXT) \
 		client.conf.$(MAN5EXT) \
+		cups-files.conf.$(MAN5EXT) \
 		cups-snmp.conf.$(MAN5EXT) \
 		cupsd.conf.$(MAN5EXT) \
 		ipptoolfile.$(MAN5EXT) \
--- /dev/null
+++ b/man/cups-files.conf.man.in
@@ -0,0 +1,146 @@
+.\"
+.\" "$Id$"
+.\"
+.\"   cupsd.conf man page for CUPS.
+.\"
+.\"   Copyright 2007-2012 by Apple Inc.
+.\"   Copyright 1997-2006 by Easy Software Products.
+.\"
+.\"   These coded instructions, statements, and computer programs are the
+.\"   property of Apple Inc. and are protected by Federal copyright
+.\"   law.  Distribution and use rights are outlined in the file "LICENSE.txt"
+.\"   which should have been included with this file.  If this file is
+.\"   file is missing or damaged, see the license at "http://www.cups.org/".
+.\"
+.TH cups-files.conf 5 "CUPS" "19 November 2012" "Apple Inc."
+.SH NAME
+cups-files.conf \- file and directory configuration file for cups
+.SH DESCRIPTION
+The \fIcups-file.conf\fR file configures the files and directories used by the
+CUPS scheduler, \fIcupsd(8)\fR.  It is normally located in the
+\fI@CUPS_SERVERROOT@\fR directory.
+.LP
+Each line in the file can be a configuration directive, a blank line,
+or a comment. Comment lines start with the # character.
+.SH DIRECTIVES
+The following directives are understood by \fIcupsd(8)\fR. Consult the
+on-line help for detailed descriptions:
+.TP 5
+AccessLog filename
+.TP 5
+AccessLog syslog
+.br
+Defines the access log filename.
+.TP 5
+ConfigFilePerm mode
+.br
+Specifies the permissions for all configuration files that the scheduler
+writes.
+.TP 5
+DataDir path
+.br
+Specified the directory where data files can be found.
+.TP 5
+DocumentRoot directory
+.br
+Specifies the root directory for the internal web server documents.
+.TP 5
+ErrorLog filename
+.TP 5
+ErrorLog syslog
+.br
+Specifies the error log filename.
+.TP 5
+FatalErrors none
+.TP 5
+FatalErrors all -kind [... -kind]
+.TP 5
+FatalErrors kind [... kind]
+.br
+Specifies which errors are fatal, causing the scheduler to exit. "Kind" is
+"browse", "config", "listen", "log", or "permissions".
+.TP 5
+FileDevice Yes
+.TP 5
+FileDevice No
+.br
+Specifies whether the file pseudo-device can be used for new
+printer queues.
+.TP 5
+FontPath directory[:directory:...]
+.br
+Specifies the search path for fonts.
+.TP 5
+Group group-name-or-number
+.br
+Specifies the group name or ID that will be used when executing
+external programs.
+.TP 5
+LogFilePerm mode
+.br
+Specifies the permissions for all log files that the scheduler writes.
+.TP 5
+PageLog filename
+.TP 5
+PageLog syslog
+.br
+Specifies the page log filename.
+.TP 5
+Printcap
+.TP 5
+Printcap filename
+.br
+Specifies the filename for a printcap file that is updated
+automatically with a list of available printers (needed for
+legacy applications); specifying Printcap with no filename
+disables printcap generation.
+.TP 5
+RemoteRoot user-name
+.br
+Specifies the username that is associated with unauthenticated root
+accesses.
+.TP 5
+RequestRoot directory
+.br
+Specifies the directory to store print jobs and other HTTP request
+data.
+.TP 5
+ServerBin directory
+.br
+Specifies the directory where backends, CGIs, daemons, and filters may
+be found.
+.TP 5
+ServerCertificate filename
+.br
+Specifies the encryption certificate to use.
+.TP 5
+ServerKey filename
+.br
+Specifies the encryption key to use.
+.TP 5
+ServerRoot directory
+.br
+Specifies the directory where the server configuration files can be found.
+.TP 5
+SystemGroup group-name [group-name ...]
+.br
+Specifies the group(s) to use for System class authentication.
+.TP 5
+TempDir directory
+.br
+Specifies the directory where temporary files are stored.
+.TP 5
+User user-name
+.br
+Specifies the user name or ID that is used when running external programs.
+.SH SEE ALSO
+\fIclasses.conf(5)\fR, \fIcupsd(8)\fR, \fIcupsd.conf(5)\fR, \fImime.convs(5)\fR,
+\fImime.types(5)\fR, \fIprinters.conf(5)\fR,
+\fIsubscriptions.conf(5)\fR,
+.br
+http://localhost:631/help
+.SH COPYRIGHT
+Copyright 2007-2012 by Apple Inc.
+.\"
+.\" End of "$Id$".
+.\"
--- a/man/cupsd.conf.man.in
+++ b/man/cupsd.conf.man.in
@@ -12,13 +12,16 @@
 .\"   which should have been included with this file.  If this file is
 .\"   file is missing or damaged, see the license at "http://www.cups.org/".
 .\"
-.TH cupsd.conf 5 "CUPS" "18 May 2011" "Apple Inc."
+.TH cupsd.conf 5 "CUPS" "19 November 2012" "Apple Inc."
 .SH NAME
 cupsd.conf \- server configuration file for cups
 .SH DESCRIPTION
 The \fIcupsd.conf\fR file configures the CUPS scheduler, \fIcupsd(8)\fR.  It
-is normally located in the \fI@CUPS_SERVERROOT@\fR directory.
-.LP
+is normally located in the \fI@CUPS_SERVERROOT@\fR directory. \fBNote:\fR
+File, directory, and user configuration directives that used to be allowed in
+the \fIcupsd.conf\fR file are now stored in the \fIcups-files.conf(5)\fR instead
+in order to prevent certain types of privilege escalation attacks.
+LP
 Each line in the file can be a configuration directive, a blank line,
 or a comment. Comment lines start with the # character. The
 configuration directives are intentionally similar to those used by the
@@ -27,12 +30,6 @@
 The following directives are understood by \fIcupsd(8)\fR. Consult the
 on-line help for detailed descriptions:
 .TP 5
-AccessLog filename
-.TP 5
-AccessLog syslog
-.br
-Defines the access log filename.
-.TP 5
 AccessLogLevel config
 .TP 5
 AccessLogLevel actions
@@ -61,20 +58,6 @@
 .br
 Allows access from the named hosts or addresses.
 .TP 5
-AuthClass User
-.TP 5
-AuthClass Group
-.TP 5
-AuthClass System
-.br
-Specifies the authentication class (User, Group, System) -
-\fBthis directive is deprecated\fR.
-.TP 5
-AuthGroupName group-name
-.br
-Specifies the authentication group - \fBthis directive is
-deprecated\fR.
-.TP 5
 AuthType None
 .TP 5
 AuthType Basic
@@ -220,7 +203,7 @@
 .TP 5
 Browsing No
 .br
-Specifies whether or not remote printer browsing should be enabled.
+Specifies whether or not shared printers should be advertised.
 .TP 5
 Classification banner
 .br
@@ -233,15 +216,6 @@
 Specifies whether to allow users to override the classification
 of individual print jobs.
 .TP 5
-ConfigFilePerm mode
-.br
-Specifies the permissions for all configuration files that the scheduler
-writes.
-.TP 5
-DataDir path
-.br
-Specified the directory where data files can be found.
-.TP 5
 DefaultAuthType Basic
 .TP 5
 DefaultAuthType BasicDigest
@@ -309,10 +283,6 @@
 causes the update to happen as soon as possible, typically within a few
 milliseconds.
 .TP 5
-DocumentRoot directory
-.br
-Specifies the root directory for the internal web server documents.
-.TP 5
 Encryption IfRequested
 .TP 5
 Encryption Never
@@ -322,28 +292,6 @@
 Specifies the level of encryption that is required for a particular
 location.
 .TP 5
-ErrorLog filename
-.TP 5
-ErrorLog syslog
-.br
-Specifies the error log filename.
-.TP 5
-FatalErrors none
-.TP 5
-FatalErrors all -kind [... -kind]
-.TP 5
-FatalErrors kind [... kind]
-.br
-Specifies which errors are fatal, causing the scheduler to exit. "Kind" is
-"browse", "config", "listen", "log", or "permissions".
-.TP 5
-FileDevice Yes
-.TP 5
-FileDevice No
-.br
-Specifies whether the file pseudo-device can be used for new
-printer queues.
-.TP 5
 FilterLimit limit
 .br
 Specifies the maximum cost of filters that are run concurrently.
@@ -353,15 +301,6 @@
 Specifies the scheduling priority ("nice" value) of filters that
 are run to print a job.
 .TP 5
-FontPath directory[:directory:...]
-.br
-Specifies the search path for fonts.
-.TP 5
-Group group-name-or-number
-.br
-Specifies the group name or ID that will be used when executing
-external programs.
-.TP 5
 HideImplicitMembers Yes
 .TP 5
 HideImplicitMembers No
@@ -469,10 +408,6 @@
 Specifies the number of debugging messages that are logged when an error
 occurs in a print job.
 .TP 5
-LogFilePerm mode
-.br
-Specifies the permissions for all log files that the scheduler writes.
-.TP 5
 LogLevel alert
 .TP 5
 LogLevel crit
@@ -546,12 +481,6 @@
 .br
 Specifies the order of HTTP access control (allow,deny or deny,allow)
 .TP 5
-PageLog filename
-.TP 5
-PageLog syslog
-.br
-Specifies the page log filename.
-.TP 5
 PageLogFormat format string
 .br
 Specifies the format of page log lines.
@@ -581,15 +510,6 @@
 Specifies whether or not to preserve the job history after they are
 printed.
 .TP 5
-Printcap
-.TP 5
-Printcap filename
-.br
-Specifies the filename for a printcap file that is updated
-automatically with a list of available printers (needed for
-legacy applications); specifying Printcap with no filename
-disables printcap generation.
-.TP 5
 PrintcapFormat bsd
 .TP 5
 PrintcapFormat plist
@@ -598,29 +518,11 @@
 .br
 Specifies the format of the printcap file.
 .TP 5
-PrintcapGUI
-.TP 5
-PrintcapGUI gui-program-filename
-.br
-Specifies whether to generate option panel definition files on
-some operating systems. When provided with no program filename,
-disables option panel definition files.
-.TP 5
 ReloadTimeout seconds
 .br
 Specifies the amount of time to wait for job completion before
 restarting the scheduler.
 .TP 5
-RemoteRoot user-name
-.br
-Specifies the username that is associated with unauthenticated root
-accesses.
-.TP 5
-RequestRoot directory
-.br
-Specifies the directory to store print jobs and other HTTP request
-data.
-.TP 5
 Require group group-name-list
 .TP 5
 Require user user-name-list
@@ -652,27 +554,10 @@
 Specifies an alternate name that the server is known by. The special name "*"
 allows any name to be used.
 .TP 5
-ServerBin directory
-.br
-Specifies the directory where backends, CGIs, daemons, and filters may
-be found.
-.TP 5
-ServerCertificate filename
-.br
-Specifies the encryption certificate to use.
-.TP 5
-ServerKey filename
-.br
-Specifies the encryption key to use.
-.TP 5
 ServerName hostname-or-ip-address
 .br
 Specifies the fully-qualified hostname of the server.
 .TP 5
-ServerRoot directory
-.br
-Specifies the directory where the server configuration files can be found.
-.TP 5
 ServerTokens Full
 .TP 5
 ServerTokens Major
@@ -729,29 +614,17 @@
 "notify-events", "notify-pull-method", "notify-recipient-uri",
 "notify-subscriber-user-name", and "notify-user-data".
 .TP 5
-SystemGroup group-name [group-name ...]
-.br
-Specifies the group(s) to use for System class authentication.
-.TP 5
-TempDir directory
-.br
-Specifies the directory where temporary files are stored.
-.TP 5
 Timeout seconds
 .br
 Specifies the HTTP request timeout in seconds.
 .TP 5
-User user-name
-.br
-Specifies the user name or ID that is used when running external programs.
-.TP 5
 WebInterface yes
 .TP 5
 WebInterface no
 Specifies whether the web interface is enabled.
 .SH SEE ALSO
-\fIclasses.conf(5)\fR, \fIcupsd(8)\fR, \fImime.convs(5)\fR,
-\fImime.types(5)\fR, \fIprinters.conf(5)\fR,
+\fIclasses.conf(5)\fR, \fIcups-files.conf(5)\fR, \fIcupsd(8)\fR,
+\fImime.convs(5)\fR, \fImime.types(5)\fR, \fIprinters.conf(5)\fR,
 \fIsubscriptions.conf(5)\fR,
 .br
 http://localhost:631/help
--- a/scheduler/client.c
+++ b/scheduler/client.c
@@ -35,7 +35,7 @@
  *   data_ready()            - Check whether data is available from a client.
  *   encrypt_client()        - Enable encryption for the client...
  *   get_file()              - Get a filename and state info.
- *   install_conf_file()     - Install a configuration file.
+ *   install_cupsd_conf()    - Install a configuration file.
  *   is_cgi()                - Is the resource a CGI script/program?
  *   is_path_absolute()      - Is a path absolute and free of relative elements
  *                             (i.e. "..").
@@ -75,7 +75,7 @@
 #endif /* HAVE_SSL */
 static char		*get_file(cupsd_client_t *con, struct stat *filestats,
 			          char *filename, int len);
-static http_status_t	install_conf_file(cupsd_client_t *con);
+static http_status_t	install_cupsd_conf(cupsd_client_t *con);
 static int		is_cgi(cupsd_client_t *con, const char *filename,
 		               struct stat *filestats, mime_type_t *type);
 static int		is_path_absolute(const char *path);
@@ -1685,17 +1685,14 @@
 	    * Validate the resource name...
 	    */
 
-            if (strncmp(con->uri, "/admin/conf/", 12) ||
-	        strchr(con->uri + 12, '/') ||
-		strlen(con->uri) == 12)
+            if (strcmp(con->uri, "/admin/conf/cupsd.conf"))
 	    {
 	     /*
-	      * PUT can only be done to configuration files under
-	      * /admin/conf...
+	      * PUT can only be done to the cupsd.conf file...
 	      */
 
 	      cupsdLogMessage(CUPSD_LOG_ERROR,
-			      "Request for subdirectory \"%s\"!", con->uri);
+			      "Disallowed PUT request for \"%s\"!", con->uri);
 
 	      if (!cupsdSendError(con, HTTP_FORBIDDEN, CUPSD_AUTH_NONE))
 	      {
@@ -2059,7 +2056,7 @@
 	  * Install the configuration file...
 	  */
 
-          status = install_conf_file(con);
+          status = install_cupsd_conf(con);
 
          /*
 	  * Return the status to the client...
@@ -3814,14 +3811,13 @@
 
 
 /*
- * 'install_conf_file()' - Install a configuration file.
+ * 'install_cupsd_conf()' - Install a configuration file.
  */
 
 static http_status_t			/* O - Status */
-install_conf_file(cupsd_client_t *con)	/* I - Connection */
+install_cupsd_conf(cupsd_client_t *con)	/* I - Connection */
 {
   char		filename[1024];		/* Configuration filename */
-  mode_t	mode;			/* Permissions */
   cups_file_t	*in,			/* Input file */
 		*out;			/* Output file */
   char		buffer[16384];		/* Copy buffer */
@@ -3843,13 +3839,8 @@
   * Open the new config file...
   */
 
-  snprintf(filename, sizeof(filename), "%s%s", ServerRoot, con->uri + 11);
-  if (!strcmp(con->uri, "/admin/conf/printers.conf"))
-    mode = ConfigFilePerm & 0600;
-  else
-    mode = ConfigFilePerm;
-
-  if ((out = cupsdCreateConfFile(filename, mode)) == NULL)
+  snprintf(filename, sizeof(filename), "%s/cupsd.conf", ServerRoot);
+  if ((out = cupsdCreateConfFile(filename, ConfigFilePerm)) == NULL)
   {
     cupsFileClose(in);
     return (HTTP_SERVER_ERROR);
@@ -3894,14 +3885,10 @@
   cupsdClearString(&con->filename);
 
  /*
-  * If the cupsd.conf file was updated, set the NeedReload flag...
+  * Set the NeedReload flag...
   */
 
-  if (!strcmp(con->uri, "/admin/conf/cupsd.conf"))
-    NeedReload = RELOAD_CUPSD;
-  else
-    NeedReload = RELOAD_ALL;
-
+  NeedReload = RELOAD_CUPSD;
   ReloadTime = time(NULL);
 
  /*
--- a/scheduler/conf.c
+++ b/scheduler/conf.c
@@ -25,11 +25,13 @@
  *   parse_aaa()              - Parse authentication, authorization, and access
  *                              control lines.
  *   parse_fatal_errors()     - Parse FatalErrors values in a string.
- *   parse_groups()           - Parse system group names in a string.
- *   parse_protocols()        - Parse browse protocols in a string.
- *   read_configuration()     - Read a configuration file.
- *   read_location()          - Read a <Location path> definition.
- *   read_policy()            - Read a <Policy name> definition.
+ *   parse_groups()	      - Parse system group names in a string.
+ *   parse_protocols()	      - Parse browse protocols in a string.
+ *   parse_variable()	      - Parse a variable line.
+ *   read_cupsd_conf()	      - Read the cupsd.conf configuration file.
+ *   read_cups_files_conf()   - Read the cups-files.conf configuration file.
+ *   read_location()	      - Read a <Location path> definition.
+ *   read_policy()	      - Read a <Policy name> definition.
  *   set_policy_defaults()    - Set default policy values as needed.
  */
 
@@ -81,9 +83,8 @@
  * Local globals...
  */
 
-static const cupsd_var_t	variables[] =
+static const cupsd_var_t	cupsd_vars[] =
 {
-  { "AccessLog",		&AccessLog,		CUPSD_VARTYPE_STRING },
   { "AutoPurgeJobs", 		&JobAutoPurge,		CUPSD_VARTYPE_BOOLEAN },
 #ifdef HAVE_DNSSD
   { "BrowseDNSSDRegType",	&DNSSDRegType,		CUPSD_VARTYPE_STRING },
@@ -105,24 +106,17 @@
   { "BrowseTimeout",		&BrowseTimeout,		CUPSD_VARTYPE_INTEGER },
   { "BrowseWebIF",		&BrowseWebIF,		CUPSD_VARTYPE_BOOLEAN },
   { "Browsing",			&Browsing,		CUPSD_VARTYPE_BOOLEAN },
-  { "CacheDir",			&CacheDir,		CUPSD_VARTYPE_STRING },
   { "Classification",		&Classification,	CUPSD_VARTYPE_STRING },
   { "ClassifyOverride",		&ClassifyOverride,	CUPSD_VARTYPE_BOOLEAN },
-  { "ConfigFilePerm",		&ConfigFilePerm,	CUPSD_VARTYPE_INTEGER },
-  { "DataDir",			&DataDir,		CUPSD_VARTYPE_STRING },
   { "DefaultLanguage",		&DefaultLanguage,	CUPSD_VARTYPE_STRING },
   { "DefaultLeaseDuration",	&DefaultLeaseDuration,	CUPSD_VARTYPE_INTEGER },
   { "DefaultPaperSize",		&DefaultPaperSize,	CUPSD_VARTYPE_STRING },
   { "DefaultPolicy",		&DefaultPolicy,		CUPSD_VARTYPE_STRING },
   { "DefaultShared",		&DefaultShared,		CUPSD_VARTYPE_BOOLEAN },
   { "DirtyCleanInterval",	&DirtyCleanInterval,	CUPSD_VARTYPE_INTEGER },
-  { "DocumentRoot",		&DocumentRoot,		CUPSD_VARTYPE_STRING },
-  { "ErrorLog",			&ErrorLog,		CUPSD_VARTYPE_STRING },
   { "ErrorPolicy",		&ErrorPolicy,		CUPSD_VARTYPE_STRING },
-  { "FileDevice",		&FileDevice,		CUPSD_VARTYPE_BOOLEAN },
   { "FilterLimit",		&FilterLimit,		CUPSD_VARTYPE_INTEGER },
   { "FilterNice",		&FilterNice,		CUPSD_VARTYPE_INTEGER },
-  { "FontPath",			&FontPath,		CUPSD_VARTYPE_STRING },
   { "HideImplicitMembers",	&HideImplicitMembers,	CUPSD_VARTYPE_BOOLEAN },
   { "ImplicitClasses",		&ImplicitClasses,	CUPSD_VARTYPE_BOOLEAN },
   { "ImplicitAnyClasses",	&ImplicitAnyClasses,	CUPSD_VARTYPE_BOOLEAN },
@@ -137,8 +131,6 @@
   { "LimitRequestBody",		&MaxRequestSize,	CUPSD_VARTYPE_INTEGER },
   { "ListenBackLog",		&ListenBackLog,		CUPSD_VARTYPE_INTEGER },
   { "LogDebugHistory",		&LogDebugHistory,	CUPSD_VARTYPE_INTEGER },
-  { "LogFilePerm",		&LogFilePerm,		CUPSD_VARTYPE_INTEGER },
-  { "LPDConfigFile",		&LPDConfigFile,		CUPSD_VARTYPE_STRING },
   { "MaxActiveJobs",		&MaxActiveJobs,		CUPSD_VARTYPE_INTEGER },
   { "MaxClients",		&MaxClients,		CUPSD_VARTYPE_INTEGER },
   { "MaxClientsPerHost",	&MaxClientsPerHost,	CUPSD_VARTYPE_INTEGER },
@@ -155,15 +147,10 @@
   { "MaxSubscriptionsPerPrinter",&MaxSubscriptionsPerPrinter,	CUPSD_VARTYPE_INTEGER },
   { "MaxSubscriptionsPerUser",	&MaxSubscriptionsPerUser,	CUPSD_VARTYPE_INTEGER },
   { "MultipleOperationTimeout",	&MultipleOperationTimeout,	CUPSD_VARTYPE_INTEGER },
-  { "PageLog",			&PageLog,		CUPSD_VARTYPE_STRING },
   { "PageLogFormat",		&PageLogFormat,		CUPSD_VARTYPE_STRING },
   { "PreserveJobFiles",		&JobFiles,		CUPSD_VARTYPE_BOOLEAN },
   { "PreserveJobHistory",	&JobHistory,		CUPSD_VARTYPE_BOOLEAN },
-  { "Printcap",			&Printcap,		CUPSD_VARTYPE_STRING },
-  { "PrintcapGUI",		&PrintcapGUI,		CUPSD_VARTYPE_STRING },
   { "ReloadTimeout",		&ReloadTimeout,		CUPSD_VARTYPE_INTEGER },
-  { "RemoteRoot",		&RemoteRoot,		CUPSD_VARTYPE_STRING },
-  { "RequestRoot",		&RequestRoot,		CUPSD_VARTYPE_STRING },
   { "RIPCache",			&RIPCache,		CUPSD_VARTYPE_STRING },
   { "RootCertDuration",		&RootCertDuration,	CUPSD_VARTYPE_INTEGER },
   { "ServerAdmin",		&ServerAdmin,		CUPSD_VARTYPE_STRING },
@@ -181,13 +168,41 @@
 #ifdef HAVE_AUTHORIZATION_H
   { "SystemGroupAuthKey",	&SystemGroupAuthKey,	CUPSD_VARTYPE_STRING },
 #endif /* HAVE_AUTHORIZATION_H */
-  { "TempDir",			&TempDir,		CUPSD_VARTYPE_PATHNAME },
   { "Timeout",			&Timeout,		CUPSD_VARTYPE_INTEGER },
   { "UseNetworkDefault",	&UseNetworkDefault,	CUPSD_VARTYPE_BOOLEAN },
   { "WebInterface",		&WebInterface,		CUPSD_VARTYPE_BOOLEAN }
 };
-#define NUM_VARS	(sizeof(variables) / sizeof(variables[0]))
-
+static const cupsd_var_t	cupsfiles_vars[] =
+{
+  { "AccessLog",		&AccessLog,		CUPSD_VARTYPE_STRING },
+  { "CacheDir",			&CacheDir,		CUPSD_VARTYPE_STRING },
+  { "ConfigFilePerm",		&ConfigFilePerm,	CUPSD_VARTYPE_INTEGER },
+  { "DataDir",			&DataDir,		CUPSD_VARTYPE_STRING },
+  { "DocumentRoot",		&DocumentRoot,		CUPSD_VARTYPE_STRING },
+  { "ErrorLog",			&ErrorLog,		CUPSD_VARTYPE_STRING },
+  { "FileDevice",		&FileDevice,		CUPSD_VARTYPE_BOOLEAN },
+  { "FontPath",			&FontPath,		CUPSD_VARTYPE_STRING },
+  { "LogFilePerm",		&LogFilePerm,		CUPSD_VARTYPE_INTEGER },
+  { "LPDConfigFile",		&LPDConfigFile,		CUPSD_VARTYPE_STRING },
+  { "PageLog",			&PageLog,		CUPSD_VARTYPE_STRING },
+  { "Printcap",			&Printcap,		CUPSD_VARTYPE_STRING },
+  { "RemoteRoot",		&RemoteRoot,		CUPSD_VARTYPE_STRING },
+  { "RequestRoot",		&RequestRoot,		CUPSD_VARTYPE_STRING },
+  { "ServerBin",		&ServerBin,		CUPSD_VARTYPE_PATHNAME },
+#ifdef HAVE_SSL
+  { "ServerCertificate",	&ServerCertificate,	CUPSD_VARTYPE_PATHNAME },
+#  if defined(HAVE_LIBSSL) || defined(HAVE_GNUTLS)
+  { "ServerKey",		&ServerKey,		CUPSD_VARTYPE_PATHNAME },
+#  endif /* HAVE_LIBSSL || HAVE_GNUTLS */
+#endif /* HAVE_SSL */
+  { "ServerRoot",		&ServerRoot,		CUPSD_VARTYPE_PATHNAME },
+  { "SMBConfigFile",		&SMBConfigFile,		CUPSD_VARTYPE_STRING },
+  { "StateDir",			&StateDir,		CUPSD_VARTYPE_STRING },
+#ifdef HAVE_AUTHORIZATION_H
+  { "SystemGroupAuthKey",	&SystemGroupAuthKey,	CUPSD_VARTYPE_STRING },
+#endif /* HAVE_AUTHORIZATION_H */
+  { "TempDir",			&TempDir,		CUPSD_VARTYPE_PATHNAME },
+};
 
 static const unsigned	ones[4] =
 			{
@@ -212,7 +227,12 @@
 static int		parse_fatal_errors(const char *s);
 static int		parse_groups(const char *s);
 static int		parse_protocols(const char *s);
-static int		read_configuration(cups_file_t *fp);
+static int		parse_variable(const char *filename, int linenum,
+			               const char *line, const char *value,
+			               size_t num_vars,
+			               const cupsd_var_t *vars);
+static int		read_cupsd_conf(cups_file_t *fp);
+static int		read_cups_files_conf(cups_file_t *fp);
 static int		read_location(cups_file_t *fp, char *name, int linenum);
 static int		read_policy(cups_file_t *fp, char *name, int linenum);
 static void		set_policy_defaults(cupsd_policy_t *pol);
@@ -705,22 +725,48 @@
   cupsdInitEnv();
 
  /*
-  * Read the configuration file...
+  * Read the cups-files.conf file...
+  */
+
+  if ((fp = cupsFileOpen(CupsFilesFile, "r")) != NULL)
+  {
+    status = read_cups_files_conf(fp);
+
+    cupsFileClose(fp);
+
+    if (!status)
+      return (0);
+  }
+  else if (errno == ENOENT)
+    cupsdLogMessage(CUPSD_LOG_INFO, "No %s, using defaults.", CupsFilesFile);
+  else
+  {
+    cupsdLogMessage(CUPSD_LOG_CRIT, "Unable to open %s: %s", CupsFilesFile,
+                    strerror(errno));
+    return (0);
+  }
+
+  if (!ErrorLog)
+    cupsdSetString(&ErrorLog, CUPS_LOGDIR "/error_log");
+
+ /*
+  * Read the cupsd.conf file...
   */
 
   if ((fp = cupsFileOpen(ConfigurationFile, "r")) == NULL)
+  {
+    cupsdLogMessage(CUPSD_LOG_CRIT, "Unable to open %s: %s", ConfigurationFile,
+                    strerror(errno));
     return (0);
+  }
 
-  status = read_configuration(fp);
+  status = read_cupsd_conf(fp);
 
   cupsFileClose(fp);
 
   if (!status)
     return (0);
 
-  if (!ErrorLog)
-    cupsdSetString(&ErrorLog, CUPS_LOGDIR "/error_log");
-
   RunUser = getuid();
 
   cupsdLogMessage(CUPSD_LOG_INFO, "Remote access is %s.",
@@ -2504,13 +2550,174 @@
 
 
 /*
- * 'read_configuration()' - Read a configuration file.
+ * 'parse_variable()' - Parse a variable line.
  */
 
 static int				/* O - 1 on success, 0 on failure */
-read_configuration(cups_file_t *fp)	/* I - File to read from */
+parse_variable(
+    const char        *filename,	/* I - Name of configuration file */
+    int               linenum,		/* I - Line in configuration file */
+    const char        *line,		/* I - Line from configuration file */
+    const char        *value,		/* I - Value from configuration file */
+    size_t            num_vars,		/* I - Number of variables */
+    const cupsd_var_t *vars)		/* I - Variables */
+{
+  size_t		i;		/* Looping var */
+  const cupsd_var_t	*var;		/* Variables */
+  char			temp[1024];	/* Temporary string */
+
+
+  for (i = num_vars, var = vars; i > 0; i --, var ++)
+    if (!_cups_strcasecmp(line, var->name))
+      break;
+
+  if (i == 0)
+  {
+   /*
+    * Unknown directive!  Output an error message and continue...
+    */
+
+    if (!value)
+      cupsdLogMessage(CUPSD_LOG_ERROR, "Missing value for %s on line %d of %s.",
+		      line, linenum, filename);
+    else
+      cupsdLogMessage(CUPSD_LOG_ERROR, "Unknown directive %s on line %d of %s.",
+		      line, linenum, filename);
+
+    return (0);
+  }
+
+  switch (var->type)
+  {
+    case CUPSD_VARTYPE_INTEGER :
+	if (!value)
+	{
+	  cupsdLogMessage(CUPSD_LOG_ERROR,
+			  "Missing integer value for %s on line %d of %s.",
+			  line, linenum, filename);
+          return (0);
+	}
+	else if (!isdigit(*value & 255))
+	{
+	  cupsdLogMessage(CUPSD_LOG_ERROR,
+			  "Bad integer value for %s on line %d of %s.",
+			  line, linenum, filename);
+          return (0);
+	}
+	else
+	{
+	  int	n;		/* Number */
+	  char	*units;		/* Units */
+
+	  n = strtol(value, &units, 0);
+
+	  if (units && *units)
+	  {
+	    if (tolower(units[0] & 255) == 'g')
+	      n *= 1024 * 1024 * 1024;
+	    else if (tolower(units[0] & 255) == 'm')
+	      n *= 1024 * 1024;
+	    else if (tolower(units[0] & 255) == 'k')
+	      n *= 1024;
+	    else if (tolower(units[0] & 255) == 't')
+	      n *= 262144;
+	    else
+	    {
+	      cupsdLogMessage(CUPSD_LOG_ERROR,
+			      "Unknown integer value for %s on line %d of %s.",
+			      line, linenum, filename);
+	      return (0);
+	    }
+	  }
+
+	  if (n < 0)
+	  {
+	    cupsdLogMessage(CUPSD_LOG_ERROR,
+			    "Bad negative integer value for %s on line %d of "
+			    "%s.", line, linenum, filename);
+	    return (0);
+	  }
+	  else
+	  {
+	    *((int *)var->ptr) = n;
+	  }
+	}
+	break;
+
+    case CUPSD_VARTYPE_BOOLEAN :
+	if (!value)
+	{
+	  cupsdLogMessage(CUPSD_LOG_ERROR,
+			  "Missing boolean value for %s on line %d of %s.",
+			  line, linenum, filename);
+	  return (0);
+	}
+	else if (!_cups_strcasecmp(value, "true") ||
+		 !_cups_strcasecmp(value, "on") ||
+		 !_cups_strcasecmp(value, "enabled") ||
+		 !_cups_strcasecmp(value, "yes") ||
+		 atoi(value) != 0)
+	{
+	  *((int *)var->ptr) = TRUE;
+	}
+	else if (!_cups_strcasecmp(value, "false") ||
+		 !_cups_strcasecmp(value, "off") ||
+		 !_cups_strcasecmp(value, "disabled") ||
+		 !_cups_strcasecmp(value, "no") ||
+		 !_cups_strcasecmp(value, "0"))
+	{
+	  *((int *)var->ptr) = FALSE;
+	}
+	else
+	{
+	  cupsdLogMessage(CUPSD_LOG_ERROR,
+			  "Unknown boolean value %s on line %d of %s.",
+			  value, linenum, filename);
+	  return (0);
+	}
+	break;
+
+    case CUPSD_VARTYPE_PATHNAME :
+	if (!value)
+	{
+	  cupsdLogMessage(CUPSD_LOG_ERROR,
+			  "Missing pathname value for %s on line %d of %s.",
+			  line, linenum, filename);
+	  return (0);
+	}
+
+	if (value[0] == '/')
+	  strlcpy(temp, value, sizeof(temp));
+	else
+	  snprintf(temp, sizeof(temp), "%s/%s", ServerRoot, value);
+
+	if (access(temp, 0))
+	{
+	  cupsdLogMessage(CUPSD_LOG_ERROR,
+			  "File or directory for \"%s %s\" on line %d of %s "
+			  "does not exist.", line, value, linenum, filename);
+	  return (0);
+	}
+
+	cupsdSetString((char **)var->ptr, temp);
+	break;
+
+    case CUPSD_VARTYPE_STRING :
+	cupsdSetString((char **)var->ptr, value);
+	break;
+  }
+
+  return (1);
+}
+
+
+/*
+ * 'read_cupsd_conf()' - Read the cupsd.conf configuration file.
+ */
+
+static int				/* O - 1 on success, 0 on failure */
+read_cupsd_conf(cups_file_t *fp)	/* I - File to read from */
 {
-  int			i;		/* Looping var */
   int			linenum;	/* Current line number */
   char			line[HTTP_MAX_BUFFER],
 					/* Line from file */
@@ -2520,7 +2727,6 @@
 			*value,		/* Pointer to value */
 			*valueptr;	/* Pointer into value */
   int			valuelen;	/* Length of value */
-  cupsd_var_t const	*var;		/* Current variable */
   http_addrlist_t	*addrlist,	/* Address list */
 			*addr;		/* Current address */
   unsigned		ip[4],		/* Address value */
@@ -2530,7 +2736,6 @@
   cupsd_location_t	*location;	/* Browse location */
   cups_file_t		*incfile;	/* Include file */
   char			incname[1024];	/* Include filename */
-  struct group		*group;		/* Group */
 
 
  /*
@@ -2562,7 +2767,7 @@
 	                incname, strerror(errno));
       else
       {
-        read_configuration(incfile);
+        read_cupsd_conf(incfile);
 	cupsFileClose(incfile);
       }
     }
@@ -2586,8 +2791,6 @@
       if (linenum == 0)
 	return (0);
     }
-    else if (!_cups_strcasecmp(line, "FatalErrors"))
-      FatalErrors = parse_fatal_errors(value);
     else if (!_cups_strcasecmp(line, "FaxRetryInterval") && value)
     {
       JobRetryInterval = atoi(value);
@@ -3246,81 +3449,6 @@
       }
     }
 #endif /* HAVE_SSL */
-    else if (!_cups_strcasecmp(line, "User") && value)
-    {
-     /*
-      * User ID to run as...
-      */
-
-      if (isdigit(value[0] & 255))
-      {
-        int uid = atoi(value);
-
-	if (!uid)
-	  cupsdLogMessage(CUPSD_LOG_ERROR,
-	                  "Will not use User 0 as specified on line %d "
-			  "for security reasons.  You must use a non-"
-			  "privileged account instead.",
-	                  linenum);
-        else
-	  User = atoi(value);
-      }
-      else
-      {
-        struct passwd *p;	/* Password information */
-
-        endpwent();
-	p = getpwnam(value);
-
-	if (p)
-	{
-	  if (!p->pw_uid)
-	    cupsdLogMessage(CUPSD_LOG_ERROR,
-	                    "Will not use User %s (UID=0) as specified on line "
-			    "%d for security reasons.  You must use a non-"
-			    "privileged account instead.",
-	                    value, linenum);
-	  else
-	    User = p->pw_uid;
-	}
-	else
-	  cupsdLogMessage(CUPSD_LOG_ERROR,
-	                  "Unknown User \"%s\" on line %d, ignoring.",
-	                  value, linenum);
-      }
-    }
-    else if (!_cups_strcasecmp(line, "Group") && value)
-    {
-     /*
-      * Group ID to run as...
-      */
-
-      if (isdigit(value[0]))
-        Group = atoi(value);
-      else
-      {
-        endgrent();
-	group = getgrnam(value);
-
-	if (group != NULL)
-	  Group = group->gr_gid;
-	else
-	  cupsdLogMessage(CUPSD_LOG_ERROR,
-	                  "Unknown Group \"%s\" on line %d, ignoring.",
-	                  value, linenum);
-      }
-    }
-    else if (!_cups_strcasecmp(line, "SystemGroup") && value)
-    {
-     /*
-      * SystemGroup (admin) group(s)...
-      */
-
-      if (!parse_groups(value))
-	cupsdLogMessage(CUPSD_LOG_ERROR,
-	                "Unknown SystemGroup \"%s\" on line %d, ignoring.",
-	                value, linenum);
-    }
     else if (!_cups_strcasecmp(line, "HostNameLookups") && value)
     {
      /*
@@ -3399,22 +3527,6 @@
         cupsdLogMessage(CUPSD_LOG_WARN, "Unknown LogTimeFormat %s on line %d.",
 	                value, linenum);
     }
-    else if (!_cups_strcasecmp(line, "PrintcapFormat") && value)
-    {
-     /*
-      * Format of printcap file?
-      */
-
-      if (!_cups_strcasecmp(value, "bsd"))
-        PrintcapFormat = PRINTCAP_BSD;
-      else if (!_cups_strcasecmp(value, "plist"))
-        PrintcapFormat = PRINTCAP_PLIST;
-      else if (!_cups_strcasecmp(value, "solaris"))
-        PrintcapFormat = PRINTCAP_SOLARIS;
-      else
-	cupsdLogMessage(CUPSD_LOG_WARN, "Unknown PrintcapFormat %s on line %d.",
-	                value, linenum);
-    }
     else if (!_cups_strcasecmp(line, "ServerTokens") && value)
     {
      /*
@@ -3540,117 +3652,192 @@
 			"line %d.", value, linenum);
     }
 #endif /* HAVE_SSL */
+    else if (!_cups_strcasecmp(line, "AccessLog") ||
+             !_cups_strcasecmp(line, "CacheDir") ||
+             !_cups_strcasecmp(line, "ConfigFilePerm") ||
+             !_cups_strcasecmp(line, "DataDir") ||
+             !_cups_strcasecmp(line, "DocumentRoot") ||
+             !_cups_strcasecmp(line, "ErrorLog") ||
+             !_cups_strcasecmp(line, "FatalErrors") ||
+             !_cups_strcasecmp(line, "FileDevice") ||
+             !_cups_strcasecmp(line, "FontPath") ||
+             !_cups_strcasecmp(line, "Group") ||
+             !_cups_strcasecmp(line, "LogFilePerm") ||
+             !_cups_strcasecmp(line, "LPDConfigFile") ||
+             !_cups_strcasecmp(line, "PageLog") ||
+             !_cups_strcasecmp(line, "Printcap") ||
+             !_cups_strcasecmp(line, "PrintcapFormat") ||
+             !_cups_strcasecmp(line, "RemoteRoot") ||
+             !_cups_strcasecmp(line, "RequestRoot") ||
+             !_cups_strcasecmp(line, "ServerBin") ||
+             !_cups_strcasecmp(line, "ServerCertificate") ||
+             !_cups_strcasecmp(line, "ServerKey") ||
+             !_cups_strcasecmp(line, "ServerRoot") ||
+             !_cups_strcasecmp(line, "SMBConfigFile") ||
+             !_cups_strcasecmp(line, "StateDir") ||
+             !_cups_strcasecmp(line, "SystemGroup") ||
+             !_cups_strcasecmp(line, "SystemGroupAuthKey") ||
+             !_cups_strcasecmp(line, "TempDir") ||
+	     !_cups_strcasecmp(line, "User"))
+    {
+      cupsdLogMessage(CUPSD_LOG_WARN,
+		      "Please move \"%s%s%s\" on line %d of %s to the %s file; "
+		      "this will become an error in a future release.",
+		      line, value ? " " : "", value ? value : "", linenum,
+		      ConfigurationFile, CupsFilesFile);
+    }
     else
+      parse_variable(ConfigurationFile, linenum, line, value,
+                     sizeof(cupsd_vars) / sizeof(cupsd_vars[0]), cupsd_vars);
+  }
+
+  return (1);
+}
+
+/*
+ * 'read_cups_files_conf()' - Read the cups-files.conf configuration file.
+ */
+
+static int				/* O - 1 on success, 0 on failure */
+read_cups_files_conf(cups_file_t *fp)	/* I - File to read from */
+{
+  int		linenum;		/* Current line number */
+  char		line[HTTP_MAX_BUFFER],	/* Line from file */
+		*value;			/* Value from line */
+  struct group	*group;			/* Group */
+
+
+ /*
+  * Loop through each line in the file...
+  */
+
+  linenum = 0;
+
+  while (cupsFileGetConf(fp, line, sizeof(line), &value, &linenum))
+  {
+    if (!_cups_strcasecmp(line, "FatalErrors"))
+      FatalErrors = parse_fatal_errors(value);
+    else if (!_cups_strcasecmp(line, "Group") && value)
     {
      /*
-      * Find a simple variable in the list...
+      * Group ID to run as...
       */
 
-      for (i = NUM_VARS, var = variables; i > 0; i --, var ++)
-        if (!_cups_strcasecmp(line, var->name))
-	  break;
-
-      if (i == 0)
+      if (isdigit(value[0]))
+        Group = atoi(value);
+      else
       {
-       /*
-        * Unknown directive!  Output an error message and continue...
-	*/
+        endgrent();
+	group = getgrnam(value);
 
-        if (!value)
-	  cupsdLogMessage(CUPSD_LOG_ERROR, "Missing value for %s on line %d.",
-	                  line, linenum);
+	if (group != NULL)
+	  Group = group->gr_gid;
 	else
-	  cupsdLogMessage(CUPSD_LOG_ERROR, "Unknown directive %s on line %d.",
-	                  line, linenum);
-        continue;
+	{
+	  cupsdLogMessage(CUPSD_LOG_ERROR,
+	                  "Unknown Group \"%s\" on line %d of %s.", value,
+	                  linenum, CupsFilesFile);
+	  if (FatalErrors & CUPSD_FATAL_CONFIG)
+	    return (0);
+	}
       }
+    }
+    else if (!_cups_strcasecmp(line, "PrintcapFormat") && value)
+    {
+     /*
+      * Format of printcap file?
+      */
 
-      switch (var->type)
+      if (!_cups_strcasecmp(value, "bsd"))
+        PrintcapFormat = PRINTCAP_BSD;
+      else if (!_cups_strcasecmp(value, "plist"))
+        PrintcapFormat = PRINTCAP_PLIST;
+      else if (!_cups_strcasecmp(value, "solaris"))
+        PrintcapFormat = PRINTCAP_SOLARIS;
+      else
       {
-        case CUPSD_VARTYPE_INTEGER :
-	    if (!value)
-	      cupsdLogMessage(CUPSD_LOG_ERROR,
-	                      "Missing integer value for %s on line %d.",
-			      line, linenum);
-	    else
-	    {
-	      int	n;		/* Number */
-	      char	*units;		/* Units */
-
-
-              n = strtol(value, &units, 0);
-
-	      if (units && *units)
-	      {
-        	if (tolower(units[0] & 255) == 'g')
-		  n *= 1024 * 1024 * 1024;
-        	else if (tolower(units[0] & 255) == 'm')
-		  n *= 1024 * 1024;
-		else if (tolower(units[0] & 255) == 'k')
-		  n *= 1024;
-		else if (tolower(units[0] & 255) == 't')
-		  n *= 262144;
-	      }
-
-              if (n < 0)
-		cupsdLogMessage(CUPSD_LOG_ERROR,
-	                	"Bad negative integer value for %s on line %d.",
-				line, linenum);
-	      else
-		*((int *)var->ptr) = n;
-	    }
-	    break;
+	cupsdLogMessage(CUPSD_LOG_ERROR,
+	                "Unknown PrintcapFormat \"%s\" on line %d of %s.",
+	                value, linenum, CupsFilesFile);
+        if (FatalErrors & CUPSD_FATAL_CONFIG)
+          return (0);
+      }
+    }
+    else if (!_cups_strcasecmp(line, "SystemGroup") && value)
+    {
+     /*
+      * SystemGroup (admin) group(s)...
+      */
 
-	case CUPSD_VARTYPE_BOOLEAN :
-	    if (!value)
-	      cupsdLogMessage(CUPSD_LOG_ERROR,
-	                      "Missing boolean value for %s on line %d.",
-			      line, linenum);
-            else if (!_cups_strcasecmp(value, "true") ||
-	             !_cups_strcasecmp(value, "on") ||
-		     !_cups_strcasecmp(value, "enabled") ||
-		     !_cups_strcasecmp(value, "yes") ||
-		     atoi(value) != 0)
-              *((int *)var->ptr) = TRUE;
-	    else if (!_cups_strcasecmp(value, "false") ||
-	             !_cups_strcasecmp(value, "off") ||
-		     !_cups_strcasecmp(value, "disabled") ||
-		     !_cups_strcasecmp(value, "no") ||
-		     !_cups_strcasecmp(value, "0"))
-              *((int *)var->ptr) = FALSE;
-	    else
-              cupsdLogMessage(CUPSD_LOG_ERROR,
-	                      "Unknown boolean value %s on line %d.",
-	                      value, linenum);
-	    break;
+      if (!parse_groups(value))
+      {
+	cupsdLogMessage(CUPSD_LOG_ERROR,
+	                "Unknown SystemGroup \"%s\" on line %d of %s.", value,
+	                linenum, CupsFilesFile);
+        if (FatalErrors & CUPSD_FATAL_CONFIG)
+          return (0);
+      }
+    }
+    else if (!_cups_strcasecmp(line, "User") && value)
+    {
+     /*
+      * User ID to run as...
+      */
 
-	case CUPSD_VARTYPE_PATHNAME :
-            if (!value)
-	    {
-	      cupsdLogMessage(CUPSD_LOG_ERROR,
-	                      "Missing pathname value for %s on line %d.",
-			      line, linenum);
-              break;
-	    }
+      if (isdigit(value[0] & 255))
+      {
+        int uid = atoi(value);
 
-	    if (value[0] == '/')
-	      strlcpy(temp, value, sizeof(temp));
-	    else
-	      snprintf(temp, sizeof(temp), "%s/%s", ServerRoot, value);
+	if (!uid)
+	{
+	  cupsdLogMessage(CUPSD_LOG_ERROR,
+	                  "Will not use User 0 as specified on line %d of %s "
+			  "for security reasons.  You must use a non-"
+			  "privileged account instead.",
+	                  linenum, CupsFilesFile);
+          if (FatalErrors & CUPSD_FATAL_CONFIG)
+            return (0);
+        }
+        else
+	  User = atoi(value);
+      }
+      else
+      {
+        struct passwd *p;	/* Password information */
 
-            if (access(temp, 0))
-	    {
-	      cupsdLogMessage(CUPSD_LOG_ERROR,
-	                      "File or directory for \"%s %s\" on line %d "
-			      "does not exist.", line, value, linenum);
-              break;
-	    }
+        endpwent();
+	p = getpwnam(value);
 
-	case CUPSD_VARTYPE_STRING :
-	    cupsdSetString((char **)var->ptr, value);
-	    break;
+	if (p)
+	{
+	  if (!p->pw_uid)
+	  {
+	    cupsdLogMessage(CUPSD_LOG_ERROR,
+	                    "Will not use User %s (UID=0) as specified on line "
+			    "%d of %s for security reasons.  You must use a "
+			    "non-privileged account instead.",
+	                    value, linenum, CupsFilesFile);
+	    if (FatalErrors & CUPSD_FATAL_CONFIG)
+	      return (0);
+	  }
+	  else
+	    User = p->pw_uid;
+	}
+	else
+	{
+	  cupsdLogMessage(CUPSD_LOG_ERROR,
+	                  "Unknown User \"%s\" on line %d of %s.",
+	                  value, linenum, CupsFilesFile);
+          if (FatalErrors & CUPSD_FATAL_CONFIG)
+            return (0);
+        }
       }
     }
+    else if (!parse_variable(CupsFilesFile, linenum, line, value,
+			     sizeof(cupsfiles_vars) / sizeof(cupsfiles_vars[0]),
+			     cupsfiles_vars) &&
+	     (FatalErrors & CUPSD_FATAL_CONFIG))
+      return (0);
   }
 
   return (1);
--- a/scheduler/conf.h
+++ b/scheduler/conf.h
@@ -96,7 +96,9 @@
  */
 
 VAR char		*ConfigurationFile	VALUE(NULL),
-					/* Configuration file to use */
+					/* cupsd.conf file to use */
+			*CupsFilesFile		VALUE(NULL),
+					/* cups-files.conf file to use */
 			*ServerName		VALUE(NULL),
 					/* FQDN for server */
 			*ServerAdmin		VALUE(NULL),
--- a/scheduler/main.c
+++ b/scheduler/main.c
@@ -234,6 +234,35 @@
 		cupsdSetStringf(&ConfigurationFile, "%s/%s", current, argv[i]);
 		free(current);
               }
+
+	      if (!CupsFilesFile)
+	      {
+	        char	*filename,	/* Copy of cupsd.conf filename */
+			*slash;		/* Final slash in cupsd.conf filename */
+		size_t	len;		/* Size of buffer */
+
+		len = strlen(ConfigurationFile) + 15;
+		if ((filename = malloc(len)) == NULL)
+		{
+		  _cupsLangPrintf(stderr,
+		                  _("cupsd: Unable to get path to "
+		                    "cups-files.conf file."));
+                  return (1);
+		}
+
+		strlcpy(filename, ConfigurationFile, len);
+		if ((slash = strrchr(filename, '/')) == NULL)
+		{
+		  _cupsLangPrintf(stderr,
+		                  _("cupsd: Unable to get path to "
+		                    "cups-files.conf file."));
+                  return (1);
+		}
+
+		strlcpy(slash, "/cups-files.conf", len - (slash - filename));
+		cupsdSetString(&CupsFilesFile, filename);
+		free(filename);
+	      }
 	      break;
 
           case 'f' : /* Run in foreground... */
@@ -272,6 +301,29 @@
 	      UseProfiles = 0;
 	      break;
 
+          case 's' : /* Set cups-files.conf location */
+              i ++;
+	      if (i >= argc)
+	      {
+	        _cupsLangPuts(stderr, _("cupsd: Expected cups-files.conf "
+	                                "filename after \"-s\" option."));
+	        usage(1);
+	      }
+
+              if (argv[i][0] != '/')
+	      {
+	       /*
+	        * Relative filename not allowed...
+		*/
+
+	        _cupsLangPuts(stderr, _("cupsd: Relative cups-files.conf "
+	                                "filename not allowed."));
+	        usage(1);
+              }
+
+	      cupsdSetString(&CupsFilesFile, argv[i]);
+	      break;
+
 #ifdef __APPLE__
           case 'S' : /* Disable system management functions */
               fputs("cupsd: -S (disable system management) for internal "
@@ -299,7 +351,10 @@
     }
 
   if (!ConfigurationFile)
+  {
     cupsdSetString(&ConfigurationFile, CUPS_SERVERROOT "/cupsd.conf");
+    cupsdSetString(&CupsFilesFile, CUPS_SERVERROOT "/cups-files.conf");
+  }
 
  /*
   * If the user hasn't specified "-f", run in the background...
--- a/test/run-stp-tests.sh
+++ b/test/run-stp-tests.sh
@@ -337,25 +337,10 @@
 
 cat >/tmp/cups-$user/cupsd.conf <<EOF
 Browsing Off
-FileDevice yes
-Printcap
 Listen 127.0.0.1:$port
-User $user
-ServerRoot /tmp/cups-$user
-StateDir /tmp/cups-$user
-ServerBin /tmp/cups-$user/bin
-CacheDir /tmp/cups-$user/share
-DataDir /tmp/cups-$user/share
-FontPath /tmp/cups-$user/share/fonts
 PassEnv LOCALEDIR
-DocumentRoot $root/doc
-RequestRoot /tmp/cups-$user/spool
-TempDir /tmp/cups-$user/spool/temp
 MaxSubscriptions 3
 MaxLogSize 0
-AccessLog /tmp/cups-$user/log/access_log
-ErrorLog /tmp/cups-$user/log/error_log
-PageLog /tmp/cups-$user/log/page_log
 AccessLogLevel actions
 LogLevel debug2
 LogTimeFormat usecs
@@ -370,6 +355,24 @@
 </Policy>
 EOF
 
+cat >/tmp/cups-$user/cups-files.conf <<EOF
+FileDevice yes
+Printcap
+User $user
+ServerRoot /tmp/cups-$user
+StateDir /tmp/cups-$user
+ServerBin /tmp/cups-$user/bin
+CacheDir /tmp/cups-$user/share
+DataDir /tmp/cups-$user/share
+FontPath /tmp/cups-$user/share/fonts
+DocumentRoot $root/doc
+RequestRoot /tmp/cups-$user/spool
+TempDir /tmp/cups-$user/spool/temp
+AccessLog /tmp/cups-$user/log/access_log
+ErrorLog /tmp/cups-$user/log/error_log
+PageLog /tmp/cups-$user/log/page_log
+EOF
+
 #
 # Setup lots of test queues - half with PPD files, half without...
 #
