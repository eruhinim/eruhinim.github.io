From 6bb492660bb8e78e3b9ed47b55d10eafcb01da93 Mon Sep 17 00:00:00 2001
From: Roger Leigh <rleigh@debian.org>
Date: Fri, 3 Jun 2011 20:42:50 +0100
Subject: [PATCH 2/2] dh: Add hook support

---
 dh |   67 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 files changed, 67 insertions(+), 0 deletions(-)

diff --git a/dh b/dh
index e7b6721..a0ff637 100755
--- a/dh
+++ b/dh
@@ -32,6 +32,18 @@ target. The override target can then run the command with additional options,
 or run entirely different commands instead. See examples below. (Note that to
 use this feature, you should Build-Depend on debhelper 7.0.50 or above.)
 
+If F<debian/rules> contains a target with a name like
+I<dh_command>B<_hook>, I<dh_command>B<_indep_hook> or
+I<dh_command>B<_arch_hook>, these targets will be called I<after>
+I<dh_command> has been run.  I<dh_command_hook> will be run for all
+packages, while I<dh_command_indep_hook> will only be run for
+architecture independent packages and I<dh_command_arch_hook> will
+only be run for architecture dependent packages.  The hook targets may
+be used to run additional commands after the I<dh_command> has
+run. See examples below. (Note that to use this feature, you should
+Build-Depend on debhelper 8.1.0 or above.)
+
+
 =head1 OPTIONS
 
 =over 4
@@ -249,6 +261,31 @@ L<dh_listpackages(1)> to test what is being built. For example:
 		chmod 4755 debian/foo/usr/bin/foo
 	endif
 
+Or using a hook, run after dh_fixperms:
+
+	#!/usr/bin/make -f
+	%:
+		dh $@
+
+	dh_fixperms_hook:
+	ifneq (,$(filter foo, $(shell dh_listpackages)))
+		chmod 4755 debian/foo/usr/bin/foo
+	endif
+
+It may also be possible to do this more simply using a more specific
+hook:
+
+	#!/usr/bin/make -f
+	%:
+		dh $@
+
+	dh_fixperms_arch_hook:
+		chmod 4755 debian/foo/usr/bin/foo
+
+This is for the case where foo is an architecture dependent package;
+if foo is an architecture independent package then
+dh_fixperms_indep_hook would be the correct target to use.
+
 Finally, remember that you are not limited to using override targets in the
 rules file when using B<dh>. You can also explicitly define the regular
 rules file targets when it makes sense to do so. A common reason to do this
@@ -269,6 +306,15 @@ B<build-indep>.
 	build-arch:
 		$(MAKE) bins
 
+Or alternatively, using hooks:
+
+	dh_auto_build_indep_hook:
+		$(MAKE) docs
+
+	dh_auto_build_arch_hook:
+		$(MAKE) bins
+
+
 =head1 INTERNALS
 
 If you're curious about B<dh>'s internals, here's how it works under the hood.
@@ -707,6 +753,27 @@ sub run {
 			}
 		}
 	}
+
+	if ($command ne 'debian/rules') {
+	    if ($arch || $indep) {
+		$has_explicit_target = rules_explicit_target($orig_command."_hook");
+		if (defined $has_explicit_target) {
+		    run_hook($orig_command."_hook", \@packages, \@exclude, @options);
+		}
+	    }
+	    if ($arch) {
+		$has_explicit_target = rules_explicit_target($orig_command."_arch_hook");
+		if (defined $has_explicit_target) {
+		    run_hook($orig_command."_arch_hook", \@packages, \@exclude, @options);
+		}
+	    }
+	    if ($indep) {
+		$has_explicit_target = rules_explicit_target($orig_command."_indep_hook");
+		if (defined $has_explicit_target) {
+		    run_hook($orig_command."_indep_hook", \@packages, \@exclude, @options);
+		}
+	    }
+	}
 }
 
 sub run_hook {
-- 
1.7.5.3

