Index: apt/methods/https.cc
===================================================================
--- apt.orig/methods/https.cc	2011-03-09 15:54:49.000000000 +0200
+++ apt/methods/https.cc	2011-03-09 15:56:51.000000000 +0200
@@ -99,7 +99,6 @@
 bool HttpsMethod::Fetch(FetchItem *Itm)
 {
    stringstream ss;
-   struct stat SBuf;
    struct curl_slist *headers=NULL;  
    char curl_errorstr[CURL_ERROR_SIZE];
    long curl_responsecode;
@@ -249,25 +248,20 @@
    // error handling
    curl_easy_setopt(curl, CURLOPT_ERRORBUFFER, curl_errorstr);
 
-   // if we have the file send an if-range query with a range header
-   if (stat(Itm->DestFile.c_str(),&SBuf) >= 0 && SBuf.st_size > 0)
-   {
-      char Buf[1000];
-      sprintf(Buf,"Range: bytes=%li-\r\nIf-Range: %s\r\n",
-	      (long)SBuf.st_size - 1,
-	      TimeRFC1123(SBuf.st_mtime).c_str());
-      headers = curl_slist_append(headers, Buf);
-   } 
-   else if(Itm->LastModified > 0)
+   if(Itm->LastModified > 0)
    {
       curl_easy_setopt(curl, CURLOPT_TIMECONDITION, CURL_TIMECOND_IFMODSINCE);
       curl_easy_setopt(curl, CURLOPT_TIMEVALUE, Itm->LastModified);
    }
 
-   // go for it - if the file exists, append on it
+   // go for it
+
+   // XXX - If the file exists, we replace it completely.  using a
+   //       range request would be better, but then we need to handle
+   //       all the possible responses to it, which doesn't seem to be
+   //       entirely trivial.
+
    File = new FileFd(Itm->DestFile, FileFd::WriteAny);
-   if (File->Size() > 0)
-      File->Seek(File->Size() - 1);
    
    // keep apt updated
    Res.Filename = Itm->DestFile;
