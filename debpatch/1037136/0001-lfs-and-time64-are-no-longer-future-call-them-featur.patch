From 5a861d19b1610ae82bf95e6c5142a3365436fbd2 Mon Sep 17 00:00:00 2001
From: Steve Langasek <steve.langasek@ubuntu.com>
Date: Fri, 2 Jun 2023 14:30:20 +0000
Subject: [PATCH 1/3] lfs and time64 are no longer "future", call them
 "feature" instead

Recognize future= for backwards compatibility.
---
 scripts/Dpkg/Vendor/Debian.pm | 32 ++++++++++++++++++++++----------
 scripts/t/Dpkg_BuildFlags.t   |  2 +-
 2 files changed, 23 insertions(+), 11 deletions(-)

diff --git a/scripts/Dpkg/Vendor/Debian.pm b/scripts/Dpkg/Vendor/Debian.pm
index 9285a61cf..f3d81bcc2 100644
--- a/scripts/Dpkg/Vendor/Debian.pm
+++ b/scripts/Dpkg/Vendor/Debian.pm
@@ -105,10 +105,14 @@ sub set_build_features {
 
     # Default feature states.
     my %use_feature = (
-        future => {
+        feature => {
             lfs => 0,
             time64 => 0,
         },
+        future => {
+            lfs => -1,
+            time64 => -1,
+        },
         qa => {
             bug => 0,
             canary => 0,
@@ -172,9 +176,17 @@ sub set_build_features {
         ($abi, $os, $cpu) = ('', '', '');
     }
 
-    ## Area: future
+    # compatibility: map future=[+-]lfs,time64 onto 'feature'
+    if ((my $flag = $use_feature{future}{lfs}) != -1) {
+        $use_feature{feature}{lfs} = $flag;
+    }
+    if ((my $flag = $use_feature{future}{time64}) != -1) {
+        $use_feature{feature}{time64} = $flag;
+    }
+    
+    ## Area: feature
 
-    if ($use_feature{future}{time64}) {
+    if ($use_feature{feature}{time64}) {
         # On glibc, new ports default to time64, old ports currently default
         # to time32, so we track the latter as that is a list that is not
         # going to grow further, and might shrink.
@@ -211,16 +223,16 @@ sub set_build_features {
         if ($abi_bits != 32 or
             not exists $time32_arch{$arch} or
             $libc eq 'musl') {
-            $use_feature{future}{time64} = 0;
+            $use_feature{feature}{time64} = 0;
         } elsif ($libc eq 'gnu') {
             # On glibc 64-bit time_t support requires LFS.
-            $use_feature{future}{lfs} = 1;
+            $use_feature{feature}{lfs} = 1;
         }
     }
 
-    if ($use_feature{future}{lfs}) {
+    if ($use_feature{feature}{lfs}) {
         if ($abi_bits != 32) {
-            $use_feature{future}{lfs} = 0;
+            $use_feature{feature}{lfs} = 0;
         }
     }
 
@@ -375,14 +387,14 @@ sub _add_build_flags {
     $flags->append($_, $default_flags) foreach @compile_flags;
     $flags->append('DFLAGS', $default_d_flags);
 
-    ## Area: future
+    ## Area: feature
 
-    if ($flags->use_feature('future', 'lfs')) {
+    if ($flags->use_feature('feature', 'lfs')) {
         $flags->append('CPPFLAGS',
                        '-D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64');
     }
 
-    if ($flags->use_feature('future', 'time64')) {
+    if ($flags->use_feature('feature', 'time64')) {
         $flags->append('CPPFLAGS', '-D_TIME_BITS=64');
     }
 
diff --git a/scripts/t/Dpkg_BuildFlags.t b/scripts/t/Dpkg_BuildFlags.t
index 850fe28b8..d64c54bfd 100644
--- a/scripts/t/Dpkg_BuildFlags.t
+++ b/scripts/t/Dpkg_BuildFlags.t
@@ -85,7 +85,7 @@ is($bf->get_origin('DPKGFLAGS'), 'env', 'flag has an env origin');
 ok($bf->is_maintainer_modified('DPKGFLAGS'), 'prepend marked flag as maint modified');
 
 my %known_features = (
-    future => [ qw(
+    feature => [ qw(
         lfs
         time64
     ) ],
-- 
2.40.1

