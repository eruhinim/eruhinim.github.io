diff -Nru cfingerd-1.4.3/CREDITS cfingerd-1.4.3/CREDITS
--- cfingerd-1.4.3/CREDITS	2010-04-28 01:11:52.000000000 +0200
+++ cfingerd-1.4.3/CREDITS	1999-08-29 19:45:44.000000000 +0200
@@ -48,7 +48,7 @@
 	- Shadow password testing
 	- Secure (NOBODY PATCH) finger help
 
-David Muench <cc@spork.neonexus.com>
+cc@spork.neonexus.com
 	- Finger forwarding idea
 
 Rich Salz <rsalz@uunet.net>
@@ -76,13 +76,3 @@
 
 Alexey M. Zelkin <phantom@cris.net>
 	- Support for FreeBSD
-
-Kevin Rosenberg <kevin@cyberport.com>
-	- Get UTMP file entries for BSD compatibility
-
-Thomas Koenig <ig25@rz.uni-karlsruhe.de>
-	- Management of e?uid switching
-
-Lars Mathiesen <thorinn@diku.dk>
-	- ABORT code for wildmat
-
diff -Nru cfingerd-1.4.3/debian/cfingerd.xinetd cfingerd-1.4.3/debian/cfingerd.xinetd
--- cfingerd-1.4.3/debian/cfingerd.xinetd	1970-01-01 01:00:00.000000000 +0100
+++ cfingerd-1.4.3/debian/cfingerd.xinetd	2010-04-27 18:05:53.000000000 +0200
@@ -0,0 +1,13 @@
+service finger
+{
+	disable = no
+	socket_type = stream
+	protocol = tcp
+	flags = IPv6
+	wait = no
+	user = root
+	server = /usr/sbin/cfingerd
+	log_type = SYSLOG daemon info
+	log_on_success = HOST
+	log_on_failure = HOST
+}
diff -Nru cfingerd-1.4.3/debian/changelog cfingerd-1.4.3/debian/changelog
--- cfingerd-1.4.3/debian/changelog	2010-04-28 01:11:52.000000000 +0200
+++ cfingerd-1.4.3/debian/changelog	2010-04-28 01:00:11.000000000 +0200
@@ -1,3 +1,26 @@
+cfingerd (1.4.3-2.2) unstable; urgency=low
+
+  * Non-maintainer upload.
+  * Migration to format "3.0 (quilt)".
+    + Previous patches to source are collected in 'debian/patches/'.
+  * Standards 3.8.4, compatibility 7.
+  * debian/control:
+    + Homepage stanza for source package.
+  * debian/watch: New file.
+  * debian/rules: Use dh_strip and dh_md5sums.
+    + Source package build depends on debhelper (>= 7).
+    + Add ${misc:Depends} to binary dependencies.
+  * Implement support for IPv6.
+    + Closes: #570024.
+    + debian/patches/15-ipv6_support.diff: New file.
+  * debian/cfingerd.xinetd: New file, configuration example.
+  * [lintian] Incorrect groff rendering, spelling:
+    + debian/patches/10-manpage_macros.diff: New file.
+  * [lintian] debian/changelog: Reformat old entries.
+  * [lintian] debian/postrm: 'maintainer-script-ignores-errors'.
+
+ -- Mats Erik Andersson <mats.andersson@gisladisker.se>  Wed, 28 Apr 2010 00:58:49 +0200
+
 cfingerd (1.4.3-2.1) unstable; urgency=medium
 
   * Non-maintainer upload.
@@ -89,7 +112,7 @@
 
  -- Martin Schulze <joey@finlandia.infodrom.north.de>  Sun, 29 Aug 1999 20:16:14 +0200
 
-cfingerd (1.4.0-1) unstable; urgency=high, closes=39574 33667
+cfingerd (1.4.0-1) unstable; urgency=high
 
   * New upstream version
   * Russ Coker's patch wrt. qmail was applied (closes: Bug#39574)
@@ -99,7 +122,7 @@
 
  -- Martin Schulze <joey@finlandia.infodrom.north.de>  Mon,  9 Aug 1999 12:04:18 +0200
 
-cfingerd (1.3.2-19) unstable; urgency=low, closes=33408 32924
+cfingerd (1.3.2-19) unstable; urgency=low
 
   * Fixed bug wrt empty .plan files (closes: Bug#33408)
   * Also added -g to Makefiles.
@@ -108,14 +131,14 @@
 
  -- Martin Schulze <joey@finlandia.infodrom.north.de>  Mon, 15 Feb 1999 21:02:12 +0100
 
-cfingerd (1.3.2-18) frozen unstable; urgency=low, closes=31488 31489
+cfingerd (1.3.2-18) frozen unstable; urgency=low
 
   * Corrected mail directory to /var/spool in conffile (closes: Bug#31488)
   * Corrected current year to 1999 in all banner files (closes: Bug#31489)
 
  -- Martin Schulze <joey@finlandia.infodrom.north.de>  Wed,  6 Jan 1999 00:34:14 +0100
 
-cfingerd (1.3.2-17) frozen unstable; urgency=medium, closes=31243
+cfingerd (1.3.2-17) frozen unstable; urgency=medium
 
   * cfingerd now uses the same IP number on which it receives a request to
     connect to a remote ident server.  Thanks for help from Torsten
@@ -124,7 +147,7 @@
 
  -- Martin Schulze <joey@finlandia.infodrom.north.de>  Tue,  5 Jan 1999 01:18:18 +0100
 
-cfingerd (1.3.2-16) frozen unstable; urgency=low, closes=24904 24969 27779 24897 24895
+cfingerd (1.3.2-16) frozen unstable; urgency=low
 
   * Increased limit of tty per user, now I'm fingerable again. :)
   * Don't cut off random parts of the domain when it's too long, cut it at
@@ -151,21 +174,21 @@
 
  -- Martin Schulze <joey@finlandia.infodrom.north.de>  Sat, 19 Dec 1998 18:34:09 +0100
 
-cfingerd (1.3.2-15) unstable; urgency=low, closes=28479
+cfingerd (1.3.2-15) unstable; urgency=low
 
   * Fixed thinko in src/userlist.c which caused userlist to stop
     working. (closes: Bug#28479)
 
  -- Martin Schulze <joey@finlandia.infodrom.north.de>  Sat, 24 Oct 1998 15:45:53 +0200
 
-cfingerd (1.3.2-14) unstable; urgency=low, closes=28142
+cfingerd (1.3.2-14) unstable; urgency=low
 
   * Fixed typo in userlist/display.c which crashed userlist (closes: Bug#28142)
   * Fixed thinko in postrm
 
  -- Martin Schulze <joey@finlandia.infodrom.north.de>  Thu, 22 Oct 1998 12:55:48 +0200
 
-cfingerd (1.3.2-12) unstable; urgency=medium, closes=24898 24903 24905 24906 24907 24908 24909 24901 24964 24965 24966 25849
+cfingerd (1.3.2-12) unstable; urgency=medium
 
   * Converted all dangerous occurrances of sprintf() to snprintf()
   * Converted all dangerous occurrances of strcpy() to strncpy()
@@ -198,13 +221,13 @@
 
  -- John Goerzen <jgoerzen@complete.org>  Thu, 23 Jul 1998 22:16:40 -0500
 
-cfingerd (1.3.2-11) frozen unstable; urgency=low, closes=23050
+cfingerd (1.3.2-11) frozen unstable; urgency=low
 
   * Added /etc/cron.weekly/cfingerd as conffile (closes: Bug#23050)
 
  -- Martin Schulze <joey@finlandia.infodrom.north.de>  Mon, 8 Jun 1998 01:40:28 +0200
 
-cfingerd (1.3.2-10) frozen unstable; urgency=low, closes=23039 22816
+cfingerd (1.3.2-10) frozen unstable; urgency=low
 
   * Added support for non-world-writable tty's owned by group tty (closes:
     Bug#23039)
@@ -217,7 +240,7 @@
 
  -- Martin Schulze <joey@finlandia.infodrom.north.de>  Sun, 31 May 1998 22:53:49 +0200
 
-cfingerd (1.3.2-9) frozen unstable; urgency=medium, closes=21230 21566
+cfingerd (1.3.2-9) frozen unstable; urgency=medium
 
   * Corrected search_fake() which depended on 80 char strings but received
     a 100 character one.  (closes: Bug#21230)
@@ -230,7 +253,7 @@
 
  -- Martin Schulze <joey@finlandia.infodrom.north.de>  Tue, 12 May 1998 00:52:11 +0200
 
-cfingerd (1.3.2-8) frozen unstable; urgency=low, closes=19982
+cfingerd (1.3.2-8) frozen unstable; urgency=low
 
   * Priority switched to extra as of request by IanJ
   * Moved scripts from /etc to /usr/doc
@@ -240,7 +263,7 @@
 
  -- Martin Schulze <joey@finlandia.infodrom.north.de>  Sat, 11 Apr 1998 10:16:50 +0200
 
-cfingerd (1.3.2-7) unstable; urgency=low, closes=19121 19200
+cfingerd (1.3.2-7) unstable; urgency=low
 
   * Removed setuid bit from userlist (lintian)
   * Corrected ownership for control scripts (lintian)
@@ -254,20 +277,20 @@
   
  -- Martin Schulze <joey@finlandia.infodrom.north.de>  Tue, 10 Mar 1998 05:52:52 +0100
 
-cfingerd (1.3.2-6) unstable; urgency=low, closes=17639
+cfingerd (1.3.2-6) unstable; urgency=low
   
   * Corrected FSF's address (lintian)
   * Flagged SIGPIPE as fatal (closes: Bug#17639)
   
-  -- Martin Schulze <joey@finlandia.infodrom.north.de>  Wed, 11 Feb 1998 11:27:06 +0100
+ -- Martin Schulze <joey@finlandia.infodrom.north.de>  Wed, 11 Feb 1998 11:27:06 +0100
 
-cfingerd (1.3.2-5) unstable; urgency=low, closes=16752
+cfingerd (1.3.2-5) unstable; urgency=low
 
   * Corrected Standards-Version to 2.3.0.1 (Bug#16752)
 
  -- Martin Schulze <joey@finlandia.infodrom.north.de>  Fri, 9 Jan 1998 01:59:25 +0100
 
-cfingerd (1.3.2-4) unstable; urgency=low, closes=12405 14546 16244
+cfingerd (1.3.2-4) unstable; urgency=low
 
   * Changed tail +3 to tail +2 in src/usrlist.c (Bug#12405)
   * Linked against libc6
@@ -324,76 +347,76 @@
 
  -- Martin Schulze <joey@infodrom.north.de>  Fri, 21 Feb 1997 08:56:45 +0100
 
-Sat Sep 14 00:10:39 1996  Martin Schulze  <joey@finlandia.infodrom.north.de>
-
-	* src/search.c: If the internal search.*@ is used the whole GCOS
-	field won't be sent out anymore.
-
-	* Approved llucius' changes to compile under m68k as well (only
-	removing -m486 from Makefiles).  Thanks to Leeland Lucius
-	<llucius@millcomm.com> for providing me with a patch.
-
-	* src/standard.c: Changed identification of MSG-N. Thanks to Joerg
-	Kleuver <kleuver@shadowgate.rhein.de> who pointed me to the
-	mistake and provided me with a fix.
-
-	* debian.rules: Merged Debian release and Infodrom release together.
-
-Thu Jun 27 09:59:45 1996  Martin Schulze  <joey@finlandia.infodrom.north.de>
-
-	* Edited Description field (thanks to Susan Kleinmann
-	(sgk@sgk.tiac.net)
-
-Wed Jun 12 23:37:32 1996  Martin Schulze  <joey@finlandia.infodrom.north.de>
-
-	* changed description (Bug#3250)
+cfingerd (1.2.*-*) unstable; urgency=low
 
-Tue May 21 09:55:00 1996  Martin Schulze  <joey@finlandia.infodrom.north.de>
+  * (Early changelog stanzas reconstructed on April 27th, 2010.)
+  * src/search.c: If the internal search.*@ is used the whole GCOS
+    field won't be sent out anymore.
+  * Approved llucius' changes to compile under m68k as well (only
+    removing -m486 from Makefiles).  Thanks to Leeland Lucius
+    <llucius@millcomm.com> for providing me with a patch.
+  * src/standard.c: Changed identification of MSG-N. Thanks to Joerg
+    Kleuver <kleuver@shadowgate.rhein.de> who pointed me to the
+    mistake and provided me with a fix.
+  * debian.rules: Merged Debian release and Infodrom release together.
 
-	* debian.rules: Corrected permission problem
+ -- Martin Schulze <joey@finlandia.infodrom.north.de>  Thu, 27 Jun 1996 09:59:45 +0100
 
-Wed May 16 22:13:31 1996  Martin Schulze  <joey@finlandia.infodrom.north.de>
+cfingerd (1.*.*-*) unstable; urgency=low
 
-	* Added handling of user and group ids. Programs are called as
-	nobody.nogroup, files are read with the same permissins, but user
-	logfiles are written with user priviliges. Added privs.h - idea and
-	source mostly taken from T-Rex' file.
+  * Edited Description field (thanks to Susan Kleinmann
+    (sgk@sgk.tiac.net)
 
-	Commented out odd checks about uid/euid.
+ -- Martin Schulze <joey@finlandia.infodrom.north.de>  Wed, 12 Jun 1996 23:37:32 +0100
 
-	Commented out unused routines become_nobody() and become_user().
+cfingerd (1.*.*-*) unstable; urgency=low
 
-Wed May 15 20:05:53 1996  Martin Schulze  <joey@finlandia.infodrom.north.de>
+  * changed description (Bug#3250)
 
-	* Corrected local hostname.
+ -- Martin Schulze <joey@finlandia.infodrom.north.de>  Tue, 21 May 1996 09:55:00 +0100
 
-	* Modified the search.<key>@ service to work properly, which
-	wasn't the case before.
+cfingerd (1.*.*-*) unstable; urgency=low
 
-	* Corrected the output of HEADER_FILE and FOOTER_FILE in some
-	places, see diff-file for details.
+  * debian.rules: Corrected permission problem
 
-	* Altered the behaviour of NO_NAME_BANNER and NO_USER_BANNER.
+ -- Martin Schulze <joey@finlandia.infodrom.north.de>  Wed, 16 May 1996 22:13:31 +0100
 
-	* changed from /var/adm/{lastlog,wtmp} to /var/log/{lastlog,wtmp}
-	in Configure script.
+cfingerd (1.*.*-*) unstable; urgency=low
 
-	* Added special handling of forward requests: "Finger forwarding
-	service denied." Added string variable to /etc/cfingerd.conf:
-	FORWARD_DENY.
+  * Added handling of user and group ids. Programs are called as
+    nobody.nogroup, files are read with the same permissins, but user
+    logfiles are written with user priviliges. Added privs.h - idea and
+    source mostly taken from T-Rex' file.
+  * Commented out odd checks about uid/euid.
+  * Commented out unused routines become_nobody() and become_user().
 
-	* Increased the size of syslog_str, becaus if it is too short username
-	will be overwritten.
+ -- Martin Schulze <joey@finlandia.infodrom.north.de>  Wed, 15 May 1996 20:05:53 +0100
 
-	* Changed some manpages to fit into the Linux manpages structure.
-	Changed some sections.
+cfingerd (1.*.*-*) unstable; urgency=low
 
-	* Hostnames are no longer case-sensitive.
+  * Corrected local hostname.
+  * Modified the search.<key>@ service to work properly, which
+    wasn't the case before.
+  * Corrected the output of HEADER_FILE and FOOTER_FILE in some
+    places, see diff-file for details.
+  * Altered the behaviour of NO_NAME_BANNER and NO_USER_BANNER.
+  * changed from /var/adm/{lastlog,wtmp} to /var/log/{lastlog,wtmp}
+    in Configure script.
+  * Added special handling of forward requests: "Finger forwarding
+    service denied." Added string variable to /etc/cfingerd.conf:
+    FORWARD_DENY.
+  * Increased the size of syslog_str, becaus if it is too short username
+    will be overwritten.
+  * Changed some manpages to fit into the Linux manpages structure.
+    Changed some sections.
+  * Hostnames are no longer case-sensitive.
+  * Removed some options for userlist, because they're only
+    confusing and not supported yet.
 
-	* Removed some options for userlist, because they're only
-	confusing and not supported yet.
+ -- Martin Schulze <joey@finlandia.infodrom.north.de>  Wed, 5 May 1996 13:20:21 +0100
 
-Wed May 5 13:20:21 1996  Martin Schulze  <joey@finlandia.infodrom.north.de>
+cfingerd (1.*.*-*) unstable; urgency=low
 
-	* Added Debian packaging files.
+  * Added Debian packaging files.
 
+ -- Martin Schulze <joey@finlandia.infodrom.north.de>  Sat, 14 Sep 1996 00:10:39 +0100
diff -Nru cfingerd-1.4.3/debian/compat cfingerd-1.4.3/debian/compat
--- cfingerd-1.4.3/debian/compat	1970-01-01 01:00:00.000000000 +0100
+++ cfingerd-1.4.3/debian/compat	2010-04-27 19:44:35.000000000 +0200
@@ -0,0 +1 @@
+7
diff -Nru cfingerd-1.4.3/debian/control cfingerd-1.4.3/debian/control
--- cfingerd-1.4.3/debian/control	2010-04-28 01:11:52.000000000 +0200
+++ cfingerd-1.4.3/debian/control	2010-04-27 21:50:21.000000000 +0200
@@ -2,13 +2,15 @@
 Section: net
 Priority: extra
 Maintainer: Martin Schulze <joey@debian.org>
-Standards-Version: 3.5.10
+Standards-Version: 3.8.4
+Build-Depends: debhelper (>= 7)
+Homepage: http://www.infodrom.org/projects/cfingerd/
 
 Package: cfingerd
 Architecture: any
 Provides: finger-server
 Conflicts: finger-server
-Depends: ${shlibs:Depends}, update-inetd, netbase (>=2.00)
+Depends: ${shlibs:Depends}, ${misc:Depends}, update-inetd, netbase (>=2.00)
 Description: configurable finger daemon
  This is a free replacement for standard finger daemons such as GNU
  fingerd and MIT fingerd.  Cfingerd can enable/disable finger services
diff -Nru cfingerd-1.4.3/debian/patches/01-from_early_woody.diff cfingerd-1.4.3/debian/patches/01-from_early_woody.diff
--- cfingerd-1.4.3/debian/patches/01-from_early_woody.diff	1970-01-01 01:00:00.000000000 +0100
+++ cfingerd-1.4.3/debian/patches/01-from_early_woody.diff	2010-04-27 17:03:22.000000000 +0200
@@ -0,0 +1,110 @@
+Description: Patches recovered from cfingerd_1.4.3-1.1.diff.gz
+Author: Martin Schulze <joey@finlandia.infodrom.north.de>
+        Matt Zimmerman <mdz@debian.org>
+Forwarded: no
+Last-Update: 2001-08-11
+--- cfingerd-1.4.3.orig/docs/cfingerd.8
++++ cfingerd-1.4.3/docs/cfingerd.8
+@@ -33,7 +33,7 @@
+ is a totally new, and totally configurable finger daemon \- 
+ one of the first.  It listenes on the finger port (port 79) to provide 
+ useful information about each user that is on your system according to
+-the finger protocol as described in RFC 1228.  Only thing is, cfingerd
++the finger protocol as described in RFC 1288.  Only thing is, cfingerd
+ provides a unique twist.
+ .PP
+ .B CFINGERD
+--- cfingerd-1.4.3.orig/src/configure.c
++++ cfingerd-1.4.3/src/configure.c
+@@ -692,7 +692,8 @@
+ 
+     if (file)
+ 	while(!feof(file)) {
+-	    char *line, ch = fgetc(file);
++	    char *line;
++	    int ch = fgetc(file);
+ 
+ 	    /* Patch by Kevin Rosenberg 10/21/95 */
+ 	    if (ch == EOF)
+--- cfingerd-1.4.3.orig/src/main.c
++++ cfingerd-1.4.3/src/main.c
+@@ -242,7 +242,7 @@
+ 	    if (!emulated) {
+ 		snprintf(syslog_str, sizeof(syslog_str), "%s fingered (internal) from %s", username,
+ 		    ident_user);
+-		syslog(LOG_NOTICE, (char *) syslog_str);
++		syslog(LOG_NOTICE, "%s", (char *) syslog_str);
+ 	    }
+ 
+ 	    handle_internal(username);
+@@ -255,7 +255,7 @@
+ 		    snprintf(syslog_str, sizeof(syslog_str), "%s fingered from %s",
+ 			prog_config.p_strings[D_ROOT_FINGER], ident_user);
+ 
+-		syslog(LOG_NOTICE, (char *) syslog_str);
++		syslog(LOG_NOTICE, "%s", (char *) syslog_str);
+ 	    }
+ 
+ 	    handle_standard(username);
+@@ -265,7 +265,7 @@
+ 		snprintf(syslog_str, sizeof(syslog_str), "%s %s from %s", username, 
+ 		    prog_config.p_strings[D_FAKE_USER], ident_user);
+ 
+-		syslog(LOG_NOTICE, (char *) syslog_str);
++		syslog(LOG_NOTICE, "%s", (char *) syslog_str);
+ 	    }
+ 
+ 	    handle_fakeuser(username);
+--- cfingerd-1.4.3.orig/src/rfc1413.c
++++ cfingerd-1.4.3/src/rfc1413.c
+@@ -98,7 +98,8 @@
+ 
+ 	if (*(++cp) == ' ') cp++;
+ 	memset(uname, 0, sizeof(uname));
+-	for (xp=uname; *cp != '\0' && *cp!='\r'&&*cp!='\n'&&strlen(uname)<sizeof(uname); cp++)
++	for (xp=uname; *cp != '\0' && *cp!='\r'&&*cp!='\r'&&*cp!='\n'&&(strlen(uname)+1)<sizeof(uname); cp++)
++
+ 	    *(xp++) = *cp;
+ 
+ 	if (!strlen(uname)) {
+--- cfingerd-1.4.3.orig/src/util.c
++++ cfingerd-1.4.3/src/util.c
+@@ -178,7 +178,7 @@
+ 
+ 	    pos++;
+ 
+-	    while((line[pos] != ' ') && (!done)) {
++	    while((line[pos] != ' ') && (!done) && (newpos<80)) {
+ 		command[newpos] = line[pos];
+ 
+ 		if (line[pos] == ' ')
+@@ -298,7 +298,7 @@
+ 	    for(x = 0; x < center_dist; x++)
+ 		printf(" ");
+ 
+-	printf(displine);
++	printf("%s", displine);
+ 
+ 	free(displine);
+     }
+@@ -588,7 +588,9 @@
+ 	memset (line, 0, 600);
+ 	while ((read (fd[0], line, sizeof (line)-1)) > 0) {
+ 	    if ((size += strlen (line)) < MAX_POPEN_BUF) {
++#if 0
+ 		syslog (LOG_INFO, "Reallocating %d bytes", size);
++#endif
+ 		if ((result = (char *) realloc (result, size+1)) == NULL) {
+ 		    return NULL;
+ 		}
+--- cfingerd-1.4.3.orig/userlist/display.c
++++ cfingerd-1.4.3/userlist/display.c
+@@ -89,6 +89,8 @@
+ 	    pwent = getpwnam((char *) ru);
+ 
+ 	    if (pwent) {
++		char *cp, *x;
++
+ 		cp = pwent->pw_gecos;
+ 		if ((x = index (pwent->pw_gecos, ',')) != NULL) /* username */
+ 		    *x = '\0';
diff -Nru cfingerd-1.4.3/debian/patches/02-woody_to_early_sarge.diff cfingerd-1.4.3/debian/patches/02-woody_to_early_sarge.diff
--- cfingerd-1.4.3/debian/patches/02-woody_to_early_sarge.diff	1970-01-01 01:00:00.000000000 +0100
+++ cfingerd-1.4.3/debian/patches/02-woody_to_early_sarge.diff	2010-04-27 17:08:27.000000000 +0200
@@ -0,0 +1,538 @@
+Description: Recovered patches in cfingerd_1.4.3-1.2.diff.gz
+ Interdiff taken between versions 1.4.3-1.1 and 1-4.3-1.2.
+Author: Sam Hocevar <sam+deb@zoy.org>
+        Amir Shamsuddin
+Forwarded: no
+Last-Update: 2003-06-20
+diff -u cfingerd-1.4.3/src/configure.c cfingerd-1.4.3/src/configure.c
+--- cfingerd-1.4.3/src/configure.c
++++ cfingerd-1.4.3/src/configure.c
+@@ -323,11 +323,11 @@
+  */
+ int has(char *str, char search)
+ {
+-    int i;
+-
+-    for (i = 0; i < strlen(str); i++)
+-	if (str[i] == search)
++    while(*str) {
++	if (*str == search)
+ 	    return 1;
++	str++;
++    }
+ 
+     return 0;
+ }
+@@ -725,20 +725,17 @@
+ {
+     if (trusted_host_num == 0) {
+ 	trusted_host_num = 1;
+-	prog_config.trusted[0] = (char *) malloc(10);
+-	sprintf(prog_config.trusted[0], "localhost");
++	prog_config.trusted[0] = strdup("localhost");
+     }
+ 
+     if (rejected_host_num == 0) {
+ 	rejected_host_num = 1;
+-	prog_config.rejected[0] = (char *) malloc(8);
+-	sprintf(prog_config.rejected[0], "0.0.0.0");
++	prog_config.rejected[0] = strdup("0.0.0.0");
+     }
+ 
+     if (forward_host_num == 0) {
+ 	forward_host_num = 1;
+-	prog_config.forward[0] = (char *) malloc(10);
+-	sprintf(prog_config.forward[0], "localhost");
++	prog_config.forward[0] = strdup("localhost");
+ 
+ 	/* Patch by Larry Daffner (vizzie@airmail.net) */
+ 	if (prog_config.config_bits2 & SHOW_FINGERFWD)
+@@ -746,20 +743,15 @@
+     }
+ 
+     if (fakeuser_num == 0) {
+-	prog_config.fusers[fakeuser_num].user = (char *) malloc(5);
+-	prog_config.fusers[fakeuser_num].script = (char *) malloc(10);
+-	prog_config.fusers[fakeuser_num].description = (char *) malloc(5);
+-
+-	sprintf(prog_config.fusers[fakeuser_num].user, "None");
+-	sprintf(prog_config.fusers[fakeuser_num].script, "/dev/null");
+-	sprintf(prog_config.fusers[fakeuser_num].description, "None");
++	prog_config.fusers[fakeuser_num].user = strdup("None");
++	prog_config.fusers[fakeuser_num].script = strdup("/dev/null");
++	prog_config.fusers[fakeuser_num].description = strdup("None");
+ 	prog_config.fusers[fakeuser_num].searchable = FALSE;
+ 	fakeuser_num = 1;
+     }
+ 
+     if (num_finger_sites == 0) {
+-	prog_config.finger_sites[num_finger_sites] = (char *) malloc(10);
+-	sprintf(prog_config.finger_sites[num_finger_sites], "localhost");
++	prog_config.finger_sites[num_finger_sites] = strdup("localhost");
+ 	num_finger_sites = 1;
+     }
+ 
+diff -u cfingerd-1.4.3/src/main.c cfingerd-1.4.3/src/main.c
+--- cfingerd-1.4.3/src/main.c
++++ cfingerd-1.4.3/src/main.c
+@@ -110,10 +110,10 @@
+ 	if (!fgets(username, sizeof(username), stdin)) {
+ 	  if (remote_addr != NULL) {
+ 	    syslog(LOG_ERR, "Null query from %s: %m", remote_addr);
+-	    log(LOG_ERROR, remote_addr, strerror(errno));
++	    mylog(LOG_ERROR, remote_addr, strerror(errno));
+ 	  } else {
+ 	    syslog(LOG_ERR, "Null query: %m");
+-	    log(LOG_ERROR, strerror(errno), strerror(0));
++	    mylog(LOG_ERROR, strerror(errno), strerror(0));
+ 	  }
+ 	    closelog();
+ 	    exit(PROGRAM_SYSLOG);
+@@ -164,7 +164,7 @@
+ 	    printf("Internal error - not running as either a daemon or under INETD.\n");
+ 	    printf("Fatal - getpeername: %s\n", strerror(errno));
+ 	    closelog();
+-	    log(LOG_ERROR, "getpeername: ", strerror(errno));
++	    mylog(LOG_ERROR, "getpeername: ", strerror(errno));
+ 	    exit(PROGRAM_BUG);
+ 	} else
+ 	    remote_port = ntohs(socket_addr.sin_port);
+@@ -216,9 +216,7 @@
+     /* We're emulated, so assume we're fingering from loopback */
+     if (emulated) {
+ 	local_finger = TRUE;
+-	ident_user = (char *)malloc(sizeof("emulated")+1);
+-	memset (ident_user, 0, sizeof (ident_user));
+-	strcpy (ident_user, "emulated");
++	ident_user = strdup("emulated");
+ #ifndef	ACTUAL_LOOPBACK
+ 	remote_addr = "127.0.0.1";
+ #else
+diff -u cfingerd-1.4.3/src/util.c cfingerd-1.4.3/src/util.c
+--- cfingerd-1.4.3/src/util.c
++++ cfingerd-1.4.3/src/util.c
+@@ -99,8 +99,7 @@
+     int pid = getpid();
+     char *proc;
+ 
+-    proc = (char *) malloc(20);
+-
++    proc = (char *) malloc(40);
+     sprintf(proc, "cfingerd[%d]", pid);
+     openlog(proc, LOG_NDELAY, LOG_DAEMON);
+ 
+@@ -436,7 +435,7 @@
+ char *inettos(long addr)
+ {
+     char *ret;
+-    int pair1, pair2, pair3, pair4;
++    unsigned int pair1, pair2, pair3, pair4;
+ 
+     ret = (char *) malloc(20);
+ 
+@@ -465,7 +464,7 @@
+     ret = (char *) malloc(strlen((char *) hostname) +
+ 			  strlen((char *) domname) + 2);
+ 
+-    snprintf(ret, sizeof(ret), "%s.%s", (char *) hostname, (char *) domname);
++    sprintf(ret, "%s.%s", (char *) hostname, (char *) domname);
+     return(ret);
+ }
+ 
+@@ -483,7 +482,7 @@
+ 	    host, prog_config.p_strings[D_REJECT_HOST]);
+ 	if (prog_config.config_bits2 & SHOW_REJECTED)
+ 	    display_file(NOBODY_UID, NOBODY_GID, rejected_display);
+-	log(LOG_IDENT, "Unknown not allowed from ", host);
++	mylog(LOG_IDENT, "Unknown not allowed from ", host);
+ 
+ 	exit(PROGRAM_OKAY);
+     }
+@@ -537,7 +536,7 @@
+ 	    if (prog_config.config_bits2 & SHOW_REJECTED)
+ 		display_file(NOBODY_UID, NOBODY_GID, rejected_display);
+ 
+-	    log(LOG_REJECTED, "Rejected host finger detected to ", host);
++	    mylog(LOG_REJECTED, "Rejected host finger detected to ", host);
+ 
+ 	    exit(PROGRAM_OKAY);
+ 	}
+diff -u cfingerd-1.4.3/userlist/display.c cfingerd-1.4.3/userlist/display.c
+--- cfingerd-1.4.3/userlist/display.c
++++ cfingerd-1.4.3/userlist/display.c
+@@ -9,7 +9,7 @@
+ char *inettos(long addr)
+ {
+     char *ret; 
+-    int p1, p2, p3, p4;
++    unsigned int p1, p2, p3, p4;
+ 
+     ret = (char *) malloc(20);
+     p1 = (addr & 0x000000FF);
+@@ -24,7 +24,6 @@
+ char *get_localhost(void)
+ {
+ #ifndef	LOCAL_NAME
+-    char *ret;
+     char hostname[STRLEN];
+     char *p;
+ 
+@@ -34,10 +33,7 @@
+     if ((p = index(hostname, '.')) != NULL)
+       *p = '\0';
+ 
+-    ret = (char *) malloc(strlen((char *) hostname) + 1);
+-
+-    sprintf(ret, "%s", (char *) hostname);
+-    return(ret);
++    return strdup(hostname);
+ #else
+     return(LOCAL_NAME);
+ #endif
+@@ -79,7 +75,7 @@
+ 
+ 	if (strlen((char *) tty_list[i].username) > 1) {
+ 	    char *username=NULL;
+-	    char ru[8], fn[STRLEN];
++	    char ru[9], fn[STRLEN];
+ 
+ 	    memset(ru, 0, sizeof (ru));
+ 	    memset(fn, 0, sizeof (fn));
+only in patch2:
+unchanged:
+--- cfingerd-1.4.3.orig/src/fakeuser.c
++++ cfingerd-1.4.3/src/fakeuser.c
+@@ -79,7 +79,7 @@
+ 	    printf("\n                    Sorry, you specified too many options.\n\n");
+ 	    fflush(stdout);
+ 	    show_bottom();
+-	    log(LOG_WARN, "Too many options specified in fake user finger", NULL);
++	    mylog(LOG_WARN, "Too many options specified in fake user finger", NULL);
+ 	    return;
+  	}
+ 
+@@ -105,7 +105,7 @@
+ 	    sscanf(username, "%[^.].%[^.].%[^.].%[^.].%[^\r\n]\r\n",
+ 		data[0], data[1], data[2], data[3], data[4]);
+ 
+-	log(LOG_USER, "Fakeuser: ", username);
++	mylog(LOG_USER, "Fakeuser: ", username);
+ 
+ 	funum = search_fake_pos(data[0]);
+ 
+@@ -133,7 +133,7 @@
+     } else {
+ 	printf("\n");
+ 	printf("             Sorry, this system does not have any fake users enabled!\n\n");
+-	log(LOG_WARN, "Fake user requested, but rejected - disabled.", " ");
++	mylog(LOG_WARN, "Fake user requested, but rejected - disabled.", " ");
+     }
+ 
+     show_bottom();
+only in patch2:
+unchanged:
+--- cfingerd-1.4.3.orig/src/internal.c
++++ cfingerd-1.4.3/src/internal.c
+@@ -72,7 +72,7 @@
+     else if (!strncmp(username, "services", 8)) {
+ 	show_services();
+ 	syslog(LOG_NOTICE, "%s", prog_config.p_strings[D_SVC_FINGER]);
+-	log(LOG_USER, "Service request", " ");
++	mylog(LOG_USER, "Service request", " ");
+ 	exit(PROGRAM_OKAY);
+     } else if (!strncmp(username, "search", 6)) {
+ 	show_search(username);
+@@ -83,7 +83,7 @@
+ 	    fflush(stdout);
+ 	    free (buf);
+ 	}
+-	log(LOG_USER, "Userlist-only", " ");
++	mylog(LOG_USER, "Userlist-only", " ");
+ 	exit(PROGRAM_OKAY);
+     } else if (!strncmp(username, "userlist-online", 15)) {
+ 	if ((buf = safe_exec(NOBODY_UID, NOBODY_GID, "/usr/sbin/userlist -c -n | /usr/bin/tail +2")) != NULL) {
+@@ -91,7 +91,7 @@
+ 	    fflush(stdout);
+ 	    free (buf);
+ 	}
+-	log(LOG_USER, "Userlist-only", " ");
++	mylog(LOG_USER, "Userlist-only", " ");
+ 	exit(PROGRAM_OKAY);
+     } else if (!strncmp(username, "help", 4)) {
+ 	show_top();
+only in patch2:
+unchanged:
+--- cfingerd-1.4.3.orig/src/log.c
++++ cfingerd-1.4.3/src/log.c
+@@ -17,7 +17,7 @@
+ #include "proto.h"
+ #include "privs.h"
+ 
+-void log(int logtype, char *msg, char *user)
++void mylog(int logtype, char *msg, char *user)
+ {
+     if (can_log && (prog_config.config_bits3 & SHOW_LOG)) {
+ 	time_t tim = time(NULL);
+@@ -80,7 +80,7 @@
+     } else {
+ 	if (!(prog_config.config_bits3 & SHOW_CREATE_FLG)) {
+ 	    syslog(LOG_WARNING, "Userlog: %s (%s)", filename, strerror(errno));
+-	    log(LOG_ERROR, "Cannot write to userlog: ", strerror(errno));
++	    mylog(LOG_ERROR, "Cannot write to userlog: ", strerror(errno));
+ 	}
+     }
+ }
+only in patch2:
+unchanged:
+--- cfingerd-1.4.3.orig/src/parse.c
++++ cfingerd-1.4.3/src/parse.c
+@@ -137,14 +137,14 @@
+ 	if (ret == U_FORWARD) {
+ 	    printf("%s\n", prog_config.p_strings[D_FORWARD_DENY]);
+ 	    fflush(stdout);
+-	    log(LOG_USER, "Denied forward: ", username);
++	    mylog(LOG_USER, "Denied forward: ", username);
+ 	    exit(1);
+ 	}
+ 
+ 	if (ret == U_ILLEGAL) {
+ 	    printf("Illegal character in username.\n");
+ 	    fflush(stdout);
+-	    log(LOG_USER, "Illegal: ", username);
++	    mylog(LOG_USER, "Illegal: ", username);
+ 	    exit(1);
+ 	}
+ 
+only in patch2:
+unchanged:
+--- cfingerd-1.4.3.orig/src/proto.h
++++ cfingerd-1.4.3/src/proto.h
+@@ -47,7 +47,7 @@
+ int wildmat(char *, char *);
+ char *get_rfc1413_data(struct sockaddr_in );
+ void check_unknown(char *);
+-void log(int, char *, char *);
++void mylog(int, char *, char *);
+ void userlog(uid_t, gid_t, char *, char *);
+ void check_blank_configurations(void);
+ int search_fake_pos(char *);
+only in patch2:
+unchanged:
+--- cfingerd-1.4.3.orig/src/search.c
++++ cfingerd-1.4.3/src/search.c
+@@ -75,7 +75,7 @@
+ 	printf("\n                    You must supply a name to search for!\n");
+ 	SEND_RAW_RETURN;
+ 	show_bottom();
+-	log(LOG_USER, "Security breach: finger * from %s", ident_user);
++	mylog(LOG_USER, "Security breach: finger * from %s", ident_user);
+ 	syslog(LOG_WARNING, "Security breach: finger * from %s", ident_user);
+ 	free (searchname);
+ 	exit(PROGRAM_OKAY);
+@@ -85,7 +85,7 @@
+       if (isupper(*cp))
+ 	*cp = tolower(*cp);
+ 
+-    log(LOG_USER, "Search: ", searchname);
++    mylog(LOG_USER, "Search: ", searchname);
+ 
+     NOBODY_PRIVS;
+ 
+only in patch2:
+unchanged:
+--- cfingerd-1.4.3.orig/src/signal.c
++++ cfingerd-1.4.3/src/signal.c
+@@ -81,7 +81,7 @@
+ 
+ 	    if (siglist[i].fatal) {
+ 		printf("\nPlease report this bug to %s!\n", ERRORS_TO);
+-		log(LOG_ERROR, "Signal (fatal): ", siglist[i].sigtype);
++		mylog(LOG_ERROR, "Signal (fatal): ", siglist[i].sigtype);
+ 	    } else {
+ 		if (siglist[i].value == SIGALRM) {
+ 		    printf("Ooh, you caught an alarm signal.  This may be a cause from either not\n");
+@@ -89,7 +89,7 @@
+ 		    printf("out on you.  May want to check this.  :)\n\n");
+ 		}
+ 
+-		log(LOG_WARN, "Signal: Alarm signal", " ");
++		mylog(LOG_WARN, "Signal: Alarm signal", " ");
+ 
+ 		printf("Non-fatal; continuing.\n");
+ 	    }
+@@ -99,7 +99,7 @@
+ 	    if (siglist[i].fatal)
+ 		exit(PROGRAM_BUG);
+ 	    else
+-		log(LOG_WARN, "Signal (non-fatal): ", siglist[i].sigtype);
++		mylog(LOG_WARN, "Signal (non-fatal): ", siglist[i].sigtype);
+ 	}
+     }
+ 
+@@ -109,7 +109,7 @@
+ 	syslog(LOG_ERR, "SIGUNKNOWN caught");
+ 	(void) fflush(stdout);
+ 
+-	log(LOG_ERROR, "Signal: Unknown signal", " ");
++	mylog(LOG_ERROR, "Signal: Unknown signal", " ");
+ 
+ 	exit(PROGRAM_BUG);
+     }
+only in patch2:
+unchanged:
+--- cfingerd-1.4.3.orig/src/standard.c
++++ cfingerd-1.4.3/src/standard.c
+@@ -155,6 +155,7 @@
+ 	    fflush(stdout);
+ 	}
+ 
++	USER_PRIVS(uid, gid);
+ 	if (exist(d)) {
+ 	    NOBODY_PRIVS;
+ 
+@@ -163,9 +164,13 @@
+ 		fflush(stdout);
+ 	    }
+ 
+-	    if ((file = open_file(d)) != NULL)
++	    USER_PRIVS(uid, gid);
++	    if ((file = open_file(d)) != NULL) {
++		NOBODY_PRIVS;
+ 		display_file(uid, gid, file);
++	    }
+ 	} else {
++	    NOBODY_PRIVS;
+ 	    if (!(prog_config.config_bits3 & SHOW_HEADERS_FE))
+ 		printf("%s\n", prog_config.p_strings[t3]);
+ 	    else
+@@ -206,6 +211,7 @@
+ 	    fflush(stdout);
+ 	}
+ 
++	USER_PRIVS(uid, gid);
+ 	if (exist(d)) {
+ 	    NOBODY_PRIVS;
+ 
+@@ -214,9 +220,13 @@
+ 		fflush(stdout);
+ 	    }
+ 
+-	    if ((open_file (d)) != NULL)
++	    USER_PRIVS(uid, gid);
++	    if ((file = open_file (d)) != NULL) {
++		NOBODY_PRIVS;
+ 		display_file(uid, gid, file);
++	    }
+ 	} else {
++	    NOBODY_PRIVS;
+ 	    if (!(prog_config.config_bits3 & SHOW_HEADERS_FE))
+ 		printf("%s\n", prog_config.p_strings[t3]);
+ 	}
+@@ -376,11 +386,20 @@
+     sprintf(dev_file, "/dev/%s", tty);
+ 
+     USER_PRIVS(nuid, ngid);
+-    stat((char *) dev_file, &buf);
++    if (stat((char *) dev_file, &buf) != 0) {
++	NOBODY_PRIVS;
++	return;
++    }
+     NOBODY_PRIVS;
+ 
++    if (!buf.st_atime || !buf.st_mtime)
++        return;
+     cur_time = time(NULL);
+-    diff_time = (long) cur_time - (long) buf.st_mtime;
++    diff_time = buf.st_mtime < buf.st_atime
++		? (long) cur_time - (long) buf.st_mtime
++		: (long) cur_time - (long) buf.st_atime;
++    if (diff_time < 0)
++	diff_time = 0;
+ 
+     sec = min = hour = day = has = 0;
+ 
+@@ -394,7 +413,7 @@
+ 	sec = has = 1;
+ 
+     if (has)
+-	printf(" Idle ");
++	printf(" idle ");
+ 
+     if (day) {
+ 	day = diff_time / 86400;
+@@ -1009,14 +1028,14 @@
+ 		    free (buf);
+ 		}
+ 		nums++;
+-		log(LOG_USER, "Forwarded: ", username);
++		mylog(LOG_USER, "Forwarded: ", username);
+ 	    }
+ 	} else {
+ 	    show_notexist();
+ 	}
+     } else {
+ 	show_fingerinfo(username);
+-	log(LOG_USER, "Normal: ", username);
++	mylog(LOG_USER, "Normal: ", username);
+     }
+ 
+     if ((!(prog_config.config_bits2 & SHOW_FINGERFWD)) || 
+only in patch2:
+unchanged:
+--- cfingerd-1.4.3.orig/src/userlist.c
++++ cfingerd-1.4.3/src/userlist.c
+@@ -144,7 +144,7 @@
+ 
+     show_bottom();
+ 
+-    log(LOG_USER, "Userlist request", " ");
++    mylog(LOG_USER, "Userlist request", " ");
+ }
+ 
+ /*
+only in patch2:
+unchanged:
+--- cfingerd-1.4.3.orig/src/version.c
++++ cfingerd-1.4.3/src/version.c
+@@ -45,7 +45,7 @@
+     printf("The last stable version of CFINGERD is %s\n\n", LAST_STABLE_RELEASE);
+ #endif
+ 
+-    log(LOG_USER, "Version information", " ");
++    mylog(LOG_USER, "Version information", " ");
+ 
+     fflush(stdout);
+     exit(PROGRAM_OKAY);
+only in patch2:
+unchanged:
+--- cfingerd-1.4.3.orig/userlist/idle.c
++++ cfingerd-1.4.3/userlist/idle.c
+@@ -24,10 +24,16 @@
+ 
+     snprintf(dev_file, sizeof (dev_file), "/dev/%s", tty);
+ 
+-    stat((char *) dev_file, &buf);
++    if (stat((char *) dev_file, &buf) != 0 || !buf.st_atime || !buf.st_mtime) {
++	sprintf(idledisp, "-");
++	return idledisp;
++    }
+     cur_time = time(NULL);
+-
+-    diff_time = (long) cur_time - (long) buf.st_mtime;
++    diff_time = buf.st_mtime < buf.st_atime
++		? (long) cur_time - (long) buf.st_mtime
++		: (long) cur_time - (long) buf.st_atime;
++    if (diff_time < 0)
++	diff_time = 0;
+ 
+     min = hour = day = 0;
+ 
+@@ -45,7 +51,7 @@
+ 
+     if (day) {
+ 	if (no_idle) return NULL;
+-	snprintf(idledisp, sizeof (idledisp), "%1dd ", day);
++	snprintf(idledisp, sizeof (idledisp), "%1dd", day);
+ 	return idledisp;
+     }
+ 
diff -Nru cfingerd-1.4.3/debian/patches/03-sarge_to_late_etch.diff cfingerd-1.4.3/debian/patches/03-sarge_to_late_etch.diff
--- cfingerd-1.4.3/debian/patches/03-sarge_to_late_etch.diff	1970-01-01 01:00:00.000000000 +0100
+++ cfingerd-1.4.3/debian/patches/03-sarge_to_late_etch.diff	2010-04-27 17:15:03.000000000 +0200
@@ -0,0 +1,368 @@
+Description: Patches receovered from cfingerd_1.4.3-2.1.diff.gz
+ Interdiff between versions 1.4.3-1.2 and 1.4.3-2.1.
+Author: Martin Schulze <joey@infodrom.org>
+        Cyril Brulebois
+Forwarded: no
+Last-Update: 2008-02-25
+--- cfingerd-1.4.3/src/configure.c
++++ cfingerd-1.4.3.orig/src/configure.c
+@@ -323,11 +323,11 @@
+  */
+ int has(char *str, char search)
+ {
++    int i;
++
++    for (i = 0; i < strlen(str); i++)
++	if (str[i] == search)
+-    while(*str) {
+-	if (*str == search)
+ 	    return 1;
+-	str++;
+-    }
+ 
+     return 0;
+ }
+@@ -692,8 +692,7 @@
+ 
+     if (file)
+ 	while(!feof(file)) {
++	    char *line, ch = fgetc(file);
+-	    char *line;
+-	    int ch = fgetc(file);
+ 
+ 	    /* Patch by Kevin Rosenberg 10/21/95 */
+ 	    if (ch == EOF)
+@@ -725,17 +724,20 @@
+ {
+     if (trusted_host_num == 0) {
+ 	trusted_host_num = 1;
++	prog_config.trusted[0] = (char *) malloc(10);
++	sprintf(prog_config.trusted[0], "localhost");
+-	prog_config.trusted[0] = strdup("localhost");
+     }
+ 
+     if (rejected_host_num == 0) {
+ 	rejected_host_num = 1;
++	prog_config.rejected[0] = (char *) malloc(8);
++	sprintf(prog_config.rejected[0], "0.0.0.0");
+-	prog_config.rejected[0] = strdup("0.0.0.0");
+     }
+ 
+     if (forward_host_num == 0) {
+ 	forward_host_num = 1;
++	prog_config.forward[0] = (char *) malloc(10);
++	sprintf(prog_config.forward[0], "localhost");
+-	prog_config.forward[0] = strdup("localhost");
+ 
+ 	/* Patch by Larry Daffner (vizzie@airmail.net) */
+ 	if (prog_config.config_bits2 & SHOW_FINGERFWD)
+@@ -743,15 +745,20 @@
+     }
+ 
+     if (fakeuser_num == 0) {
++	prog_config.fusers[fakeuser_num].user = (char *) malloc(5);
++	prog_config.fusers[fakeuser_num].script = (char *) malloc(10);
++	prog_config.fusers[fakeuser_num].description = (char *) malloc(5);
++
++	sprintf(prog_config.fusers[fakeuser_num].user, "None");
++	sprintf(prog_config.fusers[fakeuser_num].script, "/dev/null");
++	sprintf(prog_config.fusers[fakeuser_num].description, "None");
+-	prog_config.fusers[fakeuser_num].user = strdup("None");
+-	prog_config.fusers[fakeuser_num].script = strdup("/dev/null");
+-	prog_config.fusers[fakeuser_num].description = strdup("None");
+ 	prog_config.fusers[fakeuser_num].searchable = FALSE;
+ 	fakeuser_num = 1;
+     }
+ 
+     if (num_finger_sites == 0) {
++	prog_config.finger_sites[num_finger_sites] = (char *) malloc(10);
++	sprintf(prog_config.finger_sites[num_finger_sites], "localhost");
+-	prog_config.finger_sites[num_finger_sites] = strdup("localhost");
+ 	num_finger_sites = 1;
+     }
+ 
+diff -u cfingerd-1.4.3/src/internal.c cfingerd-1.4.3/src/internal.c
+--- cfingerd-1.4.3/src/internal.c
++++ cfingerd-1.4.3/src/internal.c
+@@ -78,7 +78,7 @@
+ 	show_search(username);
+ 	exit(PROGRAM_OKAY);
+     } else if (!strncmp(username, "userlist-only", 13)) {
+-	if ((buf = safe_exec(NOBODY_UID, NOBODY_GID, "/usr/sbin/userlist | /usr/bin/tail +2")) != NULL) {
++	if ((buf = safe_exec(NOBODY_UID, NOBODY_GID, "/usr/sbin/userlist | /usr/bin/tail -n +2")) != NULL) {
+ 	    printf ("%s", buf);
+ 	    fflush(stdout);
+ 	    free (buf);
+@@ -86,7 +86,7 @@
+ 	mylog(LOG_USER, "Userlist-only", " ");
+ 	exit(PROGRAM_OKAY);
+     } else if (!strncmp(username, "userlist-online", 15)) {
+-	if ((buf = safe_exec(NOBODY_UID, NOBODY_GID, "/usr/sbin/userlist -c -n | /usr/bin/tail +2")) != NULL) {
++	if ((buf = safe_exec(NOBODY_UID, NOBODY_GID, "/usr/sbin/userlist -c -n | /usr/bin/tail -n +2")) != NULL) {
+ 	    printf ("%s", buf);
+ 	    fflush(stdout);
+ 	    free (buf);
+diff -u cfingerd-1.4.3/src/main.c cfingerd-1.4.3/src/main.c
+--- cfingerd-1.4.3/src/main.c
++++ cfingerd-1.4.3/src/main.c
+@@ -216,7 +216,9 @@
+     /* We're emulated, so assume we're fingering from loopback */
+     if (emulated) {
+ 	local_finger = TRUE;
+-	ident_user = strdup("emulated");
++	ident_user = (char *)malloc(sizeof("emulated")+1);
++	memset (ident_user, 0, sizeof (ident_user));
++	strcpy (ident_user, "emulated");
+ #ifndef	ACTUAL_LOOPBACK
+ 	remote_addr = "127.0.0.1";
+ #else
+diff -u cfingerd-1.4.3/src/search.c cfingerd-1.4.3/src/search.c
+--- cfingerd-1.4.3/src/search.c
++++ cfingerd-1.4.3/src/search.c
+@@ -36,7 +36,7 @@
+     SEARCHLIST searches[MAX_SEARCHES];
+     FILE *file;
+     char *cp;
+-    char *xp, y;
++    char *xp;
+ 
+     show_top();
+ 
+@@ -56,13 +56,6 @@
+ 	exit(PROGRAM_OKAY);
+     }
+ 
+-    for (cp=searchname,xp=searchname,y=0;*cp;cp++) {
+-	if (y != *cp)
+-	    *(xp++) = *cp;
+-	y = *cp;
+-    }
+-    *xp = '\0';
+-	
+     if (strlen((char *) searchname) == 0) {
+ 	printf("\n                    You must supply a name to search for!\n");
+ 	SEND_RAW_RETURN;
+diff -u cfingerd-1.4.3/src/standard.c cfingerd-1.4.3/src/standard.c
+--- cfingerd-1.4.3/src/standard.c
++++ cfingerd-1.4.3/src/standard.c
+@@ -165,10 +165,11 @@
+ 	    }
+ 
+ 	    USER_PRIVS(uid, gid);
+-	    if ((file = open_file(d)) != NULL) {
++	    if ((file = open_file(d)) != NULL)
++	    {
+ 		NOBODY_PRIVS;
+ 		display_file(uid, gid, file);
+-	    }
++           }
+ 	} else {
+ 	    NOBODY_PRIVS;
+ 	    if (!(prog_config.config_bits3 & SHOW_HEADERS_FE))
+@@ -224,7 +225,7 @@
+ 	    if ((file = open_file (d)) != NULL) {
+ 		NOBODY_PRIVS;
+ 		display_file(uid, gid, file);
+-	    }
++           }
+ 	} else {
+ 	    NOBODY_PRIVS;
+ 	    if (!(prog_config.config_bits3 & SHOW_HEADERS_FE))
+@@ -393,7 +394,8 @@
+     NOBODY_PRIVS;
+ 
+     if (!buf.st_atime || !buf.st_mtime)
+-        return;
++	return;
++
+     cur_time = time(NULL);
+     diff_time = buf.st_mtime < buf.st_atime
+ 		? (long) cur_time - (long) buf.st_mtime
+@@ -1021,7 +1023,7 @@
+ 		memset(uname, 0, 600);
+ 		printf("\nChecking site %s for the specified user.\n", prog_config.forward[nums]);
+ 		fflush(stdout);
+-		snprintf(uname, sizeof(uname), "/usr/bin/finger \"%s\100%s\" | /usr/bin/tail +2", username, prog_config.forward[nums]);
++		snprintf(uname, sizeof(uname), "/usr/bin/finger \"%s\100%s\" | /usr/bin/tail -n +2", username, prog_config.forward[nums]);
+ 		if ((buf = safe_exec(NOBODY_UID, NOBODY_GID, uname)) != NULL) {
+ 		    printf ("%s", buf);
+ 		    fflush(stdout);
+diff -u cfingerd-1.4.3/src/userlist.c cfingerd-1.4.3/src/userlist.c
+--- cfingerd-1.4.3/src/userlist.c
++++ cfingerd-1.4.3/src/userlist.c
+@@ -56,10 +56,10 @@
+ 
+ 		    if (!strcmp (username, "userlist"))
+ 			snprintf(cmdline, sizeof (cmdline),
+-				 "%s -n | /usr/bin/tail +2", prog_config.finger_program);
++				 "%s -n | /usr/bin/tail -n +2", prog_config.finger_program);
+ 		    else
+ 			snprintf(cmdline, sizeof (cmdline),
+-				 "%s | /usr/bin/tail +2", prog_config.finger_program);
++				 "%s | /usr/bin/tail -n +2", prog_config.finger_program);
+ 
+ 		    if ((buf = safe_exec(NOBODY_UID, NOBODY_GID, cmdline)) != NULL) {
+ 			if (!head) {
+@@ -72,10 +72,10 @@
+ 		    }
+ 		} else {
+ 		    if (!strcmp (username, "userlist"))
+-			snprintf(cmdline, sizeof(cmdline), "/usr/bin/finger userlist-online@%s | tail +2 | grep -v '^$'",
++			snprintf(cmdline, sizeof(cmdline), "/usr/bin/finger userlist-online@%s | tail -n +2 | grep -v '^$'",
+ 				 prog_config.finger_sites[i]);
+ 		    else
+-			snprintf(cmdline, sizeof(cmdline), "/usr/bin/finger userlist-only@%s | tail +2 | grep -v '^$'",
++			snprintf(cmdline, sizeof(cmdline), "/usr/bin/finger userlist-only@%s | tail -n +2 | grep -v '^$'",
+ 				 prog_config.finger_sites[i]);
+ 
+ 		    if ((buf = safe_exec(NOBODY_UID, NOBODY_GID, cmdline)) != NULL) {
+@@ -92,7 +92,7 @@
+ 	} else {
+ 	    if ((!strstr(prog_config.finger_program, "finger")) &&
+ 		(!strstr(prog_config.finger_program, "w")))
+-		snprintf(cmdline, sizeof(cmdline), "%s | /usr/bin/tail +2", prog_config.finger_program);
++		snprintf(cmdline, sizeof(cmdline), "%s | /usr/bin/tail -n +2", prog_config.finger_program);
+ 	    else 
+ 		snprintf(cmdline, sizeof(cmdline), "%s", prog_config.finger_program);
+ 
+diff -u cfingerd-1.4.3/src/util.c cfingerd-1.4.3/src/util.c
+--- cfingerd-1.4.3/src/util.c
++++ cfingerd-1.4.3/src/util.c
+@@ -99,7 +99,8 @@
+     int pid = getpid();
+     char *proc;
+ 
+-    proc = (char *) malloc(40);
++    proc = (char *) malloc(20);
++
+     sprintf(proc, "cfingerd[%d]", pid);
+     openlog(proc, LOG_NDELAY, LOG_DAEMON);
+ 
+@@ -177,7 +178,7 @@
+ 
+ 	    pos++;
+ 
+-	    while((line[pos] != ' ') && (!done) && (newpos<80)) {
++	    while (line[pos] != ' ' && !done && newpos < 80) {
+ 		command[newpos] = line[pos];
+ 
+ 		if (line[pos] == ' ')
+@@ -435,7 +436,7 @@
+ char *inettos(long addr)
+ {
+     char *ret;
+-    unsigned int pair1, pair2, pair3, pair4;
++    int pair1, pair2, pair3, pair4;
+ 
+     ret = (char *) malloc(20);
+ 
+@@ -587,9 +588,6 @@
+ 	memset (line, 0, 600);
+ 	while ((read (fd[0], line, sizeof (line)-1)) > 0) {
+ 	    if ((size += strlen (line)) < MAX_POPEN_BUF) {
+-#if 0
+-		syslog (LOG_INFO, "Reallocating %d bytes", size);
+-#endif
+ 		if ((result = (char *) realloc (result, size+1)) == NULL) {
+ 		    return NULL;
+ 		}
+diff -u cfingerd-1.4.3/userlist/display.c cfingerd-1.4.3/userlist/display.c
+--- cfingerd-1.4.3/userlist/display.c
++++ cfingerd-1.4.3/userlist/display.c
+@@ -9,7 +9,7 @@
+ char *inettos(long addr)
+ {
+     char *ret; 
+-    unsigned int p1, p2, p3, p4;
++    int p1, p2, p3, p4;
+ 
+     ret = (char *) malloc(20);
+     p1 = (addr & 0x000000FF);
+@@ -24,6 +24,7 @@
+ char *get_localhost(void)
+ {
+ #ifndef	LOCAL_NAME
++    char *ret;
+     char hostname[STRLEN];
+     char *p;
+ 
+@@ -33,7 +34,10 @@
+     if ((p = index(hostname, '.')) != NULL)
+       *p = '\0';
+ 
+-    return strdup(hostname);
++    ret = (char *) malloc(strlen((char *) hostname) + 1);
++
++    sprintf(ret, "%s", (char *) hostname);
++    return(ret);
+ #else
+     return(LOCAL_NAME);
+ #endif
+only in patch2:
+unchanged:
+--- cfingerd-1.4.3.orig/RECOMMEND
++++ cfingerd-1.4.3/RECOMMEND
+@@ -4,7 +4,7 @@
+ After running cfingerd for quite a while, I have found that if you make 
+ the cfingerd setup the most secure, you will have the least problems.
+ 
+-CFINGERD currently stops all files from being symbolic links, char 
++CFINGERD currently stops for all files from being symbolic links, char 
+ devices, block devices, etc.  Basically, each file has to be a normal 
+ file in order to be read by cfingerd.  With that in mind, you should keep 
+ all files (whether or not they are read by root) as normal files.  This 
+only in patch2:
+unchanged:
+--- cfingerd-1.4.3.orig/CREDITS
++++ cfingerd-1.4.3/CREDITS
+@@ -48,7 +48,7 @@
+ 	- Shadow password testing
+ 	- Secure (NOBODY PATCH) finger help
+ 
+-cc@spork.neonexus.com
++David Muench <cc@spork.neonexus.com>
+ 	- Finger forwarding idea
+ 
+ Rich Salz <rsalz@uunet.net>
+@@ -76,3 +76,13 @@
+ 
+ Alexey M. Zelkin <phantom@cris.net>
+ 	- Support for FreeBSD
++
++Kevin Rosenberg <kevin@cyberport.com>
++	- Get UTMP file entries for BSD compatibility
++
++Thomas Koenig <ig25@rz.uni-karlsruhe.de>
++	- Management of e?uid switching
++
++Lars Mathiesen <thorinn@diku.dk>
++	- ABORT code for wildmat
++
+only in patch2:
+unchanged:
+--- cfingerd-1.4.3.orig/Makefile.cfg.in
++++ cfingerd-1.4.3/Makefile.cfg.in
+@@ -1,6 +1,6 @@
+ # CFINGERD - Main Makefile configuration
+ #
+-# $Id: Makefile.cfg.in,v 1.4 1999/08/31 00:46:46 joey Exp $
++# $Id: Makefile.cfg.in,v 1.4 1999-08-31 00:46:46 joey Exp $
+ #
+ # Copyright (c) 1999 by Martin Schulze <joey@infodrom.north.de>
+ #
+only in patch2:
+unchanged:
+--- cfingerd-1.4.3.orig/perl/generic.pl
++++ cfingerd-1.4.3/perl/generic.pl
+@@ -14,6 +14,11 @@
+ 	chop($uname);
+ 	$uname =~ tr/a-z/A-Z/;
+ 
++	# Tiny hack to make GNU/kFreeBSD and GNU/Hurd act as GNU/Linux
++	if (($uname eq 'GNU/KFREEBSD') || ($uname eq 'GNU')) {
++	    $uname = 'LINUX';
++	}
++
+ 	$ver = `uname -r`;
+ 	chop($ver);
+ 
diff -Nru cfingerd-1.4.3/debian/patches/10-manpage_macros.diff cfingerd-1.4.3/debian/patches/10-manpage_macros.diff
--- cfingerd-1.4.3/debian/patches/10-manpage_macros.diff	1970-01-01 01:00:00.000000000 +0100
+++ cfingerd-1.4.3/debian/patches/10-manpage_macros.diff	2010-04-28 00:58:41.000000000 +0200
@@ -0,0 +1,77 @@
+Description: Corrections to outdated or incorrect groff macros.
+ Incorrect groff macros where replaced, and two spelling
+ errors were corrected.
+Author: Mats Erik Andersson <debian@gisladisker.se>
+Forwarded: no
+Last-Update: 2010-04-27
+--- cfingerd-1.4.3.debian/docs/cfingerd.conf.5
++++ cfingerd-1.4.3/docs/cfingerd.conf.5
+@@ -8,8 +8,8 @@
+ .SH DESCRIPTION
+ .I cfingerd.conf
+ is the configuration file for cfingerd.
+-+.I cfingerd
+-+has been totally rewritten
++.I cfingerd
++has been totally rewritten
+ to support a more readable configuration file.  This version of the new 
+ configuration file is
+ .B NOT
+@@ -24,7 +24,7 @@
+ explained next.
+ .PP
+ Subtext of each option is either boolean options, string options, or 
+-switchable options, all changable by the system administrator.
++switchable options, all changeable by the system administrator.
+ .PP
+ Each section is split into a series of sections that resembles C type 
+ definition; not exact, but close enough to be familiar with it.  :)  
+@@ -529,7 +529,7 @@
+ other sites for a user listing.
+ .br
+ .SH "INTERNAL STRINGS SECTION (CONFIG internal_strings)"
+-These strings are changable, and can be any length you want (within 
++These strings are changeable, and can be any length you want (within 
+ reason).  These strings are concattenated into the syslogging display 
+ when the appropriate finger has been issued.  This section also includes 
+ error messages that may occur.
+@@ -607,8 +607,7 @@
+ called for your use.
+ .PP
+ The format is as follows for fake users:
+-.sh
+-    "fake_username", "Script name", SEARCHBOOL, "script"
++.IR "fake_username", "Script name", SEARCHBOOL, "script"
+ .PP
+ where...
+ .PP
+--- cfingerd-1.4.3.debian/docs/cfingerd.text.5
++++ cfingerd-1.4.3/docs/cfingerd.text.5
+@@ -1,6 +1,6 @@
+ .TH CFINGERD.TEXT 5 "7 Aug 1999" "1.4.2" "Configurable Finger Daemon"
+ .SH NAME
+-cfingerd text rules
++cfingerd \- text rules
+ .br
+ .SH "EXPLANATION"
+ .B cfingerd
+--- cfingerd-1.4.3.debian/userlist/userlist.1
++++ cfingerd-1.4.3/userlist/userlist.1
+@@ -8,7 +8,7 @@
+ .SH DESCRIPTION
+ This program simply gives you a listing of who is connected to your 
+ system.  It is used primarily in the sorted listing of
+-.Br cfingerd ,
++.BR cfingerd ,
+ which 
+ utilitizes the same method of display for a more uniform output between 
+ systems.  (It also made more sense to do it this way instead of having 
+@@ -40,7 +40,7 @@
+ .B "\-c"
+ Give standard CFINGERD (custom) output.
+ .TP
+-.B. "\-n"
++.B "\-n"
+ List only people idle less than one day.
+ .br
+ .SH ADDITIONAL
diff -Nru cfingerd-1.4.3/debian/patches/15-ipv6_support.diff cfingerd-1.4.3/debian/patches/15-ipv6_support.diff
--- cfingerd-1.4.3/debian/patches/15-ipv6_support.diff	1970-01-01 01:00:00.000000000 +0100
+++ cfingerd-1.4.3/debian/patches/15-ipv6_support.diff	2010-04-28 00:57:41.000000000 +0200
@@ -0,0 +1,386 @@
+Description: Implement support for IPv6.
+ In order to get address family independence, most address
+ structures are migrated to use 'struct sockaddr_storage'.
+ .
+ Additionally, all variables storing port numbers are now
+ doing so in host byte order. The upstream has a mixture.
+ No two helper functions get_port() and set_port() hide
+ their manipulation of address families and byte order.
+ .
+ The upstream authors have left the daemon mode code
+ incomplete and dysfunctional. Still, the relevant parts
+ in 'src/options.c' have now also been migrated in order
+ to prepare IPv6 support even there.
+Author: Mats Erik Andersson <debian@gisladisker.se>
+Forwarded: no
+Last-Update: 2010-04-28
+--- cfingerd-1.4.3.debian/src/proto.h
++++ cfingerd-1.4.3/src/proto.h
+@@ -45,7 +45,7 @@ void show_search(char *);
+ void become_nobody(void);
+ void become_user(char *);
+ int wildmat(char *, char *);
+-char *get_rfc1413_data(struct sockaddr_in );
++char *get_rfc1413_data(struct sockaddr_storage *, struct sockaddr_storage *);
+ void check_unknown(char *);
+ void mylog(int, char *, char *);
+ void userlog(uid_t, gid_t, char *, char *);
+@@ -55,3 +55,5 @@ char *safe_exec(uid_t uid, gid_t gid, ch
+ void open_initial_files(void);
+ BOOL check_illegal(char *, char *);
+ FILE *open_file(char *);
++int get_port(struct sockaddr_storage * ss);
++void set_port(struct sockaddr_storage * ss, int port);
+--- cfingerd-1.4.3.debian/src/cfingerd.h
++++ cfingerd-1.4.3/src/cfingerd.h
+@@ -278,19 +278,20 @@ typedef struct ecruft {
+ 
+ extern CONFIG prog_config;
+ extern ECRUFT errors[];
+-extern char *remote_addr, *localhost, *ident_user, *ip_address;
++extern char remote_addr[], ip_address[];
++extern char *localhost, *ident_user;
+ extern int trusted_host_num, rejected_host_num, forward_host_num,
+-	   fakeuser_num, num_finger_sites, num_headers, local_port,
+-	   remote_port, can_log;
++	   fakeuser_num, num_finger_sites, num_headers, can_log;
++extern unsigned short local_port, remote_port;
+ extern FILE *top_display, *bottom_display, *noname_display, *nouser_display,
+ 	    *rejected_display, *identd_display;
+ extern BOOL local_finger, emulated;
+ extern FILE *logfile;
+ #ifdef DAEMON_MODE
+ extern unsigned short listen_port;
+-extern unsigned long listen_addr;
++extern struct sockaddr_storage listen_addr;
+ #endif
+ 
+ #include "defines.h"
+ 
+-#endif _CFINGERD_H_
++#endif /* _CFINGERD_H_ */
+--- cfingerd-1.4.3.debian/src/util.c
++++ cfingerd-1.4.3/src/util.c
+@@ -653,6 +653,42 @@ void open_initial_files(void)
+ }
+ 
+ /*
++ * GET_PORT
++ *
++ * This retrieves the IPv4/IPv6 socket port from a sockaddr_structure
++ * super structure. The value is returned in host byte order.
++ */
++int get_port(struct sockaddr_storage * ss)
++{
++	switch (ss->ss_family) {
++		case AF_INET6:
++			return ntohs(((struct sockaddr_in6 *) ss)->sin6_port);
++			break;
++		case AF_INET:
++		default:
++			return ntohs(((struct sockaddr_in *) ss)->sin_port);
++	}
++} /* get_port(struct sockaddr_storage *) */
++
++/*
++ * SET_PORT
++ *
++ * This assigns the IPv4/IPv6 socket port to a given sockaddr_structure
++ * super structure. The port value is entered in host byte order.
++ */
++void set_port(struct sockaddr_storage * ss, int port)
++{
++	switch (ss->ss_family) {
++		case AF_INET6:
++			((struct sockaddr_in6 *) ss)->sin6_port = htons(port);
++			break;
++		case AF_INET:
++		default:
++			((struct sockaddr_in *) ss)->sin_port = htons(port);
++	}
++} /* set_port(struct sockaddr_storage *, int) */
++
++/*
+  * Local variables:
+  *  c-indent-level: 4
+  *  c-basic-offset: 4
+--- cfingerd-1.4.3.debian/src/options.c
++++ cfingerd-1.4.3/src/options.c
+@@ -30,10 +30,10 @@ void set_daemon_mode(void)
+     pid_t pid;
+     int i, lsock, fd, clen;
+     int oval = 1;
+-    struct sockaddr caddr;
+-    struct sockaddr_in laddr;
++    struct sockaddr_structure caddr;
++    struct sockaddr_structure laddr;
+ 
+-    if ((lsock = socket (AF_INET, SOCK_STREAM, 0)) < 0) {
++    if ((lsock = socket (listen_addr.ss_family, SOCK_STREAM, 0)) < 0) {
+ 	syslog (LOG_ERR,"can't open socket: %m");
+ 	exit (1);
+     }
+@@ -43,9 +43,11 @@ void set_daemon_mode(void)
+ 	exit (1);
+     }
+ 
+-    laddr.sin_family = AF_INET;
+-    laddr.sin_addr.s_addr = listen_addr;
+-    laddr.sin_port = listen_port;
++    //laddr.sin_family = AF_INET;
++    //laddr.sin_addr.s_addr = listen_addr;
++    //laddr.sin_port = listen_port;
++    memcpy (&laddr, &listen_addr, sizeof(listen_addr));
++    set_port (&laddr, listen_port);
+ 
+     if (bind (lsock, (struct sockaddr *) &laddr, sizeof(laddr)) < 0) {
+ 	syslog (LOG_ERR,"can't bind: %m");
+@@ -84,13 +86,17 @@ void set_daemon_mode(void)
+ #else
+ 	    if (errno == EPROTOTYPE) {
+ #endif /* !__FreeBSD__ */
+-		remote_addr = inet_ntoa (((struct sockaddr_in *)&caddr)->sin_addr);
++		getnameinfo ((struct sockaddr *)&caddr, sizeof(caddr),
++				remote_addr, sizeof(remote_addr),
++				NULL, 0, NI_NUMERICHOST);
+ 		syslog(LOG_ERR,"failed connect (possible port scan) from %s: %m",
+ 		       remote_addr);
+ 	    }
+ 	    continue;
+ 	}
+-	remote_addr = inet_ntoa (((struct sockaddr_in *)&caddr)->sin_addr);
++	getnameinfo ((struct sockaddr *)&caddr, sizeof(caddr),
++			remote_addr, sizeof(remote_addr),
++			NULL, 0, NI_NUMERICHOST);
+ 
+ 	/*
+ 	 * FIXME: Support for tcp wrapper via hosts.allow and .deny is missing
+--- cfingerd-1.4.3.debian/src/rfc1413.c
++++ cfingerd-1.4.3/src/rfc1413.c
+@@ -14,6 +14,7 @@
+  */
+ 
+ #include "cfingerd.h"
++#include "proto.h"
+ 
+ void rfc1413_alarm(int signal)
+ {
+@@ -25,11 +26,13 @@ void rfc1413_alarm(int signal)
+  * the implementation.  Completely rewritten by yours truly to be self-
+  * contained in a single program.  Simple, easy to use.
+  */
+-#define BUFLEN	256
+-char *get_rfc1413_data( struct sockaddr_in local_addr )
++#define BUFLEN	(2 * INET6_ADDRSTRLEN)
++char *get_rfc1413_data(struct sockaddr_storage * local_addr,
++			struct sockaddr_storage * peer_addr )
+ {
+     int i, j;
+-    struct sockaddr_in sin;
++    unsigned short newport;
++    struct sockaddr_storage sin;
+     char buffer[1024], buf[BUFLEN], uname[64], *bleah;
+     char *cp, *xp;
+     struct servent *serv;
+@@ -37,33 +40,37 @@ char *get_rfc1413_data( struct sockaddr_
+     bleah = (char *) malloc(BUFLEN);
+     memset(bleah, 0, BUFLEN);
+ 
+-    j = socket(AF_INET, SOCK_STREAM, 0);
++    j = socket(local_addr->ss_family, SOCK_STREAM, 0);
+     if (j < 2) {
+ 	snprintf(bleah, BUFLEN, "unknown@%s", remote_addr);
+ 	syslog(LOG_ERR, "rfc1413-socket: %s", strerror(errno));
+ 	return(bleah);
+     }
+ 
+-    sin.sin_family = AF_INET;
+-    sin.sin_addr.s_addr = local_addr.sin_addr.s_addr;
+-    sin.sin_port = 0;
++    memcpy(&sin, local_addr, sizeof(sin));
++    set_port(&sin, 0);
++
+     i = bind(j, (struct sockaddr *) &sin, sizeof(sin));
++
+     if (i < 0) {
+ 	snprintf(bleah, BUFLEN, "unknown@%s", remote_addr);
+ 	syslog(LOG_ERR, "rfc1413-socket: %s", strerror(errno));
+ 	return(bleah);
+     }
+ 
+-    sin.sin_family = AF_INET;
+     if ((serv = getservbyname("auth","tcp")) != NULL)
+-	sin.sin_port = serv->s_port;
++	newport = ntohs(serv->s_port);
+     else
+-	sin.sin_port = htons(113);
+-    sin.sin_addr.s_addr = inet_addr(ip_address);
++	newport = 113;
++
++    memcpy(&sin, peer_addr, sizeof(sin));
++    set_port(&sin, newport);
++
+     signal(SIGALRM, rfc1413_alarm);
+     alarm(5);
+ 
+     i = connect(j, (struct sockaddr *) &sin, sizeof(sin));
++
+     if (i < 0) {
+ 	syslog(LOG_ERR, "rfc1413-connect: %s", strerror(errno));
+ 	close(j);
+--- cfingerd-1.4.3.debian/src/main.c
++++ cfingerd-1.4.3/src/main.c
+@@ -20,13 +20,15 @@
+ #include "privs.h"
+ 
+ CONFIG prog_config;
+-char *remote_addr, *localhost, *ident_user, *ip_address;
++char *localhost, *ident_user;
++char ip_address[INET6_ADDRSTRLEN];
++char remote_addr[INET6_ADDRSTRLEN];
+ FILE *top_display, *bottom_display, *noname_display, *nouser_display,
+      *rejected_display, *identd_display;
+ BOOL local_finger, emulated; 
+-int local_port, remote_port;
++unsigned short local_port, remote_port;
+ unsigned short listen_port;
+-unsigned long listen_addr;
++struct sockaddr_storage listen_addr;
+ 
+ /*
+  * HAS_MATCH
+@@ -62,14 +64,13 @@ int main(int argc, char *argv[])
+     char line[100], username[80], syslog_str[200];
+     int un_type;
+     char *cp;
+-    struct sockaddr_in local_addr;
++    struct sockaddr_storage local_addr;
+     struct servent *serv;
+ 
+     if ((serv = getservbyname("finger","tcp")) != NULL)
+-	listen_port = serv->s_port;
++	listen_port = ntohs(serv->s_port);
+     else
+-	listen_port = htons(79);
+-    listen_addr = htonl(INADDR_ANY);
++	listen_port = 79;
+ 
+     /* Initialize CFINGERD */
+     start_handler();
+@@ -108,7 +109,7 @@ int main(int argc, char *argv[])
+     /* Make sure there is actually data waiting in the finger port */
+     if (!emulated) {
+ 	if (!fgets(username, sizeof(username), stdin)) {
+-	  if (remote_addr != NULL) {
++	  if (remote_addr != NULL && *remote_addr) {
+ 	    syslog(LOG_ERR, "Null query from %s: %m", remote_addr);
+ 	    mylog(LOG_ERROR, remote_addr, strerror(errno));
+ 	  } else {
+@@ -147,33 +148,47 @@ int main(int argc, char *argv[])
+     /* If we're not doing emulated stuff, we can assume that we are running
+        either as a daemon, or under INETD.  In that case... */
+     if (!emulated) {
+-	struct sockaddr_in socket_addr;
+-	struct hostent *host_ent;
+-	int psize = 0;
++	struct sockaddr_storage socket_addr;
++	socklen_t locsize = 0, remsize = 0;
+ 
+ 	/* Can't run from command line (but this should already be checked) */
+-	psize = sizeof(socket_addr);
++	locsize = sizeof(local_addr);
+ 
+-	if (getsockname(0, (struct sockaddr *) &local_addr, &psize)) {
++	if (getsockname(0, (struct sockaddr *) &local_addr, &locsize)) {
+ 	    syslog(LOG_WARNING, "getsockname: %s", strerror(errno));
+ 	    local_port = 0;
+ 	} else
+-	    local_port = ntohs(local_addr.sin_port);
++	    local_port = get_port(&local_addr);
+ 
+-	if (getpeername(0, (struct sockaddr *) &socket_addr, &psize)) {
++	remsize = sizeof(socket_addr);
++
++	if (getpeername(0, (struct sockaddr *) &socket_addr, &remsize)) {
+ 	    printf("Internal error - not running as either a daemon or under INETD.\n");
+ 	    printf("Fatal - getpeername: %s\n", strerror(errno));
+ 	    closelog();
+ 	    mylog(LOG_ERROR, "getpeername: ", strerror(errno));
+ 	    exit(PROGRAM_BUG);
+ 	} else
+-	    remote_port = ntohs(socket_addr.sin_port);
++	    remote_port = get_port(&socket_addr);
+ 
+-	ip_address = inet_ntoa (socket_addr.sin_addr);
++	getnameinfo((struct sockaddr *)&socket_addr, sizeof(socket_addr),
++			ip_address, sizeof(ip_address), NULL, 0,
++			NI_NUMERICHOST);
+ 
+ 	/* Get our host entry */
+-	host_ent = (struct hostent *) gethostbyaddr((char *) &socket_addr.sin_addr,
+-		   sizeof(socket_addr.sin_addr), AF_INET);
++	if (getnameinfo((struct sockaddr *)&socket_addr,
++				sizeof(socket_addr),
++				remote_addr, sizeof(remote_addr), NULL, 0,
++				NI_NAMEREQD)) {
++	    /* A resolved host name is missing:
++	     * copy previous IP address and report. */
++	    strncpy(remote_addr, ip_address, sizeof(remote_addr));
++	    syslog(LOG_WARNING, "%s %s", 
++			prog_config.p_strings[D_IP_NO_MATCH],
++			remote_addr);
++	    if (!(prog_config.config_bits2 & SHOW_IP_MATCH))
++		CF_ERROR(E_NOIP);
++	}
+ 
+ 	/* And get our local-host name */
+ #ifndef	ACTUAL_HOSTNAME
+@@ -182,17 +197,6 @@ int main(int argc, char *argv[])
+ 	localhost = ACTUAL_HOSTNAME;
+ #endif
+ 
+-	/* Make sure we can get the remote host's address name */
+-	if (host_ent == NULL) {
+-	    remote_addr = inettos(socket_addr.sin_addr.s_addr);
+-	    syslog(LOG_WARNING, "%s %s", 
+-		prog_config.p_strings[D_IP_NO_MATCH],
+-		remote_addr);
+-	    if (!(prog_config.config_bits2 & SHOW_IP_MATCH))
+-		CF_ERROR(E_NOIP);
+-	} else
+-	    remote_addr = (char *) host_ent->h_name;
+-
+ 	/* Convert any uppercase letters in the hostname to lowercase */
+ 	for (cp = remote_addr; *cp; cp++)
+ 	    if (isupper(*cp))
+@@ -200,14 +204,17 @@ int main(int argc, char *argv[])
+ 
+ 	/* And find out if this is a local finger */
+ 	if (!strncasecmp(remote_addr, "127.0.0.1", 9) ||
++	    !strncasecmp(remote_addr, "::1", 3) ||
+ 	    !strncasecmp(remote_addr, "localhost", 9) ||
++	    !strncasecmp(remote_addr, "ip6-localhost", 9) ||
++	    !strncasecmp(remote_addr, "ip6-loopback", 9) ||
+ 	    !strncasecmp(remote_addr, "127.0.0.0", 9) || /* KTH 07/26/96 */
+ 	    !strncasecmp(remote_addr, localhost, strlen(localhost)))
+ 	    local_finger = TRUE;
+ 	else
+ 	    local_finger = FALSE;
+ 
+-	ident_user = get_rfc1413_data(local_addr);
++	ident_user = get_rfc1413_data(&local_addr, &socket_addr);
+ 	set_time_format();
+ 
+     } else
+@@ -220,9 +227,9 @@ int main(int argc, char *argv[])
+ 	memset (ident_user, 0, sizeof (ident_user));
+ 	strcpy (ident_user, "emulated");
+ #ifndef	ACTUAL_LOOPBACK
+-	remote_addr = "127.0.0.1";
++	strcpy(remote_addr,"127.0.0.1");
+ #else
+-	remote_addr = ACTUAL_LOOPBACK;
++	strcpy(remote_addr, ACTUAL_LOOPBACK);
+ #endif
+     }
+ 
diff -Nru cfingerd-1.4.3/debian/patches/series cfingerd-1.4.3/debian/patches/series
--- cfingerd-1.4.3/debian/patches/series	1970-01-01 01:00:00.000000000 +0100
+++ cfingerd-1.4.3/debian/patches/series	2010-04-27 18:35:34.000000000 +0200
@@ -0,0 +1,5 @@
+01-from_early_woody.diff
+02-woody_to_early_sarge.diff
+03-sarge_to_late_etch.diff
+10-manpage_macros.diff
+15-ipv6_support.diff
diff -Nru cfingerd-1.4.3/debian/postrm cfingerd-1.4.3/debian/postrm
--- cfingerd-1.4.3/debian/postrm	2010-04-28 01:11:52.000000000 +0200
+++ cfingerd-1.4.3/debian/postrm	2010-04-27 21:37:12.000000000 +0200
@@ -1,5 +1,7 @@
 #! /bin/sh
 
+set -e
+
 if [ "$1" = "purge" ]
 then
     rm -f /var/log/cfingerd.log*
diff -Nru cfingerd-1.4.3/debian/rules cfingerd-1.4.3/debian/rules
--- cfingerd-1.4.3/debian/rules	2010-04-28 01:11:52.000000000 +0200
+++ cfingerd-1.4.3/debian/rules	2010-04-27 21:20:08.000000000 +0200
@@ -95,7 +95,10 @@
 	$(installbin) -d debian/tmp/usr/share/doc/$(package)/examples
 	$(installdoc) debian/{ping,uptime} debian/tmp/usr/share/doc/$(package)/examples
 	$(installdoc) scripts/trace debian/tmp/usr/share/doc/$(package)/examples
+	$(installdoc) debian/cfingerd.xinetd debian/tmp/usr/share/doc/$(package)/examples
 	#
+	dh_strip --tmpdir=debian/tmp
+	dh_md5sums --tmpdir=debian/tmp
 	dpkg-shlibdeps debian/tmp/usr/sbin/{cfingerd,userlist}
 	dpkg-gencontrol -isp
 	chmod -R og=rX debian/tmp
diff -Nru cfingerd-1.4.3/debian/source/format cfingerd-1.4.3/debian/source/format
--- cfingerd-1.4.3/debian/source/format	1970-01-01 01:00:00.000000000 +0100
+++ cfingerd-1.4.3/debian/source/format	2010-04-28 01:11:52.000000000 +0200
@@ -0,0 +1 @@
+3.0 (quilt)
diff -Nru cfingerd-1.4.3/debian/watch cfingerd-1.4.3/debian/watch
--- cfingerd-1.4.3/debian/watch	1970-01-01 01:00:00.000000000 +0100
+++ cfingerd-1.4.3/debian/watch	2010-04-27 19:34:43.000000000 +0200
@@ -0,0 +1,3 @@
+version=3
+
+http://www.infodrom.org/projects/cfingerd/download/cfingerd-([.0-9]*)\.tar\.gz	debian
diff -Nru cfingerd-1.4.3/docs/cfingerd.8 cfingerd-1.4.3/docs/cfingerd.8
--- cfingerd-1.4.3/docs/cfingerd.8	2010-04-28 01:11:52.000000000 +0200
+++ cfingerd-1.4.3/docs/cfingerd.8	1999-09-05 00:39:28.000000000 +0200
@@ -33,7 +33,7 @@
 is a totally new, and totally configurable finger daemon \- 
 one of the first.  It listenes on the finger port (port 79) to provide 
 useful information about each user that is on your system according to
-the finger protocol as described in RFC 1288.  Only thing is, cfingerd
+the finger protocol as described in RFC 1228.  Only thing is, cfingerd
 provides a unique twist.
 .PP
 .B CFINGERD
diff -Nru cfingerd-1.4.3/Makefile.cfg.in cfingerd-1.4.3/Makefile.cfg.in
--- cfingerd-1.4.3/Makefile.cfg.in	2010-04-28 01:11:52.000000000 +0200
+++ cfingerd-1.4.3/Makefile.cfg.in	1999-08-31 02:46:46.000000000 +0200
@@ -1,6 +1,6 @@
 # CFINGERD - Main Makefile configuration
 #
-# $Id: Makefile.cfg.in,v 1.4 1999-08-31 00:46:46 joey Exp $
+# $Id: Makefile.cfg.in,v 1.4 1999/08/31 00:46:46 joey Exp $
 #
 # Copyright (c) 1999 by Martin Schulze <joey@infodrom.north.de>
 #
diff -Nru cfingerd-1.4.3/perl/generic.pl cfingerd-1.4.3/perl/generic.pl
--- cfingerd-1.4.3/perl/generic.pl	2010-04-28 01:11:52.000000000 +0200
+++ cfingerd-1.4.3/perl/generic.pl	1999-08-31 02:46:46.000000000 +0200
@@ -14,11 +14,6 @@
 	chop($uname);
 	$uname =~ tr/a-z/A-Z/;
 
-	# Tiny hack to make GNU/kFreeBSD and GNU/Hurd act as GNU/Linux
-	if (($uname eq 'GNU/KFREEBSD') || ($uname eq 'GNU')) {
-	    $uname = 'LINUX';
-	}
-
 	$ver = `uname -r`;
 	chop($ver);
 
diff -Nru cfingerd-1.4.3/RECOMMEND cfingerd-1.4.3/RECOMMEND
--- cfingerd-1.4.3/RECOMMEND	2010-04-28 01:11:52.000000000 +0200
+++ cfingerd-1.4.3/RECOMMEND	1997-06-15 19:40:32.000000000 +0200
@@ -4,7 +4,7 @@
 After running cfingerd for quite a while, I have found that if you make 
 the cfingerd setup the most secure, you will have the least problems.
 
-CFINGERD currently stops for all files from being symbolic links, char 
+CFINGERD currently stops all files from being symbolic links, char 
 devices, block devices, etc.  Basically, each file has to be a normal 
 file in order to be read by cfingerd.  With that in mind, you should keep 
 all files (whether or not they are read by root) as normal files.  This 
diff -Nru cfingerd-1.4.3/src/fakeuser.c cfingerd-1.4.3/src/fakeuser.c
--- cfingerd-1.4.3/src/fakeuser.c	2010-04-28 01:11:52.000000000 +0200
+++ cfingerd-1.4.3/src/fakeuser.c	1999-09-29 09:04:24.000000000 +0200
@@ -79,7 +79,7 @@
 	    printf("\n                    Sorry, you specified too many options.\n\n");
 	    fflush(stdout);
 	    show_bottom();
-	    mylog(LOG_WARN, "Too many options specified in fake user finger", NULL);
+	    log(LOG_WARN, "Too many options specified in fake user finger", NULL);
 	    return;
  	}
 
@@ -105,7 +105,7 @@
 	    sscanf(username, "%[^.].%[^.].%[^.].%[^.].%[^\r\n]\r\n",
 		data[0], data[1], data[2], data[3], data[4]);
 
-	mylog(LOG_USER, "Fakeuser: ", username);
+	log(LOG_USER, "Fakeuser: ", username);
 
 	funum = search_fake_pos(data[0]);
 
@@ -133,7 +133,7 @@
     } else {
 	printf("\n");
 	printf("             Sorry, this system does not have any fake users enabled!\n\n");
-	mylog(LOG_WARN, "Fake user requested, but rejected - disabled.", " ");
+	log(LOG_WARN, "Fake user requested, but rejected - disabled.", " ");
     }
 
     show_bottom();
diff -Nru cfingerd-1.4.3/src/internal.c cfingerd-1.4.3/src/internal.c
--- cfingerd-1.4.3/src/internal.c	2010-04-28 01:11:52.000000000 +0200
+++ cfingerd-1.4.3/src/internal.c	1999-08-29 10:58:29.000000000 +0200
@@ -72,26 +72,26 @@
     else if (!strncmp(username, "services", 8)) {
 	show_services();
 	syslog(LOG_NOTICE, "%s", prog_config.p_strings[D_SVC_FINGER]);
-	mylog(LOG_USER, "Service request", " ");
+	log(LOG_USER, "Service request", " ");
 	exit(PROGRAM_OKAY);
     } else if (!strncmp(username, "search", 6)) {
 	show_search(username);
 	exit(PROGRAM_OKAY);
     } else if (!strncmp(username, "userlist-only", 13)) {
-	if ((buf = safe_exec(NOBODY_UID, NOBODY_GID, "/usr/sbin/userlist | /usr/bin/tail -n +2")) != NULL) {
+	if ((buf = safe_exec(NOBODY_UID, NOBODY_GID, "/usr/sbin/userlist | /usr/bin/tail +2")) != NULL) {
 	    printf ("%s", buf);
 	    fflush(stdout);
 	    free (buf);
 	}
-	mylog(LOG_USER, "Userlist-only", " ");
+	log(LOG_USER, "Userlist-only", " ");
 	exit(PROGRAM_OKAY);
     } else if (!strncmp(username, "userlist-online", 15)) {
-	if ((buf = safe_exec(NOBODY_UID, NOBODY_GID, "/usr/sbin/userlist -c -n | /usr/bin/tail -n +2")) != NULL) {
+	if ((buf = safe_exec(NOBODY_UID, NOBODY_GID, "/usr/sbin/userlist -c -n | /usr/bin/tail +2")) != NULL) {
 	    printf ("%s", buf);
 	    fflush(stdout);
 	    free (buf);
 	}
-	mylog(LOG_USER, "Userlist-only", " ");
+	log(LOG_USER, "Userlist-only", " ");
 	exit(PROGRAM_OKAY);
     } else if (!strncmp(username, "help", 4)) {
 	show_top();
diff -Nru cfingerd-1.4.3/src/log.c cfingerd-1.4.3/src/log.c
--- cfingerd-1.4.3/src/log.c	2010-04-28 01:11:52.000000000 +0200
+++ cfingerd-1.4.3/src/log.c	1999-07-08 01:18:26.000000000 +0200
@@ -17,7 +17,7 @@
 #include "proto.h"
 #include "privs.h"
 
-void mylog(int logtype, char *msg, char *user)
+void log(int logtype, char *msg, char *user)
 {
     if (can_log && (prog_config.config_bits3 & SHOW_LOG)) {
 	time_t tim = time(NULL);
@@ -80,7 +80,7 @@
     } else {
 	if (!(prog_config.config_bits3 & SHOW_CREATE_FLG)) {
 	    syslog(LOG_WARNING, "Userlog: %s (%s)", filename, strerror(errno));
-	    mylog(LOG_ERROR, "Cannot write to userlog: ", strerror(errno));
+	    log(LOG_ERROR, "Cannot write to userlog: ", strerror(errno));
 	}
     }
 }
diff -Nru cfingerd-1.4.3/src/main.c cfingerd-1.4.3/src/main.c
--- cfingerd-1.4.3/src/main.c	2010-04-28 01:11:52.000000000 +0200
+++ cfingerd-1.4.3/src/main.c	1999-08-06 23:33:38.000000000 +0200
@@ -110,10 +110,10 @@
 	if (!fgets(username, sizeof(username), stdin)) {
 	  if (remote_addr != NULL) {
 	    syslog(LOG_ERR, "Null query from %s: %m", remote_addr);
-	    mylog(LOG_ERROR, remote_addr, strerror(errno));
+	    log(LOG_ERROR, remote_addr, strerror(errno));
 	  } else {
 	    syslog(LOG_ERR, "Null query: %m");
-	    mylog(LOG_ERROR, strerror(errno), strerror(0));
+	    log(LOG_ERROR, strerror(errno), strerror(0));
 	  }
 	    closelog();
 	    exit(PROGRAM_SYSLOG);
@@ -164,7 +164,7 @@
 	    printf("Internal error - not running as either a daemon or under INETD.\n");
 	    printf("Fatal - getpeername: %s\n", strerror(errno));
 	    closelog();
-	    mylog(LOG_ERROR, "getpeername: ", strerror(errno));
+	    log(LOG_ERROR, "getpeername: ", strerror(errno));
 	    exit(PROGRAM_BUG);
 	} else
 	    remote_port = ntohs(socket_addr.sin_port);
@@ -242,7 +242,7 @@
 	    if (!emulated) {
 		snprintf(syslog_str, sizeof(syslog_str), "%s fingered (internal) from %s", username,
 		    ident_user);
-		syslog(LOG_NOTICE, "%s", (char *) syslog_str);
+		syslog(LOG_NOTICE, (char *) syslog_str);
 	    }
 
 	    handle_internal(username);
@@ -255,7 +255,7 @@
 		    snprintf(syslog_str, sizeof(syslog_str), "%s fingered from %s",
 			prog_config.p_strings[D_ROOT_FINGER], ident_user);
 
-		syslog(LOG_NOTICE, "%s", (char *) syslog_str);
+		syslog(LOG_NOTICE, (char *) syslog_str);
 	    }
 
 	    handle_standard(username);
@@ -265,7 +265,7 @@
 		snprintf(syslog_str, sizeof(syslog_str), "%s %s from %s", username, 
 		    prog_config.p_strings[D_FAKE_USER], ident_user);
 
-		syslog(LOG_NOTICE, "%s", (char *) syslog_str);
+		syslog(LOG_NOTICE, (char *) syslog_str);
 	    }
 
 	    handle_fakeuser(username);
diff -Nru cfingerd-1.4.3/src/parse.c cfingerd-1.4.3/src/parse.c
--- cfingerd-1.4.3/src/parse.c	2010-04-28 01:11:52.000000000 +0200
+++ cfingerd-1.4.3/src/parse.c	1999-09-29 09:04:24.000000000 +0200
@@ -137,14 +137,14 @@
 	if (ret == U_FORWARD) {
 	    printf("%s\n", prog_config.p_strings[D_FORWARD_DENY]);
 	    fflush(stdout);
-	    mylog(LOG_USER, "Denied forward: ", username);
+	    log(LOG_USER, "Denied forward: ", username);
 	    exit(1);
 	}
 
 	if (ret == U_ILLEGAL) {
 	    printf("Illegal character in username.\n");
 	    fflush(stdout);
-	    mylog(LOG_USER, "Illegal: ", username);
+	    log(LOG_USER, "Illegal: ", username);
 	    exit(1);
 	}
 
diff -Nru cfingerd-1.4.3/src/proto.h cfingerd-1.4.3/src/proto.h
--- cfingerd-1.4.3/src/proto.h	2010-04-28 01:11:52.000000000 +0200
+++ cfingerd-1.4.3/src/proto.h	1999-08-29 10:58:30.000000000 +0200
@@ -47,7 +47,7 @@
 int wildmat(char *, char *);
 char *get_rfc1413_data(struct sockaddr_in );
 void check_unknown(char *);
-void mylog(int, char *, char *);
+void log(int, char *, char *);
 void userlog(uid_t, gid_t, char *, char *);
 void check_blank_configurations(void);
 int search_fake_pos(char *);
diff -Nru cfingerd-1.4.3/src/rfc1413.c cfingerd-1.4.3/src/rfc1413.c
--- cfingerd-1.4.3/src/rfc1413.c	2010-04-28 01:11:52.000000000 +0200
+++ cfingerd-1.4.3/src/rfc1413.c	1999-08-29 14:14:25.000000000 +0200
@@ -98,8 +98,7 @@
 
 	if (*(++cp) == ' ') cp++;
 	memset(uname, 0, sizeof(uname));
-	for (xp=uname; *cp != '\0' && *cp!='\r'&&*cp!='\r'&&*cp!='\n'&&(strlen(uname)+1)<sizeof(uname); cp++)
-
+	for (xp=uname; *cp != '\0' && *cp!='\r'&&*cp!='\n'&&strlen(uname)<sizeof(uname); cp++)
 	    *(xp++) = *cp;
 
 	if (!strlen(uname)) {
diff -Nru cfingerd-1.4.3/src/search.c cfingerd-1.4.3/src/search.c
--- cfingerd-1.4.3/src/search.c	2010-04-28 01:11:52.000000000 +0200
+++ cfingerd-1.4.3/src/search.c	1999-09-29 09:04:24.000000000 +0200
@@ -36,7 +36,7 @@
     SEARCHLIST searches[MAX_SEARCHES];
     FILE *file;
     char *cp;
-    char *xp;
+    char *xp, y;
 
     show_top();
 
@@ -56,6 +56,13 @@
 	exit(PROGRAM_OKAY);
     }
 
+    for (cp=searchname,xp=searchname,y=0;*cp;cp++) {
+	if (y != *cp)
+	    *(xp++) = *cp;
+	y = *cp;
+    }
+    *xp = '\0';
+	
     if (strlen((char *) searchname) == 0) {
 	printf("\n                    You must supply a name to search for!\n");
 	SEND_RAW_RETURN;
@@ -68,7 +75,7 @@
 	printf("\n                    You must supply a name to search for!\n");
 	SEND_RAW_RETURN;
 	show_bottom();
-	mylog(LOG_USER, "Security breach: finger * from %s", ident_user);
+	log(LOG_USER, "Security breach: finger * from %s", ident_user);
 	syslog(LOG_WARNING, "Security breach: finger * from %s", ident_user);
 	free (searchname);
 	exit(PROGRAM_OKAY);
@@ -78,7 +85,7 @@
       if (isupper(*cp))
 	*cp = tolower(*cp);
 
-    mylog(LOG_USER, "Search: ", searchname);
+    log(LOG_USER, "Search: ", searchname);
 
     NOBODY_PRIVS;
 
diff -Nru cfingerd-1.4.3/src/signal.c cfingerd-1.4.3/src/signal.c
--- cfingerd-1.4.3/src/signal.c	2010-04-28 01:11:52.000000000 +0200
+++ cfingerd-1.4.3/src/signal.c	1998-10-17 20:35:57.000000000 +0200
@@ -81,7 +81,7 @@
 
 	    if (siglist[i].fatal) {
 		printf("\nPlease report this bug to %s!\n", ERRORS_TO);
-		mylog(LOG_ERROR, "Signal (fatal): ", siglist[i].sigtype);
+		log(LOG_ERROR, "Signal (fatal): ", siglist[i].sigtype);
 	    } else {
 		if (siglist[i].value == SIGALRM) {
 		    printf("Ooh, you caught an alarm signal.  This may be a cause from either not\n");
@@ -89,7 +89,7 @@
 		    printf("out on you.  May want to check this.  :)\n\n");
 		}
 
-		mylog(LOG_WARN, "Signal: Alarm signal", " ");
+		log(LOG_WARN, "Signal: Alarm signal", " ");
 
 		printf("Non-fatal; continuing.\n");
 	    }
@@ -99,7 +99,7 @@
 	    if (siglist[i].fatal)
 		exit(PROGRAM_BUG);
 	    else
-		mylog(LOG_WARN, "Signal (non-fatal): ", siglist[i].sigtype);
+		log(LOG_WARN, "Signal (non-fatal): ", siglist[i].sigtype);
 	}
     }
 
@@ -109,7 +109,7 @@
 	syslog(LOG_ERR, "SIGUNKNOWN caught");
 	(void) fflush(stdout);
 
-	mylog(LOG_ERROR, "Signal: Unknown signal", " ");
+	log(LOG_ERROR, "Signal: Unknown signal", " ");
 
 	exit(PROGRAM_BUG);
     }
diff -Nru cfingerd-1.4.3/src/standard.c cfingerd-1.4.3/src/standard.c
--- cfingerd-1.4.3/src/standard.c	2010-04-28 01:11:52.000000000 +0200
+++ cfingerd-1.4.3/src/standard.c	1999-09-29 09:04:24.000000000 +0200
@@ -155,7 +155,6 @@
 	    fflush(stdout);
 	}
 
-	USER_PRIVS(uid, gid);
 	if (exist(d)) {
 	    NOBODY_PRIVS;
 
@@ -164,14 +163,9 @@
 		fflush(stdout);
 	    }
 
-	    USER_PRIVS(uid, gid);
 	    if ((file = open_file(d)) != NULL)
-	    {
-		NOBODY_PRIVS;
 		display_file(uid, gid, file);
-           }
 	} else {
-	    NOBODY_PRIVS;
 	    if (!(prog_config.config_bits3 & SHOW_HEADERS_FE))
 		printf("%s\n", prog_config.p_strings[t3]);
 	    else
@@ -212,7 +206,6 @@
 	    fflush(stdout);
 	}
 
-	USER_PRIVS(uid, gid);
 	if (exist(d)) {
 	    NOBODY_PRIVS;
 
@@ -221,13 +214,9 @@
 		fflush(stdout);
 	    }
 
-	    USER_PRIVS(uid, gid);
-	    if ((file = open_file (d)) != NULL) {
-		NOBODY_PRIVS;
+	    if ((open_file (d)) != NULL)
 		display_file(uid, gid, file);
-           }
 	} else {
-	    NOBODY_PRIVS;
 	    if (!(prog_config.config_bits3 & SHOW_HEADERS_FE))
 		printf("%s\n", prog_config.p_strings[t3]);
 	}
@@ -387,21 +376,11 @@
     sprintf(dev_file, "/dev/%s", tty);
 
     USER_PRIVS(nuid, ngid);
-    if (stat((char *) dev_file, &buf) != 0) {
-	NOBODY_PRIVS;
-	return;
-    }
+    stat((char *) dev_file, &buf);
     NOBODY_PRIVS;
 
-    if (!buf.st_atime || !buf.st_mtime)
-	return;
-
     cur_time = time(NULL);
-    diff_time = buf.st_mtime < buf.st_atime
-		? (long) cur_time - (long) buf.st_mtime
-		: (long) cur_time - (long) buf.st_atime;
-    if (diff_time < 0)
-	diff_time = 0;
+    diff_time = (long) cur_time - (long) buf.st_mtime;
 
     sec = min = hour = day = has = 0;
 
@@ -415,7 +394,7 @@
 	sec = has = 1;
 
     if (has)
-	printf(" idle ");
+	printf(" Idle ");
 
     if (day) {
 	day = diff_time / 86400;
@@ -1023,21 +1002,21 @@
 		memset(uname, 0, 600);
 		printf("\nChecking site %s for the specified user.\n", prog_config.forward[nums]);
 		fflush(stdout);
-		snprintf(uname, sizeof(uname), "/usr/bin/finger \"%s\100%s\" | /usr/bin/tail -n +2", username, prog_config.forward[nums]);
+		snprintf(uname, sizeof(uname), "/usr/bin/finger \"%s\100%s\" | /usr/bin/tail +2", username, prog_config.forward[nums]);
 		if ((buf = safe_exec(NOBODY_UID, NOBODY_GID, uname)) != NULL) {
 		    printf ("%s", buf);
 		    fflush(stdout);
 		    free (buf);
 		}
 		nums++;
-		mylog(LOG_USER, "Forwarded: ", username);
+		log(LOG_USER, "Forwarded: ", username);
 	    }
 	} else {
 	    show_notexist();
 	}
     } else {
 	show_fingerinfo(username);
-	mylog(LOG_USER, "Normal: ", username);
+	log(LOG_USER, "Normal: ", username);
     }
 
     if ((!(prog_config.config_bits2 & SHOW_FINGERFWD)) || 
diff -Nru cfingerd-1.4.3/src/userlist.c cfingerd-1.4.3/src/userlist.c
--- cfingerd-1.4.3/src/userlist.c	2010-04-28 01:11:52.000000000 +0200
+++ cfingerd-1.4.3/src/userlist.c	1999-08-29 11:57:25.000000000 +0200
@@ -56,10 +56,10 @@
 
 		    if (!strcmp (username, "userlist"))
 			snprintf(cmdline, sizeof (cmdline),
-				 "%s -n | /usr/bin/tail -n +2", prog_config.finger_program);
+				 "%s -n | /usr/bin/tail +2", prog_config.finger_program);
 		    else
 			snprintf(cmdline, sizeof (cmdline),
-				 "%s | /usr/bin/tail -n +2", prog_config.finger_program);
+				 "%s | /usr/bin/tail +2", prog_config.finger_program);
 
 		    if ((buf = safe_exec(NOBODY_UID, NOBODY_GID, cmdline)) != NULL) {
 			if (!head) {
@@ -72,10 +72,10 @@
 		    }
 		} else {
 		    if (!strcmp (username, "userlist"))
-			snprintf(cmdline, sizeof(cmdline), "/usr/bin/finger userlist-online@%s | tail -n +2 | grep -v '^$'",
+			snprintf(cmdline, sizeof(cmdline), "/usr/bin/finger userlist-online@%s | tail +2 | grep -v '^$'",
 				 prog_config.finger_sites[i]);
 		    else
-			snprintf(cmdline, sizeof(cmdline), "/usr/bin/finger userlist-only@%s | tail -n +2 | grep -v '^$'",
+			snprintf(cmdline, sizeof(cmdline), "/usr/bin/finger userlist-only@%s | tail +2 | grep -v '^$'",
 				 prog_config.finger_sites[i]);
 
 		    if ((buf = safe_exec(NOBODY_UID, NOBODY_GID, cmdline)) != NULL) {
@@ -92,7 +92,7 @@
 	} else {
 	    if ((!strstr(prog_config.finger_program, "finger")) &&
 		(!strstr(prog_config.finger_program, "w")))
-		snprintf(cmdline, sizeof(cmdline), "%s | /usr/bin/tail -n +2", prog_config.finger_program);
+		snprintf(cmdline, sizeof(cmdline), "%s | /usr/bin/tail +2", prog_config.finger_program);
 	    else 
 		snprintf(cmdline, sizeof(cmdline), "%s", prog_config.finger_program);
 
@@ -144,7 +144,7 @@
 
     show_bottom();
 
-    mylog(LOG_USER, "Userlist request", " ");
+    log(LOG_USER, "Userlist request", " ");
 }
 
 /*
diff -Nru cfingerd-1.4.3/src/util.c cfingerd-1.4.3/src/util.c
--- cfingerd-1.4.3/src/util.c	2010-04-28 01:11:52.000000000 +0200
+++ cfingerd-1.4.3/src/util.c	1999-09-29 09:04:24.000000000 +0200
@@ -178,7 +178,7 @@
 
 	    pos++;
 
-	    while (line[pos] != ' ' && !done && newpos < 80) {
+	    while((line[pos] != ' ') && (!done)) {
 		command[newpos] = line[pos];
 
 		if (line[pos] == ' ')
@@ -298,7 +298,7 @@
 	    for(x = 0; x < center_dist; x++)
 		printf(" ");
 
-	printf("%s", displine);
+	printf(displine);
 
 	free(displine);
     }
@@ -465,7 +465,7 @@
     ret = (char *) malloc(strlen((char *) hostname) +
 			  strlen((char *) domname) + 2);
 
-    sprintf(ret, "%s.%s", (char *) hostname, (char *) domname);
+    snprintf(ret, sizeof(ret), "%s.%s", (char *) hostname, (char *) domname);
     return(ret);
 }
 
@@ -483,7 +483,7 @@
 	    host, prog_config.p_strings[D_REJECT_HOST]);
 	if (prog_config.config_bits2 & SHOW_REJECTED)
 	    display_file(NOBODY_UID, NOBODY_GID, rejected_display);
-	mylog(LOG_IDENT, "Unknown not allowed from ", host);
+	log(LOG_IDENT, "Unknown not allowed from ", host);
 
 	exit(PROGRAM_OKAY);
     }
@@ -537,7 +537,7 @@
 	    if (prog_config.config_bits2 & SHOW_REJECTED)
 		display_file(NOBODY_UID, NOBODY_GID, rejected_display);
 
-	    mylog(LOG_REJECTED, "Rejected host finger detected to ", host);
+	    log(LOG_REJECTED, "Rejected host finger detected to ", host);
 
 	    exit(PROGRAM_OKAY);
 	}
@@ -588,6 +588,7 @@
 	memset (line, 0, 600);
 	while ((read (fd[0], line, sizeof (line)-1)) > 0) {
 	    if ((size += strlen (line)) < MAX_POPEN_BUF) {
+		syslog (LOG_INFO, "Reallocating %d bytes", size);
 		if ((result = (char *) realloc (result, size+1)) == NULL) {
 		    return NULL;
 		}
diff -Nru cfingerd-1.4.3/src/version.c cfingerd-1.4.3/src/version.c
--- cfingerd-1.4.3/src/version.c	2010-04-28 01:11:52.000000000 +0200
+++ cfingerd-1.4.3/src/version.c	1999-07-30 10:18:55.000000000 +0200
@@ -45,7 +45,7 @@
     printf("The last stable version of CFINGERD is %s\n\n", LAST_STABLE_RELEASE);
 #endif
 
-    mylog(LOG_USER, "Version information", " ");
+    log(LOG_USER, "Version information", " ");
 
     fflush(stdout);
     exit(PROGRAM_OKAY);
diff -Nru cfingerd-1.4.3/userlist/display.c cfingerd-1.4.3/userlist/display.c
--- cfingerd-1.4.3/userlist/display.c	2010-04-28 01:11:52.000000000 +0200
+++ cfingerd-1.4.3/userlist/display.c	1999-09-29 09:04:24.000000000 +0200
@@ -79,7 +79,7 @@
 
 	if (strlen((char *) tty_list[i].username) > 1) {
 	    char *username=NULL;
-	    char ru[9], fn[STRLEN];
+	    char ru[8], fn[STRLEN];
 
 	    memset(ru, 0, sizeof (ru));
 	    memset(fn, 0, sizeof (fn));
@@ -89,8 +89,6 @@
 	    pwent = getpwnam((char *) ru);
 
 	    if (pwent) {
-		char *cp, *x;
-
 		cp = pwent->pw_gecos;
 		if ((x = index (pwent->pw_gecos, ',')) != NULL) /* username */
 		    *x = '\0';
diff -Nru cfingerd-1.4.3/userlist/idle.c cfingerd-1.4.3/userlist/idle.c
--- cfingerd-1.4.3/userlist/idle.c	2010-04-28 01:11:52.000000000 +0200
+++ cfingerd-1.4.3/userlist/idle.c	1999-08-06 00:52:37.000000000 +0200
@@ -24,16 +24,10 @@
 
     snprintf(dev_file, sizeof (dev_file), "/dev/%s", tty);
 
-    if (stat((char *) dev_file, &buf) != 0 || !buf.st_atime || !buf.st_mtime) {
-	sprintf(idledisp, "-");
-	return idledisp;
-    }
+    stat((char *) dev_file, &buf);
     cur_time = time(NULL);
-    diff_time = buf.st_mtime < buf.st_atime
-		? (long) cur_time - (long) buf.st_mtime
-		: (long) cur_time - (long) buf.st_atime;
-    if (diff_time < 0)
-	diff_time = 0;
+
+    diff_time = (long) cur_time - (long) buf.st_mtime;
 
     min = hour = day = 0;
 
@@ -51,7 +45,7 @@
 
     if (day) {
 	if (no_idle) return NULL;
-	snprintf(idledisp, sizeof (idledisp), "%1dd", day);
+	snprintf(idledisp, sizeof (idledisp), "%1dd ", day);
 	return idledisp;
     }
 
