diff --git a/tmp/checkbashisms b/usr/bin/checkbashisms
index ee31784..38e9858 100755
--- a/tmp/checkbashisms
+++ b/usr/bin/checkbashisms
@@ -265,7 +265,7 @@ foreach my $filename (@ARGV) {
 		    $templine =~ s/$otherquote.*?$quote.*?$otherquote//g;
 		    # "\""
 		    $templine =~ s/(^|[^\\])$quote\\$quote$quote/$1/g;
-		    my $count = () = $templine =~ /(^|[^\\])$quote/g;
+		    my $count = () = $templine =~ /(^|(?!\\))$quote/g;
 
 		    # If there's an odd number of non-escaped
 		    # quotes in the line it's almost certainly the
@@ -451,6 +451,9 @@ sub script_is_evil_and_wrong {
 
 	    $ret = $. - 1;
 	    last;
+	} elsif (m'@DPATCH@') {
+	    $ret = $. - 1;
+	    last;
 	}
 
     }
@@ -461,7 +464,7 @@ sub script_is_evil_and_wrong {
 sub init_hashes {
 
     %bashisms = (
-	qr'(?:^|\s+)function \w+(\s|\(|\Z)' => q<'function' is useless>,
+	$LEADIN . qr'function \w+(\s|\(|\Z)' => q<'function' is useless>,
 	$LEADIN . qr'select\s+\w+' =>     q<'select' is not POSIX>,
 	qr'(test|-o|-a)\s*[^\s]+\s+==\s' =>
 	                               q<should be 'b = a'>,
@@ -477,7 +480,6 @@ sub init_hashes {
 	$LEADIN . qr'exec\s+-[acl]' =>    q<exec -c/-l/-a name>,
 	$LEADIN . qr'let\s' =>            q<let ...>,
 	qr'(?<![\$\(])\(\(.*\)\)' =>     q<'((' should be '$(('>,
-	qr'\$\[[^][]+\]' =>	       q<'$[' should be '$(('>,
 	qr'(?:^|\s+)(\[|test)\s+-a' =>            q<test with unary -a (should be -e)>,
 	qr'\&>' =>	               q<should be \>word 2\>&1>,
 	qr'(<\&|>\&)\s*((-|\d+)[^\s;|)`&\\\\]|[^-\d\s]+)' =>
@@ -508,14 +510,14 @@ sub init_hashes {
 	$LEADIN . qr'time\s' =>          q<time>,
 	$LEADIN . qr'dirs(\s|\Z)' =>          q<dirs>,
 	qr'(?:^|\s+)[<>]\(.*?\)'	    => q<\<() process substituion>,
-	qr'(?:^|\s+)readonly\s+-[af]' => q<readonly -[af]>,
+	$LEADIN . qr'readonly\s+-[af]' => q<readonly -[af]>,
 	$LEADIN . qr'(sh|\$\{?SHELL\}?) -[rD]' => q<sh -[rD]>,
 	$LEADIN . qr'(sh|\$\{?SHELL\}?) --\w+' =>  q<sh --long-option>,
 	$LEADIN . qr'(sh|\$\{?SHELL\}?) [-+]O' =>  q<sh [-+]O>,
     );
 
     %string_bashisms = (
-	qr'\$\[\w+\]' =>                 q<arithmetic not allowed>,
+	qr'\$\[[^][]+\]' =>	       q<'$[' should be '$(('>,
 	qr'\$\{\w+\:\d+(?::\d+)?\}' =>   q<${foo:3[:1]}>,
 	qr'\$\{!\w+[\@*]\}' =>           q<${!prefix[*|@]>,
 	qr'\$\{!\w+\}' =>                q<${!name}>,
@@ -533,11 +535,11 @@ sub init_hashes {
 	qr'\$\{?PIPESTATUS\}?\b'      => q<$PIPESTATUS>,
 	qr'\$\{?SHLVL\}?\b'           => q<$SHLVL>,
 	qr'<<<'                       => q<\<\<\< here string>,
-	$LEADIN . qr'echo\s+(?:-[^e\s]+\s+)?\"[^\"]*(\\[\\abcEfnrtv0])+.*?[\"]' => q<unsafe echo with backslash>,
+	$LEADIN . qr'echo\s+(?:-[^e\s]+\s+)?\"[^\"]*(\\[abcEfnrtv0])+.*?[\"]' => q<unsafe echo with backslash>,
     );
 
     %singlequote_bashisms = (
-	$LEADIN . qr'echo\s+(?:-[^e\s]+\s+)?\'[^\']*(\\[\\abcEfnrtv0])+.*?[\']' => q<unsafe echo with backslash>,
+	$LEADIN . qr'echo\s+(?:-[^e\s]+\s+)?\'[^\']*(\\[abcEfnrtv0])+.*?[\']' => q<unsafe echo with backslash>,
 	$LEADIN . qr'source\s+[\"\']?(?:\.\/|\/|\$|[\w.~-])[^\s]+' =>
 	                               q<should be '.', not 'source'>,
     );
