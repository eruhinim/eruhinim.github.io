diff -ru dbconfig-common-1.8.29/dpkg/common dbconfig-common-1.8.29.1/dpkg/common
--- dbconfig-common-1.8.29/dpkg/common	2006-11-06 20:59:16.000000000 +0100
+++ dbconfig-common-1.8.29.1/dpkg/common	2006-12-17 12:44:33.000000000 +0100
@@ -216,20 +216,20 @@
 	# for the second time via dpkg, then there is no on-disk
 	# configuration to preseed with, and we would in fact nuke
 	# the previous answers.  so we check to avoid that.
-	db_get $dbc_package/internal/skip-preseed && skip_preseed="$RET"
-	db_reset $dbc_package/internal/skip-preseed
+	db_get $dbc_package/internal/skip-preseed && skip_preseed="$RET" || true
+	db_reset $dbc_package/internal/skip-preseed || true
 	if [ "$skip_preseed" = "true" ]; then 
 		dbc_read_package_debconf
 		return 0 
 	fi
 
 	# set whether they want our help
-	db_set $dbc_package/dbconfig-install "$dbc_install"
-	db_set $dbc_package/dbconfig-upgrade "$dbc_upgrade"
-	db_set $dbc_package/dbconfig-remove "$dbc_remove"
+	db_set $dbc_package/dbconfig-install "$dbc_install" || true
+	db_set $dbc_package/dbconfig-upgrade "$dbc_upgrade" || true
+	db_set $dbc_package/dbconfig-remove "$dbc_remove" || true
 
 	# set the dbtype
-	db_set $dbc_package/database-type "$dbc_dbtype"
+	db_set $dbc_package/database-type "$dbc_dbtype" || true
 
 	# the following db-specific settings always need to be preseeded unless
 	# we specifically know we're not configuring for the given database type
@@ -237,10 +237,10 @@
 	# set the psql authentication method
 	if [ -z "$dbc_dbtype" ] || [ "$dbc_dbtype" = "pgsql" ]; then
 		if [ "$dbc_authmethod_admin" ]; then
-			db_set $dbc_package/pgsql/authmethod-admin "$dbc_authmethod_admin"
+			db_set $dbc_package/pgsql/authmethod-admin "$dbc_authmethod_admin" || true
 		fi
 		if [ "$dbc_authmethod_user" ]; then
-			db_set $dbc_package/pgsql/authmethod-user "$dbc_authmethod_user"
+			db_set $dbc_package/pgsql/authmethod-user "$dbc_authmethod_user" || true
 		fi
 	fi
 
@@ -248,17 +248,17 @@
 	if echo "$dbc_authenticated_dbtypes" | grep -q "$dbc_dbtype"; then
 		# set app user
 		if [ "$dbc_dbuser" ]; then
-			db_set $dbc_package/db/app-user "$dbc_dbuser"
+			db_set $dbc_package/db/app-user "$dbc_dbuser" || true
 		fi
 
 		# set the app user password
 		if [ "$dbc_dbpass" ]; then
-			db_set $dbc_package/$dbc_dbtype/app-pass "$dbc_dbpass"
+			db_set $dbc_package/$dbc_dbtype/app-pass "$dbc_dbpass" || true
 		fi
 
 		# set the database administrator name
 		if [ "$dbc_dbadmin" ]; then
-			db_set $dbc_package/$dbc_dbtype/admin-user "$dbc_dbadmin"
+			db_set $dbc_package/$dbc_dbtype/admin-user "$dbc_dbadmin" || true
 		fi
 	fi
 
@@ -266,10 +266,10 @@
 	if echo "$dbc_remote_dbtypes" | grep -q "$dbc_dbtype"; then
 		# set the remote server/port
 		if [ "$dbc_dbserver" ]; then
-			db_set $dbc_package/remote/host "$dbc_dbserver"
+			db_set $dbc_package/remote/host "$dbc_dbserver" || true
 		fi
 		if [ "$dbc_dbport" ]; then
-			db_set $dbc_package/remote/port "$dbc_dbport"
+			db_set $dbc_package/remote/port "$dbc_dbport" || true
 		fi
 	fi
 
@@ -277,13 +277,13 @@
 	if echo "$dbc_fs_dbtypes" | grep -qa "$dbc_dbtype"; then
 		# set the directory that the database file is found in
 		if [ "$dbc_basepath" ]; then
-			db_set $dbc_package/db/basepath "$dbc_basepath"
+			db_set $dbc_package/db/basepath "$dbc_basepath" || true
 		fi
 	fi
 
 	# set the name of the database to be created
 	if [ "$dbc_dbname" ]; then
-		db_set $dbc_package/db/dbname "$dbc_dbname"
+		db_set $dbc_package/db/dbname "$dbc_dbname" || true
 	fi
 
 	case $dbc_dbtype in
@@ -291,16 +291,16 @@
 		# ident based auth doesn't need a password
 		if [ "$dbc_authmethod_admin" != "ident" ]; then
 			# set the database administrator pass
-			db_set $dbc_package/pgsql/admin-pass "$dbc_dbadmpass"
+			db_set $dbc_package/pgsql/admin-pass "$dbc_dbadmpass" || true
 		fi
 		if [ "$dbc_authmethod_user" != "ident" ]; then
 			# set the database user pass
-			db_set $dbc_package/pgsql/app-pass "$dbc_dbpass"
+			db_set $dbc_package/pgsql/app-pass "$dbc_dbpass" || true
 		fi
 
 		# set whether or not they want to force SSL
 		if [ "$dbc_ssl" = "true" ]; then
-			db_set $dbc_package/pgsql/method "tcp/ip + ssl"
+			db_set $dbc_package/pgsql/method "tcp/ip + ssl" || true
 		fi
 	;;
 	esac
@@ -317,15 +317,15 @@
 
 	# gracefully fetch this to support multi-dbtype packages
 	if [ ! "$dbc_hardcoded_dbtype" ]; then
-		db_get $dbc_package/database-type && dbc_dbtype="$RET"
+		db_get $dbc_package/database-type && dbc_dbtype="$RET" || true
 	fi
 	# dbconfig needs to be reloaded at this point for multi-dbtype apps
 	dbc_set_dbtype_defaults $dbc_dbtype
 
 	# get whether they want our help with various stuff
-	db_get $dbc_package/dbconfig-install && dbc_install="$RET"
-	db_get $dbc_package/dbconfig-upgrade && dbc_upgrade="$RET"
-	db_get $dbc_package/dbconfig-remove && dbc_remove="$RET"
+	db_get $dbc_package/dbconfig-install && dbc_install="$RET" || true
+	db_get $dbc_package/dbconfig-upgrade && dbc_upgrade="$RET" || true
+	db_get $dbc_package/dbconfig-remove && dbc_remove="$RET" || true
 
 	# if they don't want help, then we're done and return early
 	if [ "$dbc_install" != "true" ]; then return 0; fi
@@ -335,42 +335,42 @@
 
 	if echo "$dbc_authenticated_dbtypes" | grep -q "$dbc_dbtype"; then
 		# get app user
-		db_get $dbc_package/db/app-user && dbc_dbuser="$RET"
+		db_get $dbc_package/db/app-user && dbc_dbuser="$RET" || true
 
 		# get the app user password
-		db_get $dbc_package/$dbc_dbtype/app-pass && dbc_dbpass="$RET"
+		db_get $dbc_package/$dbc_dbtype/app-pass && dbc_dbpass="$RET" || true
 
 		# get the database administrator name
-		db_get $dbc_package/$dbc_dbtype/admin-user && dbc_dbadmin="$RET"
+		db_get $dbc_package/$dbc_dbtype/admin-user && dbc_dbadmin="$RET" || true
 
 		# get the database administrator pass
-		db_get $dbc_package/$dbc_dbtype/admin-pass && dbc_dbadmpass="$RET"
+		db_get $dbc_package/$dbc_dbtype/admin-pass && dbc_dbadmpass="$RET" || true
 	fi
 
 	if echo "$dbc_remote_dbtypes" | grep -q "$dbc_dbtype"; then
 
 		# get the db server/port
-		db_get $dbc_package/remote/host && dbc_dbserver="$RET"
-		db_get $dbc_package/remote/port && dbc_dbport="$RET"
+		db_get $dbc_package/remote/host && dbc_dbserver="$RET" || true
+		db_get $dbc_package/remote/port && dbc_dbport="$RET" || true
 	fi
 
 	if echo "$dbc_fs_dbtypes" | grep -qa "$dbc_dbtype"; then
 		# get the directory that the database file is found in
-		db_get $dbc_package/db/basepath && dbc_basepath="$RET"
+		db_get $dbc_package/db/basepath && dbc_basepath="$RET" || true
 	fi
 
 	# get the name of the database to be created
-	db_get $dbc_package/db/dbname && dbc_dbname="$RET"
+	db_get $dbc_package/db/dbname && dbc_dbname="$RET" || true
 
 	# a few db-specific things
 	case $dbc_dbtype in
 	"pgsql")
 		# get the psql authentication method
-		db_get $dbc_package/pgsql/authmethod-admin && dbc_authmethod_admin="$RET"
-		db_get $dbc_package/pgsql/authmethod-user && dbc_authmethod_user="$RET"
+		db_get $dbc_package/pgsql/authmethod-admin && dbc_authmethod_admin="$RET" || true
+		db_get $dbc_package/pgsql/authmethod-user && dbc_authmethod_user="$RET" || true
 
 		# get whether or not they want to force SSL
-		db_get $dbc_package/pgsql/method && dbc_method="$RET"
+		db_get $dbc_package/pgsql/method && dbc_method="$RET" || true
 		if [ "$dbc_method" = "tcp/ip + ssl" ]; then
 			dbc_ssl="true"
 		fi
@@ -524,17 +524,17 @@
 	if [ "$_dbc_no_act" ]; then
 		return 0;
 	fi
-	db_fset $dbc_package/install-error seen false
-	db_subst $dbc_package/install-error error $dbc_error
+	db_fset $dbc_package/install-error seen false || true
+	db_subst $dbc_package/install-error error $dbc_error || true
 	db_input critical $dbc_package/install-error || true
 	db_go || true
-	db_get $dbc_package/install-error
+	db_get $dbc_package/install-error || true
 	_dbc_on_error_option="$RET"
 	
 	if [ "$_dbc_on_error_option" = "abort" ]; then
 		# forget that we've seen all the debconf questions
 		for f in $dbc_register_templates; do
-			db_fset $dbc_package/$f seen false
+			db_fset $dbc_package/$f seen false || true
 		done
 		
 		echo "dbconfig-common: $dbc_package $dbc_command: aborted." >&2
@@ -545,7 +545,7 @@
 	if [ "$_dbc_on_error_option" = "retry" ]; then
 		# forget that we've seen all the debconf questions
 		for f in $dbc_register_templates; do
-			db_fset $dbc_package/$f seen false
+			db_fset $dbc_package/$f seen false || true
 		done
 		
 		echo "dbconfig-common: $dbc_package $dbc_command: trying again." >&2
@@ -590,18 +590,18 @@
 dbc_upgrade_error(){
 	echo "error encountered $1:" >&2
 	echo $dbc_error >&2
-	db_fset $dbc_package/upgrade-error seen false
-	db_subst $dbc_package/upgrade-error error $dbc_error
-	db_subst $dbc_package/upgrade-error dbfile $dbc_dbfile
+	db_fset $dbc_package/upgrade-error seen false || true
+	db_subst $dbc_package/upgrade-error error $dbc_error || true
+	db_subst $dbc_package/upgrade-error dbfile $dbc_dbfile || true
 	db_input critical $dbc_package/upgrade-error || true
 	db_go || true
-        db_get $dbc_package/upgrade-error
+        db_get $dbc_package/upgrade-error || true
         _dbc_on_error_option="$RET"
 
         if [ "$_dbc_on_error_option" = "abort" ]; then
         	# forget that we've seen all the debconf questions
         	for f in $dbc_register_templates; do
-               		db_fset $dbc_package/$f seen false
+               		db_fset $dbc_package/$f seen false || true
         	done
 		echo "dbconfig-common: $dbc_package $dbc_command: aborted." >&2
 		dbc_postinst_cleanup
@@ -611,7 +611,7 @@
         if [ "$_dbc_on_error_option" = "retry" ]; then
         	# forget that we've seen all the debconf questions
         	for f in $dbc_register_templates; do
-               		db_fset $dbc_package/$f seen false
+               		db_fset $dbc_package/$f seen false || true
         	done
 		echo "dbconfig-common: $dbc_package $dbc_command: retrying." >&2
                 . /usr/share/dbconfig-common/dpkg/config
@@ -635,18 +635,18 @@
 dbc_remove_error(){
 	echo "error encountered $1:" >&2
 	echo $dbc_error >&2
-	db_fset $dbc_package/remove-error seen false
-	db_subst $dbc_package/remove-error error $dbc_error
+	db_fset $dbc_package/remove-error seen false || true
+	db_subst $dbc_package/remove-error error $dbc_error || true
 	db_input critical $dbc_package/remove-error || true
 	db_go || true
 
-        db_get $dbc_package/remove-error
+        db_get $dbc_package/remove-error || true
         _dbc_on_error_option="$RET"
 
 	if [ "$_dbc_on_error_option" = "abort" ]; then
         	# forget that we've seen all the debconf questions
         	for f in $dbc_register_templates; do
-               		db_fset $dbc_package/$f seen false
+               		db_fset $dbc_package/$f seen false || true
         	done
 		echo "dbconfig-common: $dbc_package $dbc_command: aborted." >&2
 		dbc_postinst_cleanup
@@ -656,7 +656,7 @@
         if [ "$_dbc_on_error_option" = "retry" ]; then
         	# forget that we've seen all the debconf questions
         	for f in $dbc_register_templates; do
-               		db_fset $dbc_package/$f seen false
+               		db_fset $dbc_package/$f seen false || true
         	done
 		echo "dbconfig-common: $dbc_package $dbc_command: retrying." >&2
 		. /usr/share/dbconfig-common/dpkg/config
@@ -699,7 +699,7 @@
 	local have_admin_pass pass1
 	dbc_debug "dbc_get_admin_pass() $@"
 
-	db_fget $dbc_package/$dbc_dbtype/admin-pass seen 
+	db_fget $dbc_package/$dbc_dbtype/admin-pass seen  || true
 	if [ "$RET" = "true" ]; then
 		have_admin_pass="yes"
 	fi
@@ -709,20 +709,20 @@
 		# get the administrative password
 		db_input high $dbc_package/$dbc_dbtype/admin-pass || true
 		db_go || true
-		db_get $dbc_package/$dbc_dbtype/admin-pass
+		db_get $dbc_package/$dbc_dbtype/admin-pass || true
 		pass1="$RET"
 
 		if [ "$dbc_dbtype" = "pgsql" -a ! "$pass1" ]; then
 			db_input high $dbc_package/pgsql/no-empty-passwords || true
-			db_reset $dbc_package/$dbc_dbtype/admin-pass
-			db_fset $dbc_package/$dbc_dbtype/admin-pass seen false
+			db_reset $dbc_package/$dbc_dbtype/admin-pass || true
+			db_fset $dbc_package/$dbc_dbtype/admin-pass seen false || true
 			db_go || true
 		else
 			have_admin_pass="yes"
 		fi
 	done
 
-	db_get $dbc_package/$dbc_dbtype/admin-pass
+	db_get $dbc_package/$dbc_dbtype/admin-pass || true
 	dbc_dbadmpass="$RET"
 }
 
@@ -735,30 +735,30 @@
 	local have_app_pass pass1 pass2
 	dbc_debug "dbc_get_app_pass() $@"
 
-	db_fget $dbc_package/$dbc_dbtype/app-pass seen 
+	db_fget $dbc_package/$dbc_dbtype/app-pass seen  || true
 	if [ "$RET" = "true" ]; then
 		have_app_pass="yes"
-		db_get $dbc_package/$dbc_dbtype/app-pass
+		db_get $dbc_package/$dbc_dbtype/app-pass || true
 		dbc_dbpass="$RET"
 	fi
 
 	# make sure the passwords are the same, safely
 	while [ ! "$have_app_pass" ]; do
 		# forget the password-confirm question first, as it's shared
-		db_reset $dbc_package/app-password-confirm
-		db_fset $dbc_package/app-password-confirm seen false
+		db_reset $dbc_package/app-password-confirm || true
+		db_fset $dbc_package/app-password-confirm seen false || true
 
 		# get the appistrative password
 		db_input high $dbc_package/$dbc_dbtype/app-pass || true
 		db_go || true
-		db_get $dbc_package/$dbc_dbtype/app-pass
+		db_get $dbc_package/$dbc_dbtype/app-pass || true
 		pass1="$RET"
 
 		# get the password again, if it is not empty
 		if [ "$pass1" ]; then
 			db_input high $dbc_package/app-password-confirm || true
 			db_go || true
-			db_get $dbc_package/app-password-confirm
+			db_get $dbc_package/app-password-confirm || true
 			pass2="$RET"
 		fi
 
@@ -768,8 +768,8 @@
 			have_app_pass="yes"
 		else
 			# tell them the passwords didn't match, loop again
-			db_reset $dbc_package/$dbc_dbtype/app-pass
-			db_fset $dbc_package/$dbc_dbtype/app-pass seen false
+			db_reset $dbc_package/$dbc_dbtype/app-pass || true
+			db_fset $dbc_package/$dbc_dbtype/app-pass seen false || true
 			db_input high $dbc_package/passwords-do-not-match || true
 			db_go || true
 		fi
@@ -777,8 +777,8 @@
 
 	if [ ! "$dbc_dbpass" ]; then
 		dbc_dbpass=`env LANG=C LC_ALL=C sed -n -e 's/[^[:alnum:]]//g;p;q' < /dev/urandom | cut -b1-12`
-		db_set $dbc_package/$dbc_dbtype/app-pass "$dbc_dbpass"
-		db_set $dbc_package/app-password-confirm "$dbc_dbpass"
+		db_set $dbc_package/$dbc_dbtype/app-pass "$dbc_dbpass" || true
+		db_set $dbc_package/app-password-confirm "$dbc_dbpass" || true
 	fi
 }
 
@@ -795,7 +795,7 @@
 			dbc_forget_app_password
 		fi
 	fi
-	db_reset $dbc_package/internal/skip-preseed
+	db_reset $dbc_package/internal/skip-preseed || true
 }
 
 ##
@@ -845,13 +845,13 @@
 
 	for f in $dbc_register_templates; do
 		# perform some basic customizing substitutions
-		db_register dbconfig-common/$f $dbc_package/$f
-		db_subst $dbc_package/$f pkg $dbc_package
+		db_register dbconfig-common/$f $dbc_package/$f || true
+		db_subst $dbc_package/$f pkg $dbc_package || true
 		if [ "$dbc_dbvendor" ]; then
-			db_subst $dbc_package/$f dbvendor $dbc_dbvendor
+			db_subst $dbc_package/$f dbvendor $dbc_dbvendor || true
 		fi
 	done
 	if [ "$dbc_dbtypes" ]; then
-		db_subst $dbc_package/database-type database_types $dbc_dbtypes
+		db_subst $dbc_package/database-type database_types $dbc_dbtypes || true
 	fi
 }
diff -ru dbconfig-common-1.8.29/dpkg/config dbconfig-common-1.8.29.1/dpkg/config
--- dbconfig-common-1.8.29/dpkg/config	2006-10-12 23:52:19.000000000 +0200
+++ dbconfig-common-1.8.29.1/dpkg/config	2006-12-17 12:40:39.000000000 +0100
@@ -9,7 +9,7 @@
 
 	dbc_config $@
 
-	db_capb backup
+	db_capb backup || true
 
 	# only do this on install/reconfigure
 	if [ "$dbc_command" != "configure" ] && [ "$dbc_command" != "reconfigure" ];
@@ -58,7 +58,7 @@
 		# if we are reconfiguring (via dpkg-reconfigure), also leave a hint
 		# for our future postinst selves so we know we *should* run the code
 		# that would otherwise think we were upgrading
-		db_set $dbc_package/internal/reconfiguring true
+		db_set $dbc_package/internal/reconfiguring true || true
 	fi
 
 	# and start our beautiful state-machine
@@ -80,7 +80,7 @@
 	#         - see if this is an upgrade newly supporting dbc
 	#         - multidb support step 1
 	2)
-		db_get $install_question
+		db_get $install_question || true
 		if [ "$RET" != "true" ]; then
 			return 0;
 		fi
@@ -125,24 +125,24 @@
 					for f in pgsql/authmethod-admin pgsql/authmethod-user $dbc_dbtype/admin-user db/app-user; do
 						db_fset $dbc_package/$f seen true || true
 					done
-					db_set $dbc_package/db/app-user "$dbc_dbuser"
-					db_set $dbc_package/$dbc_dbtype/app-pass "$dbc_dbpass"
-					db_set $dbc_package/password-confirm "$dbc_dbpass"
+					db_set $dbc_package/db/app-user "$dbc_dbuser" || true
+					db_set $dbc_package/$dbc_dbtype/app-pass "$dbc_dbpass" || true
+					db_set $dbc_package/password-confirm "$dbc_dbpass" || true
 				fi
 				if echo "$dbc_remote_dbtypes" | grep -q "$dbc_dbtype"; then
 					for f in remote/host remote/newhost remote/port ; do
 						db_fset $dbc_package/$f seen true || true
 					done
-					db_set $dbc_package/remote/host "$dbc_dbserver"
-					db_set $dbc_package/remote/newhost "$dbc_dbserver"
-					db_set $dbc_package/remote/port "$dbc_dbport"
+					db_set $dbc_package/remote/host "$dbc_dbserver" || true
+					db_set $dbc_package/remote/newhost "$dbc_dbserver" || true
+					db_set $dbc_package/remote/port "$dbc_dbport" || true
 					if [ "$dbc_dbserver" ]; then
-						db_set $dbc_package/$dbc_dbtype/method "tcp/ip"
+						db_set $dbc_package/$dbc_dbtype/method "tcp/ip" || true
 					fi
 				fi
 
-				db_set $dbc_package/database-type $dbc_dbtype
-				db_set $dbc_package/db/dbname "$dbc_dbname"
+				db_set $dbc_package/database-type $dbc_dbtype || true
+				db_set $dbc_package/db/dbname "$dbc_dbname" || true
 
 				dbc_logline "done"
 			fi
@@ -180,14 +180,14 @@
 			if [ ! "$dbc_dbtype" ]; then
 				dbc_dbtype="$default_dbtype"
 			fi
-			db_set $dbc_package/database-type "$dbc_dbtype"
+			db_set $dbc_package/database-type "$dbc_dbtype" || true
 			db_input high $dbc_package/database-type || true
 		fi
 	;;
 	# state 3 - multidb support part 2, pre-seeding, get conn. method
 	3)
 		if [ "$dbc_dbtypes" ]; then
-			db_get $dbc_package/database-type && dbc_dbtype="$RET"
+			db_get $dbc_package/database-type && dbc_dbtype="$RET" || true
 			# now that we have a dbtype, reload common to set other defaults
 			dbc_config $@
 		fi
@@ -215,50 +215,50 @@
 		fi
 
 		# pre-seed any already defined values into debconf as defaults
-		db_set $dbc_package/db/dbname "$dbc_dbname"
+		db_set $dbc_package/db/dbname "$dbc_dbname" || true
 		if [ "$dbc_upgrade" ]; then
-			db_set $dbc_package/dbconfig-upgrade "$dbc_upgrade"
+			db_set $dbc_package/dbconfig-upgrade "$dbc_upgrade" || true
 		fi
 		if [ "$dbc_remove" ]; then
-			db_set $dbc_package/dbconfig-remove "$dbc_remove"
+			db_set $dbc_package/dbconfig-remove "$dbc_remove" || true
 		fi
 		if echo "$dbc_authenticated_dbtypes" | grep -q "$dbc_dbtype"; then
 			if [ "$dbc_dbuser" ]; then 
-				db_set $dbc_package/db/app-user "$dbc_dbuser"
+				db_set $dbc_package/db/app-user "$dbc_dbuser" || true
 			fi
 			if [ "$dbc_dbpass" ]; then 
-				db_set $dbc_package/$dbc_dbtype/app-pass "$dbc_dbpass"
-				db_fset $dbc_package/$dbc_dbtype/app-pass seen true
-				db_set $dbc_package/app-password-confirm "$dbc_dbpass"
-				db_fset $dbc_package/app-password-confirm seen true
+				db_set $dbc_package/$dbc_dbtype/app-pass "$dbc_dbpass" || true
+				db_fset $dbc_package/$dbc_dbtype/app-pass seen true || true
+				db_set $dbc_package/app-password-confirm "$dbc_dbpass" || true
+				db_fset $dbc_package/app-password-confirm seen true || true
 			fi
 			if [ "$dbc_dbadmin" ]; then
-				db_set $dbc_package/$dbc_dbtype/admin-user "$dbc_dbadmin"
+				db_set $dbc_package/$dbc_dbtype/admin-user "$dbc_dbadmin" || true
 			fi
 		fi
 		if echo "$dbc_remote_dbtypes" | grep -q "$dbc_dbtype"; then
 			if [ "$dbc_dbserver" ]; then
-				db_set $dbc_package/remote/host "$dbc_dbserver"
+				db_set $dbc_package/remote/host "$dbc_dbserver" || true
 			fi
 			if [ "$dbc_dbport" ]; then
-				db_set $dbc_package/remote/port "$dbc_dbport"
+				db_set $dbc_package/remote/port "$dbc_dbport" || true
 			fi
 			if [ "$dbc_ssl" = "true" -a "$dbc_dbtype" = "pgsql" ]; then
-				db_set $dbc_package/pgsql/method "tcp/ip + ssl"
+				db_set $dbc_package/pgsql/method "tcp/ip + ssl" || true
 			fi
 			db_input $dbc_remote_questions_priority $dbc_package/$dbc_dbtype/method || true
 		fi
 		if echo "$dbc_fs_dbtypes" | grep -q "$dbc_dbtype"; then
 			# if these haven't been specified, use defaults
 			if [ "$dbc_basepath" ]; then 
-				db_set $dbc_package/db/basepath "$dbc_basepath"
+				db_set $dbc_package/db/basepath "$dbc_basepath" || true
 			fi
 		fi
 
 	;;
 	# state 4 - do stuff based on the connection method
 	4)
-		db_get $dbc_package/$dbc_dbtype/method && dbc_method="$RET"
+		db_get $dbc_package/$dbc_dbtype/method && dbc_method="$RET" || true
 
 		if echo "$dbc_remote_dbtypes" | grep -q "$dbc_dbtype"; then
 			# if package/method == tcp/ip or tcp/ip + ssl
@@ -277,7 +277,7 @@
 				if [ "$_preconf_list" ]; then
 					_preconf_list=`echo $_preconf_list | sed -e 's/ /, /g'`
 					_preconf_list="new host, $_preconf_list"
-					db_subst $dbc_package/remote/host hosts "$_preconf_list"
+					db_subst $dbc_package/remote/host hosts "$_preconf_list" || true
 					# and then ask them for one
 					db_input high $dbc_package/remote/host || true
 				fi
@@ -294,7 +294,7 @@
 		if echo "$dbc_remote_dbtypes" | grep -q "$dbc_dbtype"; then
 			if [ "$dbc_method" != "unix socket" ]; then
 				if [ "$_preconf_list" ]; then
-					db_get $dbc_package/remote/host 
+					db_get $dbc_package/remote/host  || true
 					host=$RET
 				fi
 
@@ -311,20 +311,20 @@
 		if echo "$dbc_remote_dbtypes" | grep -q "$dbc_dbtype"; then
 			if [ "$dbc_method" != "unix socket" ]; then
 				if [ ! "$host" -o "$host" = "new host" ]; then
-					db_get $dbc_package/remote/newhost 
+					db_get $dbc_package/remote/newhost  || true
 					newhost="$RET"
 
 					# add the new host to the existing list of hosts
-					db_metaget $dbc_package/remote/host choices
+					db_metaget $dbc_package/remote/host choices || true
 					oldhosts="$RET"
-					db_subst $dbc_package/remote/host hosts "$oldhosts, $newhost"
-					db_set $dbc_package/remote/host "$newhost"
-					db_fset $dbc_package/remote/host seen true
+					db_subst $dbc_package/remote/host hosts "$oldhosts, $newhost" || true
+					db_set $dbc_package/remote/host "$newhost" || true
+					db_fset $dbc_package/remote/host seen true || true
 				else
 					# set the "newhost" to the selected host, because
 					# the second time through the configure script we'll
 					# need this set
-					db_set $dbc_package/remote/newhost "$host"
+					db_set $dbc_package/remote/newhost "$host" || true
 				fi
 
 				# on what port?
@@ -343,7 +343,7 @@
 	# state 8 - pgsql auth stuff, part 2
 	8)
 		if [ "$dbc_dbtype" = "pgsql" ] && [ ! "$dbc_frontend" ]; then
-			db_get $dbc_package/pgsql/authmethod-admin && authmethod_admin="$RET"
+			db_get $dbc_package/pgsql/authmethod-admin && authmethod_admin="$RET" || true
 			# if we are using ident, we don't need passwords
 			if [ "$authmethod_admin" = "ident" ]; then
 				need_adminpw="false"
@@ -351,7 +351,7 @@
 			# default the user auth method to the admin method
 			# ...but only if the answer hasn't already been specified.
 			if [ ! "${dbc_authmethod_user}" ]; then
-				db_set $dbc_package/pgsql/authmethod-user "$authmethod_admin"
+				db_set $dbc_package/pgsql/authmethod-user "$authmethod_admin" || true
 			fi
 			db_input medium $dbc_package/pgsql/authmethod-user || true
 		fi
@@ -396,5 +396,5 @@
 		fi
 	done
 	
-	db_set $dbc_package/internal/skip-preseed true
+	db_set $dbc_package/internal/skip-preseed true || true
 }
