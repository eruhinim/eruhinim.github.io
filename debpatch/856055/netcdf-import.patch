--- a/src/exec/dxmods/import_ncdf.c
+++ b/src/exec/dxmods/import_ncdf.c
@@ -1406,9 +1406,10 @@
 	
 	vp1 = vp2;
 	vp2 = vp2->next;
-	printf("%08x: class = %d, varid = %d, name = %s\n",
-	       (unsigned int) vp1, vp1->class, vp1->varid, vp1->name);
-	printf("          next = %08x, child = %08x\n", (unsigned int) vp1->next, (unsigned int) vp1->child);
+	printf("%20p: class = %d, varid = %d, name = %s\n",
+	       (void *)vp1, vp1->class, vp1->varid, vp1->name);
+	printf("          next = %20p, child = %20p\n",
+	       (void *)vp1->next, (void *)vp1->child);
 
     }
 }    
@@ -2970,29 +2971,23 @@
 	if(series)
 	    dstart[0] = i;
 
-	/* if data is long, create a temp long buffer to copy 
-	   netCDF data to then move to the SVS array buffer */
-	if (ap->arraytype == TYPE_INT) {
-	   data_int = (int *)DXGetArrayData (adata);
-	   if(!data_int)
-	       goto error;
-	   for (k=0,n=ap->data_ndims - ap->arrayrank; k<ap->arrayrank; k++,n++) 
-	      ndims *= ap->datacounts[n];
-	   tempbuf = (long *)DXAllocate(ndims * size * sizeof(long));
-	   if(ncvarget(ap->cdfhandle,          /* netcdf file handle */
-		    ap->varid,              /* variable id */
-		    dstart,                 /* array-origin for each dim */
-		    long_datacounts,         /* array-counts along each dim */
-		    tempbuf) < 0) {         /* memory pointer */
-	       DXSetError(ERROR_INTERNAL, "netCDF library error");
-	       goto error;
-	   }
-	   for (k=0; k<size*ndims; k++) 
-	      data_int[k] = (int)tempbuf[k];
- 	   DXFree((Pointer)tempbuf);
-	}
+        /*TODO Use these modern converting nc functions more. */
+        if (ap->arraytype == TYPE_INT) {
+            data_int = DXGetArrayData (adata);
+            if(!data_int)
+                goto error;
+            if (nc_get_vara_int(
+                    ap->cdfhandle,          /* netcdf file handle */
+                    ap->varid,              /* variable id */
+                    dstart,                 /* array-origin for each dim */
+                    long_datacounts,       /* array-counts along each dim */
+                    data_int)               /* memory pointer */
+                != NC_NOERR) {
+               DXSetError(ERROR_INTERNAL, "netCDF library error");
+               goto error;
+            }
+        }
 	else {
-
 	dataval = DXGetArrayData (adata);
 	if(!dataval)
 	    goto error;
@@ -3143,26 +3138,21 @@
 	if(series)
 	    dstart[0] = i;
 
-	/* if data is long, create a temp long buffer to copy 
-	   netCDF data to then move to the SVS array buffer */
+	/*TODO Share code with build_data above. */
 	if (ap->arraytype == TYPE_INT) {
-	   data_int = DXGetArrayData (adata);
-	   if(!data_int)
-	       goto error;
-	   for (k=0, n=ap->array_ndims - ap->arrayrank; k<ap->arrayrank;k++,n++)
-	      ndims *=ap->arraycounts[n];
-	   tempbuf = (long *)DXAllocate(size * ndims * sizeof(long));
-	   if(ncvarget(ap->cdfhandle,          /* netcdf file handle */
-		    ap->varid,              /* variable id */
-		    dstart,                 /* array-origin for each dim */
-		    long_arraycounts,         /* array-counts along each dim */
-		    tempbuf) < 0) {         /* memory pointer */
-	       DXSetError(ERROR_INTERNAL, "netCDF library error");
-	       goto error;
-	   }
-	   for (k=0; k<size*ndims; k++) 
-	      data_int[k] = (int)tempbuf[k];
- 	   DXFree((Pointer)tempbuf);
+	    data_int = DXGetArrayData (adata);
+	    if(!data_int)
+	        goto error;
+	    if (nc_get_vara_int(
+	            ap->cdfhandle,          /* netcdf file handle */
+	            ap->varid,              /* variable id */
+	            dstart,                 /* array-origin for each dim */
+	            long_arraycounts,       /* array-counts along each dim */
+	            data_int)               /* memory pointer */
+	        != NC_NOERR) {
+	        DXSetError(ERROR_INTERNAL, "netCDF library error");
+	        goto error;
+	    }
 	}
 	else {
 	dataval = DXGetArrayData (adata);
