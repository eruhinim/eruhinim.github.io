diff -Nru dpkg-1.17.23/debian/changelog dpkg-1.17.23+local3/debian/changelog
--- dpkg-1.17.23/debian/changelog	2014-12-27 16:44:47.000000000 -0600
+++ dpkg-1.17.23+local3/debian/changelog	2015-03-01 19:43:18.000000000 -0600
@@ -1,3 +1,10 @@
+dpkg (1.17.23+local3) UNRELEASED; urgency=medium
+
+  * Non-maintainer upload.
+  * Avoid resource exhaustion by having one kvm_t per function using it.
+
+ -- Jeff Epler <jepler@unpythonic.net>  Sun, 01 Mar 2015 19:42:38 -0600
+
 dpkg (1.17.23) unstable; urgency=low
 
   [ Guillem Jover ]
diff -Nru dpkg-1.17.23/utils/start-stop-daemon.c dpkg-1.17.23+local3/utils/start-stop-daemon.c
--- dpkg-1.17.23/utils/start-stop-daemon.c	2014-12-13 16:07:23.000000000 -0600
+++ dpkg-1.17.23+local3/utils/start-stop-daemon.c	2015-03-01 19:42:19.000000000 -0600
@@ -1367,7 +1367,7 @@
 static bool
 pid_is_exec(pid_t pid, const struct stat *esb)
 {
-	kvm_t *kd;
+	static kvm_t *kd;
 	int argv_len = 0;
 	struct kinfo_proc *kp;
 	struct stat sb;
@@ -1375,7 +1375,7 @@
 	char **pid_argv_p;
 	char *start_argv_0_p, *end_argv_0_p;
 
-	kd = ssd_kvm_open();
+	if (!kd) kd = ssd_kvm_open();
 	kp = ssd_kvm_get_procs(kd, KERN_PROC_PID, pid, NULL);
 	if (kp == NULL)
 		return false;
@@ -1457,11 +1457,11 @@
 static bool
 pid_is_child(pid_t pid, pid_t ppid)
 {
-	kvm_t *kd;
+	static kvm_t *kd;
 	struct kinfo_proc *kp;
 	pid_t proc_ppid;
 
-	kd = ssd_kvm_open();
+	if (!kd) kd = ssd_kvm_open();
 	kp = ssd_kvm_get_procs(kd, KERN_PROC_PID, pid, NULL);
 	if (kp == NULL)
 		return false;
@@ -1515,11 +1515,11 @@
 static bool
 pid_is_user(pid_t pid, uid_t uid)
 {
-	kvm_t *kd;
+	static kvm_t *kd;
 	uid_t proc_uid;
 	struct kinfo_proc *kp;
 
-	kd = ssd_kvm_open();
+	if (!kd) kd = ssd_kvm_open();
 	kp = ssd_kvm_get_procs(kd, KERN_PROC_PID, pid, NULL);
 	if (kp == NULL)
 		return false;
@@ -1599,11 +1599,11 @@
 static bool
 pid_is_cmd(pid_t pid, const char *name)
 {
-	kvm_t *kd;
+	static kvm_t *kd;
 	struct kinfo_proc *kp;
 	char *process_name;
 
-	kd = ssd_kvm_open();
+	if (!kd) kd = ssd_kvm_open();
 	kp = ssd_kvm_get_procs(kd, KERN_PROC_PID, pid, NULL);
 	if (kp == NULL)
 		return false;
@@ -1768,12 +1768,12 @@
 static enum status_code
 do_procinit(void)
 {
-	kvm_t *kd;
+	static kvm_t *kd;
 	int nentries, i;
 	struct kinfo_proc *kp;
 	enum status_code prog_status = STATUS_DEAD;
 
-	kd = ssd_kvm_open();
+	if (!kd) kd = ssd_kvm_open();
 	kp = ssd_kvm_get_procs(kd, KERN_PROC_ALL, 0, &nentries);
 
 	for (i = 0; i < nentries; i++) {
